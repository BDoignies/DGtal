/**
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as
 *  published by the Free Software Foundation, either version 3 of the
 *  License, or  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 **/

/**
 * @file LinearImplicitCellEmbedder.ih
 * @author Jacques-Olivier Lachaud (\c jacques-olivier.lachaud@univ-savoie.fr )
 * Laboratory of Mathematics (CNRS, UMR 5807), University of Savoie, France
 *
 * @date 2012/02/14
 *
 * Implementation of inline methods defined in LinearImplicitCellEmbedder.h
 *
 * This file is part of the DGtal library.
 */


//////////////////////////////////////////////////////////////////////////////
#include <cstdlib>
//////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// IMPLEMENTATION of inline methods.
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// ----------------------- Standard services ------------------------------

//-----------------------------------------------------------------------------
template < typename TKSpace, typename TImplicitFunction, typename TEmbedder >
inline
DGtal::LinearImplicitCellEmbedder<TKSpace, TImplicitFunction, TEmbedder>::
~LinearImplicitCellEmbedder()
{}
//-----------------------------------------------------------------------------
template < typename TKSpace, typename TImplicitFunction, typename TEmbedder >
inline
DGtal::LinearImplicitCellEmbedder<TKSpace, TImplicitFunction, TEmbedder>::
LinearImplicitCellEmbedder()
  : myPtrK( 0 ), myPtrFct( 0 ), myPtrEmbedder( 0 )
{}
//-----------------------------------------------------------------------------
template < typename TKSpace, typename TImplicitFunction, typename TEmbedder >
inline
DGtal::LinearImplicitCellEmbedder<TKSpace, TImplicitFunction, TEmbedder>::
LinearImplicitCellEmbedder( const LinearImplicitCellEmbedder & other )
  : myPtrK( other.myPtrK ), 
    myPtrFct( other.myPtrFct ), 
    myPtrEmbedder( other.myPtrEmbedder )
{}
//-----------------------------------------------------------------------------
template < typename TKSpace, typename TImplicitFunction, typename TEmbedder >
inline
DGtal::LinearImplicitCellEmbedder<TKSpace, TImplicitFunction, TEmbedder> &
DGtal::LinearImplicitCellEmbedder<TKSpace, TImplicitFunction, TEmbedder>::
operator=( const LinearImplicitCellEmbedder & other )
{
  if ( this != &other )
    {
      myPtrK = other.myPtrK;
      myPtrFct = other.myPtrFct;
      myPtrEmbedder = other.myPtrEmbedder;
    }
  return *this;
}
//-----------------------------------------------------------------------------
template < typename TKSpace, typename TImplicitFunction, typename TEmbedder >
inline
void 
DGtal::LinearImplicitCellEmbedder<TKSpace, TImplicitFunction, TEmbedder>::
init( const KSpace & K, const ImplicitFunction & f, const Embedder & e )
{
  myPtrK = &K;
  myPtrFct = &f;
  myPtrEmbedder = &e;
}
//-----------------------------------------------------------------------------
template < typename TKSpace, typename TImplicitFunction, typename TEmbedder >
inline
typename DGtal::LinearImplicitCellEmbedder<TKSpace, TImplicitFunction, TEmbedder>::RealPoint
DGtal::LinearImplicitCellEmbedder<TKSpace, TImplicitFunction, TEmbedder>::
embed( const Point & p ) const
{
  ASSERT( myPtrEmbedder != 0 );
  return myPtrEmbedder->embed( p );
}
//-----------------------------------------------------------------------------
template < typename TKSpace, typename TImplicitFunction, typename TEmbedder >
inline
typename DGtal::LinearImplicitCellEmbedder<TKSpace, TImplicitFunction, TEmbedder>::RealPoint
DGtal::LinearImplicitCellEmbedder<TKSpace, TImplicitFunction, TEmbedder>::
embedCell( const Cell & cell ) const
{
  ASSERT( this->isValid() );
  // embed first the spel related to the cell.
  Point p1( myPtrK->uCoords( cell ) );
  RealPoint x1( embed( p1 ) );
  Value y1 = (*myPtrFct)( x1 );
  for ( typename KSpace::DirIterator qit = myPtrK->uOrthDirs( cell ); 
        qit != 0; ++qit )
    { // cell is closed along this dimension.
      // estimate coordinate by interpolation, looking for f(...)=0.
      Dimension k = *qit;
      Point p2( p1 ); --p2[ k ];
      RealPoint x2( embed( p2 ) );
      Value y2 = (*myPtrFct)( x2 );
      x1[ k ] -= y1 * ( x2[ k ] - x1[ k ] ) / ( y2 - y1 );
    }
  return x1;
}
//-----------------------------------------------------------------------------
template < typename TKSpace, typename TImplicitFunction, typename TEmbedder >
inline
typename DGtal::LinearImplicitCellEmbedder<TKSpace, TImplicitFunction, TEmbedder>::RealPoint
DGtal::LinearImplicitCellEmbedder<TKSpace, TImplicitFunction, TEmbedder>::
embedSCell( const SCell & scell ) const
{
  ASSERT( this->isValid() );
  // embed first the spel related to the cell.
  Point p1( myPtrK->sCoords( scell ) );
  RealPoint x1( embed( p1 ) );
  Value y1 = (*myPtrFct)( x1 );
  for ( typename KSpace::DirIterator qit = myPtrK->sOrthDirs( scell ); 
        qit != 0; ++qit )
    { // cell is closed along this dimension.
      // estimate coordinate by interpolation, looking for f(...)=0.
      Dimension k = *qit;
      Point p2( p1 ); --p2[ k ];
      RealPoint x2( embed( p2 ) );
      Value y2 = (*myPtrFct)( x2 );
      x1[ k ] -= y1 * ( x2[ k ] - x1[ k ] ) / ( y2 - y1 );
    }
  return x1;
}
//-----------------------------------------------------------------------------
template < typename TKSpace, typename TImplicitFunction, typename TEmbedder >
inline
void
DGtal::LinearImplicitCellEmbedder<TKSpace, TImplicitFunction, TEmbedder>::
embed( const Point & p, RealPoint & x, RealVector & grad ) const
{
  x = embed( p );
  grad = myPtrFct->gradient( x );
}
//-----------------------------------------------------------------------------
template < typename TKSpace, typename TImplicitFunction, typename TEmbedder >
inline
void
DGtal::LinearImplicitCellEmbedder<TKSpace, TImplicitFunction, TEmbedder>::
embedCell( const Cell & cell, RealPoint & x, RealVector & grad ) const
{
  x = embedCell( cell );
  grad = myPtrFct->gradient( x );
}
//-----------------------------------------------------------------------------
template < typename TKSpace, typename TImplicitFunction, typename TEmbedder >
inline
void
DGtal::LinearImplicitCellEmbedder<TKSpace, TImplicitFunction, TEmbedder>::
embedSCell( const SCell & scell, RealPoint & x, RealVector & grad ) const
{
  x = embedSCell( scell );
  grad = myPtrFct->gradient( x );
}



///////////////////////////////////////////////////////////////////////////////
// Interface - public :

/**
 * Writes/Displays the object on an output stream.
 * @param out the output stream where the object is written.
 */
template < typename TKSpace, typename TImplicitFunction, typename TEmbedder >
inline
void
DGtal::LinearImplicitCellEmbedder<TKSpace, TImplicitFunction, TEmbedder>::
selfDisplay ( std::ostream & out ) const
{
  out << "[LinearImplicitCellEmbedder]";
}

/**
 * Checks the validity/consistency of the object.
 * @return 'true' if the object is valid, 'false' otherwise.
 */
template < typename TKSpace, typename TImplicitFunction, typename TEmbedder >
inline
bool
DGtal::LinearImplicitCellEmbedder<TKSpace, TImplicitFunction, TEmbedder>::
isValid() const
{
  return ( myPtrK != 0 ) && ( myPtrFct != 0 ) && ( myPtrEmbedder != 0 );
}



///////////////////////////////////////////////////////////////////////////////
// Implementation of inline functions                                        //

template < typename TKSpace, typename TImplicitFunction, typename TEmbedder >
inline
std::ostream&
DGtal::operator<< ( std::ostream & out, 
                    const LinearImplicitCellEmbedder<TKSpace, TImplicitFunction, TEmbedder> & object )
{
  object.selfDisplay( out );
  return out;
}

//                                                                           //
///////////////////////////////////////////////////////////////////////////////


