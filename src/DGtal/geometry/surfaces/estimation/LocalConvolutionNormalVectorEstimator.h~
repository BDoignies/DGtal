/**
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as
 *  published by the Free Software Foundation, either version 3 of the
 *  License, or  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 **/

#pragma once

/**
 * @file LocalConvolutionNormalVectorEstimation.h
 * @brief Computes the true quantity to each element of a range associated to a parametric shape.
 * @author David Coeurjolly (\c david.coeurjolly@liris.cnrs.fr )
 * Laboratoire d'InfoRmatique en Image et Syst√®mes d'information - LIRIS (CNRS, UMR 5205), CNRS, France
 *
 * @date 2011/06/27
 *
 * Header file for module LocalConvolutionNormalVectorEstimation.cpp
 *
 * This file is part of the DGtal library.
 *
 * @see  testNormalVectorEstimation.cpp
 */

#if defined(LocalConvolutionNormalVectorEstimation_RECURSES)
#error Recursive header files inclusion detected in LocalConvolutionNormalVectorEstimation.h
#else // defined(LocalConvolutionNormalVectorEstimation_RECURSES)
/** Prevents recursive inclusion of headers. */
#define LocalConvolutionNormalVectorEstimation_RECURSES

#if !defined LocalConvolutionNormalVectorEstimation_h
/** Prevents repeated inclusion of headers. */
#define LocalConvolutionNormalVectorEstimation_h

//////////////////////////////////////////////////////////////////////////////
// Inclusions
#include <iostream>
#include "DGtal/base/Common.h"
#include "DGtal/kernel/PointVector.h"
#include "DGtal/base/CountedPtr.h"
#include "DGtal/topology/BreadthFirstVisitor.h"

//////////////////////////////////////////////////////////////////////////////

namespace DGtal
{
  /////////////////////////////////////////////////////////////////////////////
  // template class LocalConvolutionNormalVectorEstimation
  /**
   * Description of template class 'LocalConvolutionNormalVectorEstimation' <p>
   * \brief Aim: Computes the normal vector at a surface element by
   * summation of elementary normal vector to adjacent surfel.
   *
   * To each $n-1$ signed surfel, an elementary outward normal vector can be
   * defined. At a given surfel, this estimator will compute the
   * weighted sum of elementary normal vector of neighboring surfel
   * using a breath-first propagation around the given surfel.
   *
   * The neighboring is parametrized by a given topological radius @e R.
   * The weight function maps [O,R] to a continuous weights.
   *
   * @tparam TDigitalSurface type of digital surface on which we would
   * like to compute vector field..
   * @tparam TKernelFunctor type of Functor used to represent
   * convolution kernel functor.
   */
  template <typename TDigitalSurface, typename TWeighFunctor>
  class LocalConvolutionNormalVectorEstimation
  {

    // ----------------------- Types ------------------------------
  public:

    typedef TDigitalSurface DigitalSurface;
    typedef typename TDigitalSurface::ConsIterator ConstIterator;
    typedef typename DigitalSurface:KSpace::Space::RealVector Quantity;
    

    // ----------------------- Standard services ------------------------------
  public:

    /**
     * Default constructor.
     */
    LocalConvolutionNormalVectorEstimation() 
    {
      myFlagIsInit = false;
    }
   
    /**
     * Constructor.
     * @param h grid size (must be >0).
     * @param itb, begin iterator
     * @param ite, end iterator
     */
    LocalConvolutionNormalVectorEstimation(const double h, 
                                         const ConstIterator& itb, 
                                         const ConstIterator& ite,
                                         DigitalSurface * aSurface,
                                         const TWeighFunctor & aFunctor,
                                         const unsigned int radius);
    
    /**
     * Destructor.
     */
    ~LocalConvolutionNormalVectorEstimation() {};

    // ----------------------- Interface --------------------------------------
  public:

    /**
     * Initialisation.
     * @param h grid size (must be >0).
     * @param itb, begin iterator
     * @param ite, end iterator
      */
    void init(const double h, 
              const ConstIterator& itb, 
              const ConstIterator& ite,
              DigitalSurface *aSurface,
              const TWeighFunctor & aFunctor,
              const unsigned int radius);
    
    /**
     * @return the estimated quantity at *it
     */
    Quantity eval(const ConstIterator& it);
    
    /**
     * @return the estimated quantity
     * from itb till ite (exculded)
     */
    template <typename OutputIterator>
    OutputIterator eval(const ConstIterator& itb, 
                        const ConstIterator& ite, 
                        OutputIterator result); 
    
    
    /**
     * Checks the validity/consistency of the object.
     * @return 'true' if the object is valid, 'false' otherwise.
     */
    bool isValid() const;

    // ------------------------- Protected Datas ------------------------------
  protected:

    // ------------------------- Private Datas --------------------------------
  private:

    ///Grid size
    double myH; 
    
    ///Bool if the curve is closed
    bool myFlagIsClosed;
    
    ///True if the init() has been called.
    bool myFlagIsInit;
    
    ///Parametric quantity functor
    unsigned int myRadius;
    
    ///Copy of the begin iterator
    ConstIterator myBegin;
    
    ///Copy of the end iterator
    ConstIterator myEnd;

    ///Copy of the kernel convolution functor.
    TWeighFunctor myKernelFunctor;

    ///Pointer to the digitale surface
    CountedPtr<TDigitalSurface> mySurface;


    // ------------------------- Hidden services ------------------------------
  private:
    
    /**
     * Copy constructor.
     * @param other the object to clone.
     * Forbidden by default.
     */
    LocalConvolutionNormalVectorEstimation ( const LocalConvolutionNormalVectorEstimation & other );

    /**
     * Assignment.
     * @param other the object to copy.
     * @return a reference on 'this'.
     * Forbidden by default.
     */
    LocalConvolutionNormalVectorEstimation & operator= ( const LocalConvolutionNormalVectorEstimation & other );


  }; // end of class LocalConvolutionNormalVectorEstimation

} // namespace DGtal


///////////////////////////////////////////////////////////////////////////////
// Includes inline functions.
#include "DGtal/geometry/curves/estimation/LocalConvolutionNormalVectorEstimation.ih"

//                                                                           //
///////////////////////////////////////////////////////////////////////////////

#endif // !defined LocalConvolutionNormalVectorEstimation_h

#undef LocalConvolutionNormalVectorEstimation_RECURSES
#endif // else defined(LocalConvolutionNormalVectorEstimation_RECURSES)
