/**
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as
 *  published by the Free Software Foundation, either version 3 of the
 *  License, or  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 **/

/**
 * @file LocalEstimatorFromFunctorAdapter.ih
 * @author David Coeurjolly (\c david.coeurjolly@liris.cnrs.fr )
 * Laboratoire d'InfoRmatique en Image et Systemes d'information - LIRIS (CNRS, UMR 5205), CNRS, France
 *
 * @date 2013/05/28
 *
 * Implementation of inline methods defined in LocalEstimatorFromFunctorAdapter.h
 *
 * This file is part of the DGtal library.
 */

//////////////////////////////////////////////////////////////////////////////
#include <cstdlib>
//////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// IMPLEMENTATION of inline methods.
///////////////////////////////////////////////////////////////////////////////
template <typename DigitalSurf, typename Functor>
inline
DGtal::LocalEstimatorFromFunctorAdapter<DigitalSurf,Functor>::LocalEstimatorFromFunctorAdapter(ConstAlias<DigitalSurf> aSurf,
                                                                                               ConstAlias<Functor> afunctor):
mySurface(aSurf),myFunctor(afunctor)
{
}
///////////////////////////////////////////////////////////////////////////////
template <typename DigitalSurf, typename Functor>
inline
DGtal::LocalEstimatorFromFunctorAdapter<DigitalSurf,Functor>::~LocalEstimatorFromFunctorAdapter()
{
}

///////////////////////////////////////////////////////////////////////////////
template <typename DigitalSurf, typename Functor>
inline
void
DGtal::LocalEstimatorFromFunctorAdapter<DigitalSurf,Functor>::selfDisplay ( std::ostream & out ) const
{
  out << "[LocalEstimatorFromFunctorAdapter]";
}
///////////////////////////////////////////////////////////////////////////////
template <typename DigitalSurf, typename Functor>
inline
bool
DGtal::LocalEstimatorFromFunctorAdapter<DigitalSurf,Functor>::isValid() const
{
  return true;
}
///////////////////////////////////////////////////////////////////////////////
template <typename DigitalSurf,  typename Functor>
inline
typename DGtal::LocalEstimatorFromFunctorAdapter<DigitalSurf,Functor>::Quantity
DGtal::LocalEstimatorFromFunctorAdapter<DigitalSurf,Functor>::eval ( const ConstIterator& it ) const
{
  return myFunctor->operator()( *it );
}
///////////////////////////////////////////////////////////////////////////////
template <typename DigitalSurf,  typename Functor>
template <typename OutputIterator>
inline
OutputIterator
DGtal::LocalEstimatorFromFunctorAdapter<DigitalSurf,Functor>::eval (const ConstIterator& itb,
                                                                    const ConstIterator& ite,
                                                                    OutputIterator result ) const
{
  for ( ConstIterator it = itb; it != ite; ++it )
  {
    Quantity q = eval( *it );
    *result++ = q;
  }
  
  return result;
}
///////////////////////////////////////////////////////////////////////////////
template <typename DigitalSurf, typename Functor>
inline
std::ostream&
DGtal::operator<< ( std::ostream & out,
                   const LocalEstimatorFromFunctorAdapter<DigitalSurf,Functor> & object )
{
  object.selfDisplay( out );
  return out;
}
///////////////////////////////////////////////////////////////////////////////


