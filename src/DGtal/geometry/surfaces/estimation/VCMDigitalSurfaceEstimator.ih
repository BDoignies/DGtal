/**
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as
 *  published by the Free Software Foundation, either version 3 of the
 *  License, or  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 **/

/**
 * @file VCMDigitalSurfaceEstimator.ih
 * @author Jacques-Olivier Lachaud (\c jacques-olivier.lachaud@univ-savoie.fr )
 * Laboratory of Mathematics (CNRS, UMR 5127), University of Savoie, France
 *
 * @date 2014/02/13
 *
 * Implementation of inline methods defined in VCMDigitalSurfaceEstimator.h
 *
 * This file is part of the DGtal library.
 */


//////////////////////////////////////////////////////////////////////////////
#include <cstdlib>
//////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// IMPLEMENTATION of inline methods.
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// ----------------------- Standard services ------------------------------

//-----------------------------------------------------------------------------
template <typename TDigitalSurfaceContainer, typename TSeparableMetric,
          typename TKernelFunction, typename TVCMGeometricFunctor>
inline
DGtal::VCMDigitalSurfaceEstimator<TDigitalSurfaceContainer, TSeparableMetric, TKernelFunction, TVCMGeometricFunctor>::
~VCMDigitalSurfaceEstimator()
{
}

//-----------------------------------------------------------------------------
template <typename TDigitalSurfaceContainer, typename TSeparableMetric,
          typename TKernelFunction, typename TVCMGeometricFunctor>
inline
DGtal::VCMDigitalSurfaceEstimator<TDigitalSurfaceContainer, TSeparableMetric, TKernelFunction, TVCMGeometricFunctor>::
VCMDigitalSurfaceEstimator()
  : mySurface( 0 ), 
    mySurfelEmbedding( InnerSpel ),
    myVCMOnSurface( 0 ),
    myGeomFct()
{
}

//-----------------------------------------------------------------------------
template <typename TDigitalSurfaceContainer, typename TSeparableMetric,
          typename TKernelFunction, typename TVCMGeometricFunctor>
inline
DGtal::VCMDigitalSurfaceEstimator<TDigitalSurfaceContainer, TSeparableMetric, TKernelFunction, TVCMGeometricFunctor>::
VCMDigitalSurfaceEstimator( const Self& other )
  : mySurface( other.mySurface ), 
    mySurfelEmbedding( other.mySurfelEmbedding ),
    myVCMOnSurface( other.myVCMOnSurface ),
    myGeomFct( other.myGeomFct )
{
}

//-----------------------------------------------------------------------------
template <typename TDigitalSurfaceContainer, typename TSeparableMetric,
          typename TKernelFunction, typename TVCMGeometricFunctor>
inline
typename DGtal::VCMDigitalSurfaceEstimator<TDigitalSurfaceContainer, TSeparableMetric, TKernelFunction, TVCMGeometricFunctor>::Self&
DGtal::VCMDigitalSurfaceEstimator<TDigitalSurfaceContainer, TSeparableMetric, TKernelFunction, TVCMGeometricFunctor>::
operator=( const Self& other )
{
  if ( this != &other ) 
    {
      mySurface = other.mySurface;
      mySurfelEmbedding = other.mySurfelEmbedding;
      myVCMOnSurface = other.myVCMOnSurface;    
      myGeomFct = other.myGeomFct;
    }
  return *this;
}

//-----------------------------------------------------------------------------
template <typename TDigitalSurfaceContainer, typename TSeparableMetric,
          typename TKernelFunction, typename TVCMGeometricFunctor>
inline
DGtal::VCMDigitalSurfaceEstimator<TDigitalSurfaceContainer, TSeparableMetric, TKernelFunction, TVCMGeometricFunctor>::
VCMDigitalSurfaceEstimator( ConstAlias< VCMOnSurface > vcmSurface )
  : mySurface( vcmSurface->surface() ), 
    mySurfelEmbedding( vcmSurface->surfelEmbedding() ),
    myVCMOnSurface( vcmSurface ),
    myGeomFct( vcmSurface )
{
}
//-----------------------------------------------------------------------------
template <typename TDigitalSurfaceContainer, typename TSeparableMetric,
          typename TKernelFunction, typename TVCMGeometricFunctor>
inline
DGtal::VCMDigitalSurfaceEstimator<TDigitalSurfaceContainer, TSeparableMetric, TKernelFunction, TVCMGeometricFunctor>::
VCMDigitalSurfaceEstimator( ConstAlias< Surface > surface )
  : mySurface( surface ), 
    mySurfelEmbedding( InnerSpel ),
    myVCMOnSurface( 0 ),
    myGeomFct()
{
}

//-----------------------------------------------------------------------------
template <typename TDigitalSurfaceContainer, typename TSeparableMetric,
          typename TKernelFunction, typename TVCMGeometricFunctor>
inline
void
DGtal::VCMDigitalSurfaceEstimator<TDigitalSurfaceContainer, TSeparableMetric, TKernelFunction, TVCMGeometricFunctor>::
setParams( Surfel2PointEmbedding surfelEmbedding,
           const Scalar R, const Scalar r, KernelFunction chi_r,
           const Scalar t, Metric aMetric, bool verbose )
{
  mySurfelEmbedding = surfelEmbedding;
  myVCMOnSurface = new VCMOnSurface( mySurface, mySurfelEmbedding,
                                     R, r, chi_r, t, aMetric, verbose );
  myGeomFct.attach( myVCMOnSurface );
}
//-----------------------------------------------------------------------------
template <typename TDigitalSurfaceContainer, typename TSeparableMetric,
          typename TKernelFunction, typename TVCMGeometricFunctor>
template <typename SurfelConstIterator>
inline
void
DGtal::VCMDigitalSurfaceEstimator<TDigitalSurfaceContainer, TSeparableMetric, TKernelFunction, TVCMGeometricFunctor>::
init( const Scalar /* h */, 
      SurfelConstIterator /* itb */,
      SurfelConstIterator /* ite */ )
{
  ASSERT( mySurface != 0 );
  ASSERT( myVCMOnSurface != 0 );
  // Unused. The VCM is necessarily initialized on the whole surface.
}
//-----------------------------------------------------------------------------
template <typename TDigitalSurfaceContainer, typename TSeparableMetric,
          typename TKernelFunction, typename TVCMGeometricFunctor>
template <typename SurfelConstIterator>
inline
typename DGtal::VCMDigitalSurfaceEstimator<TDigitalSurfaceContainer, TSeparableMetric, TKernelFunction, TVCMGeometricFunctor>::Quantity
DGtal::VCMDigitalSurfaceEstimator<TDigitalSurfaceContainer, TSeparableMetric, TKernelFunction, TVCMGeometricFunctor>::
eval( SurfelConstIterator it ) const
{
  typedef typename VCMOnSurface::Surfel2Normals Surfel2Normals;
  BOOST_CONCEPT_ASSERT(( boost::InputIterator<SurfelConstIterator> ));
  ASSERT( mySurface != 0 );
  ASSERT( myVCMOnSurface != 0 );
  return myGeomFct( *it );
}
//-----------------------------------------------------------------------------
template <typename TDigitalSurfaceContainer, typename TSeparableMetric,
          typename TKernelFunction, typename TVCMGeometricFunctor>
template <typename SurfelConstIterator, typename OutputIterator>
inline
OutputIterator
DGtal::VCMDigitalSurfaceEstimator<TDigitalSurfaceContainer, TSeparableMetric, TKernelFunction, TVCMGeometricFunctor>::
eval( SurfelConstIterator itb,
      SurfelConstIterator ite,
      OutputIterator result ) const
{
  typedef typename VCMOnSurface::Surfel2Normals Surfel2Normals;
  BOOST_CONCEPT_ASSERT(( boost::InputIterator<SurfelConstIterator> ));
  BOOST_CONCEPT_ASSERT(( boost::OutputIterator<OutputIterator,Quantity> ));
  ASSERT( myVCMOnSurface != 0 );
  for ( ; itb != ite; ++itb )
    {
      *result++ = myGeomFct( *itb );
    }
  return result;
}

///////////////////////////////////////////////////////////////////////////////
// Interface - public :

/**
 * Writes/Displays the object on an output stream.
 * @param out the output stream where the object is written.
 */
template <typename TDigitalSurfaceContainer, typename TSeparableMetric,
          typename TKernelFunction, typename TVCMGeometricFunctor>
inline
void
DGtal::VCMDigitalSurfaceEstimator<TDigitalSurfaceContainer, TSeparableMetric, TKernelFunction, TVCMGeometricFunctor>::
selfDisplay ( std::ostream & out ) const
{
  out << "[VCMDigitalSurfaceEstimator]";
}

/**
 * Checks the validity/consistency of the object.
 * @return 'true' if the object is valid, 'false' otherwise.
 */
template <typename TDigitalSurfaceContainer, typename TSeparableMetric,
          typename TKernelFunction, typename TVCMGeometricFunctor>
inline
bool
DGtal::VCMDigitalSurfaceEstimator<TDigitalSurfaceContainer, TSeparableMetric, TKernelFunction, TVCMGeometricFunctor>::
isValid() const
{
  return true;
}



///////////////////////////////////////////////////////////////////////////////
// Implementation of inline functions                                        //

template <typename TDigitalSurfaceContainer, typename TSeparableMetric,
          typename TKernelFunction, typename TVCMGeometricFunctor>
inline
std::ostream&
DGtal::operator<<( std::ostream & out, 
                   const VCMDigitalSurfaceEstimator<TDigitalSurfaceContainer, TSeparableMetric, TKernelFunction, TVCMGeometricFunctor> & object )
{
  object.selfDisplay( out );
  return out;
}

//                                                                           //
///////////////////////////////////////////////////////////////////////////////


