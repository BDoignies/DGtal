/**
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as
 *  published by the Free Software Foundation, either version 3 of the
 *  License, or  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 **/

/**
 * @file
 * @author Jocelyn Meyron (\c jocelyn.meyron@liris.cnrs.fr )
 * Laboratoire d'InfoRmatique en Image et Systemes d'information - LIRIS (CNRS, UMR 5205), CNRS, France
 *
 * @date 2020/12/04
 *
 * Implementation of inline methods defined in PlaneProbingHNeighborhood.h
 *
 * This file is part of the DGtal library.
 */


//////////////////////////////////////////////////////////////////////////////
#include <cstdlib>
//////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// IMPLEMENTATION of inline methods.
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// ----------------------- Standard services ------------------------------

// ------------------------------------------------------------------------
template < typename TPredicate >
DGtal::PlaneProbingHNeighborhood<TPredicate>::
PlaneProbingHNeighborhood(Predicate const& aPredicate, Point const& aQ, Triangle const& aM)
    : DGtal::PlaneProbingNeighborhood<TPredicate>(aPredicate, aQ, aM)
{}

// ------------------------------------------------------------------------
template < typename TPredicate >
DGtal::PlaneProbingHNeighborhood<TPredicate>::
~PlaneProbingHNeighborhood()
{}

///////////////////////////////////////////////////////////////////////////////
// ----------------------- Plane Probing services ------------------------------
// ------------------------------------------------------------------------
template < typename TPredicate >
void DGtal::PlaneProbingHNeighborhood<TPredicate>::compute ()
{
    for (const auto& n: this->getNeighbors()) {
        ProbingRay r = n.getBase();
        Point p = r.getAbsPt(this->myM, this->myQ);

        if (this->myPredicate(p)) {
            this->myPoints.push_back(r);
        }
    }
}


///////////////////////////////////////////////////////////////////////////////
// Interface - public :

/**
 * Writes/Displays the object on an output stream.
 * @param out the output stream where the object is written.
 */
template <typename T>
inline
void
DGtal::PlaneProbingHNeighborhood<T>::selfDisplay ( std::ostream & out ) const
{
  out << "[PlaneProbingHNeighborhood]";
}

/**
 * Checks the validity/consistency of the object.
 * @return 'true' if the object is valid, 'false' otherwise.
 */
template <typename T>
inline
bool
DGtal::PlaneProbingHNeighborhood<T>::isValid() const
{
    return true;
}



///////////////////////////////////////////////////////////////////////////////
// Implementation of inline functions                                        //

template <typename T>
inline
std::ostream&
DGtal::operator<< ( std::ostream & out,
                  const PlaneProbingHNeighborhood<T> & object )
{
  object.selfDisplay( out );
  return out;
}

//                                                                           //
///////////////////////////////////////////////////////////////////////////////


