/**
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as
 *  published by the Free Software Foundation, either version 3 of the
 *  License, or  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 **/

/**
 * @file GreedyDecomposition.ih
 * @author Tristan Roussillon (\c tristan.roussillon@liris.cnrs.fr )
 * Laboratoire d'InfoRmatique en Image et Syst√®mes d'information - LIRIS (CNRS, UMR 5205), CNRS, France
 *
 * @date 2010/10/25
 *
 * Implementation of inline methods defined in GreedyDecomposition.h
 *
 * This file is part of the DGtal library.
 */


//////////////////////////////////////////////////////////////////////////////
#include <cstdlib>
//////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// IMPLEMENTATION of inline methods.
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// class GreedyDecomposition::ConstIterator
///////////////////////////////////////////////////////////////////////////////

// ------------------------- Standard services -----------------------



/**
 * Constructor.
 * Nb: complexity in O(n).
 *
 * @param anIterator an iterator on the digital curve
 * to decompose
 */
 template <typename TIterator, typename TSegment>
inline
DGtal::GreedyDecomposition<TIterator,TSegment>::ConstIterator::ConstIterator
( const Iterator& aBegin, const Iterator& aEnd )
  : myBegin( aBegin ), 
		myEnd( aEnd ), 
		myFront( aBegin ), 
		myBack( aBegin ), 
		mySegment ( Segment(*aBegin) )
{
	if (myBegin != myEnd) {
		this->next();
  }
}


/**
 * Copy constructor.
 * @param other the iterator to clone.
 */
  template <typename TIterator, typename TSegment>
inline
DGtal::GreedyDecomposition<TIterator,TSegment>::ConstIterator::ConstIterator
( const ConstIterator & aOther )
  : myBegin( aOther.myBegin ), myEnd( aOther.myEnd ), 
		myFront( aOther.myFront ), myBack( aOther.myBack ), 
		mySegment( aOther.mySegment ) 
{
}
    
/**
 * Assignment.
 * @param other the iterator to copy.
 * @return a reference on 'this'.
 */
/*  template <typename TIterator, typename TSegment>
inline
typename DGtal::GreedyDecomposition<TIterator,TSegment>::ConstIterator::ConstIterator& 
DGtal::GreedyDecomposition<TIterator,TSegment>::ConstIterator::operator=
( const ConstIterator & other )
{
  if ( this != &other )
    {
      myBegin = other.myBegin;
      myEnd = other.myEnd;
      myFront = other.myFront;
      myBack = other.myBack;
      mySegment = other.mySegment;
    }
  return *this;
}*/
    
/**
 * Destructor.
 * Does nothing
 */
  template <typename TIterator, typename TSegment>
inline
DGtal::GreedyDecomposition<TIterator,TSegment>::ConstIterator::~ConstIterator()
{
}

///////////////////////////////////////////////////////////////////////////////
// ------------------------- iteration services -------------------------
    
      
/**
 * @return the current primitive.
 */
  template <typename TIterator, typename TSegment>
inline
TSegment
DGtal::GreedyDecomposition<TIterator,TSegment>::ConstIterator::operator*() const
{
  return mySegment;
}

/**
 * @return the current primitive.
 */
  template <typename TIterator, typename TSegment>
inline
TSegment
DGtal::GreedyDecomposition<TIterator,TSegment>::ConstIterator::get() const
{
  return mySegment;
}

/**
 * Pre-increment.
 * Goes to the next primitive on the contour.
 */

  template <typename TIterator, typename TSegment>
inline
typename DGtal::GreedyDecomposition<TIterator,TSegment>::ConstIterator::ConstIterator& 
DGtal::GreedyDecomposition<TIterator,TSegment>::ConstIterator::operator++()
{
  this->next();
  return *this;
}
      
/**
 * Goes to the next primitive on the contour.
 */
  template <typename TIterator, typename TSegment>
inline
void
DGtal::GreedyDecomposition<TIterator,TSegment>::ConstIterator::next()
{

	if (myFront != myEnd) { //if not the end

		myBack = myFront;
		mySegment = Segment(*myBack);

		//while my primitive can grow
		++myFront;
		while ( (myFront != myEnd) && 
						(mySegment.extend(*myFront)) ) {
			++myFront;
		}
		//
		if (myFront != myEnd) --myFront;

	} else { //if the front of the primitive is at the end of the contour
		myBack = myEnd;
	}
}

/**
 * Pre-decrement.
 * Goes to the previous primitive on the contour.
 */
  template <typename TIterator, typename TSegment>
inline
typename DGtal::GreedyDecomposition<TIterator,TSegment>::ConstIterator::ConstIterator& 
DGtal::GreedyDecomposition<TIterator,TSegment>::ConstIterator::operator--()
{
  this->previous();
  return *this;
}

/**
 * Goes to the previous primitive on the contour if possible.
 */
  template <typename TIterator, typename TSegment>
inline
void
DGtal::GreedyDecomposition<TIterator,TSegment>::ConstIterator::previous()
{
	if (myBack != myBegin) { //if not at the beginning

		myFront = myBack;
		mySegment = Segment(*myFront);

		//while my primitive can grow
		--myBack;
		while ( (myBack != myBegin) && 
						(mySegment.extend(*myBack)) ) {
			--myBack;
		}

		if (myBack != myBegin) ++myBack;

	} else { //if the back of the primitive is at the beginning of the contour
		myFront = myBegin;
	}

}



/**
 * @return an iterator of the digital curve
 * at the front of the segment.
 */
  template <typename TIterator, typename TSegment>
inline
const TIterator
DGtal::GreedyDecomposition<TIterator,TSegment>::ConstIterator::getFront() const
{
  return myFront;
}

/**
 * @return an iterator of the digital curve
 * at the back of the segment.
 */
  template <typename TIterator, typename TSegment>
inline
const TIterator
DGtal::GreedyDecomposition<TIterator,TSegment>::ConstIterator::getBack() const
{
  return myBack;
}


/**
 * Equality operator.
 *
 * @param aOther the iterator to compare with 
 *
 * @return 'true' if their current positions coincide.
 */
  template <typename TIterator, typename TSegment>
inline
bool
DGtal::GreedyDecomposition<TIterator,TSegment>::ConstIterator::operator==
( const ConstIterator & aOther ) const
{
  return ( (myFront == aOther.myFront)&&(myBack == aOther.myBack) );
}

/**
 * Inequality operator.
 *
 * @param aOther the iterator to compare with 
 *
 * @return 'true' if their current positions differs.
 */
  template <typename TIterator, typename TSegment>
inline
bool
DGtal::GreedyDecomposition<TIterator,TSegment>::ConstIterator::operator!=
( const ConstIterator & aOther ) const
{
  return ( (myFront != aOther.myFront)||(myBack != aOther.myBack) );
}



///////////////////////////////////////////////////////////////////////////////
// Interface - public :


/**
 * Constructor.
 * @param aBegin, begin iterator on a digital curve
 * @param aEnd, end iterator on a digital curve
 */
  template <typename TIterator, typename TSegment>
DGtal::GreedyDecomposition<TIterator,TSegment>::GreedyDecomposition
(const Iterator& aBegin, const Iterator& aEnd)
 : myBegin(aBegin),
	 myEnd(aEnd)
{
}


/**
 * Destructor.
 */
  template <typename TIterator, typename TSegment>
inline
DGtal::GreedyDecomposition<TIterator,TSegment>::~GreedyDecomposition()
{
}

/**
 * Iterator service.
 * @return an iterator pointing on the first segment
 * of the digital curve.
 */
  template <typename TIterator, typename TSegment>
inline
typename DGtal::GreedyDecomposition<TIterator,TSegment>::ConstIterator 
DGtal::GreedyDecomposition<TIterator,TSegment>::begin() const
{
  return ConstIterator(myBegin,myEnd);
}

/**
 * Iterator service.
 * @return an iterator pointing after the last segment
 * of the digital curve.
 */
  template <typename TIterator, typename TSegment>
inline
typename DGtal::GreedyDecomposition<TIterator,TSegment>::ConstIterator 
DGtal::GreedyDecomposition<TIterator,TSegment>::end() const
{
  return ConstIterator(myEnd,myEnd);
}


/**
 * Writes/Displays the object on an output stream.
 * @param out the output stream where the object is written.
 */
  template <typename TIterator, typename TSegment>
inline
void
DGtal::GreedyDecomposition<TIterator,TSegment>::selfDisplay ( std::ostream & out ) const
{
  out << "[GreedyDecomposition]";
}

/**
 * Checks the validity/consistency of the object.
 * @return 'true' if the object is valid, 'false' otherwise.
 */
  template <typename TIterator, typename TSegment>
inline
bool
DGtal::GreedyDecomposition<TIterator,TSegment>::isValid() const
{
    return true;
}



///////////////////////////////////////////////////////////////////////////////
// Implementation of inline functions                                        //

  template <typename TIterator, typename TSegment>
inline
std::ostream&
DGtal::operator<< ( std::ostream & out, 
		  const GreedyDecomposition<TIterator,TSegment> & object )
{
  object.selfDisplay( out );
  return out;
}

//                                                                           //
///////////////////////////////////////////////////////////////////////////////


