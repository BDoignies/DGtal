/**
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as
 *  published by the Free Software Foundation, either version 3 of the
 *  License, or  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 **/

/**
 * @file MaximalSegments.ih
 * @author Tristan Roussillon (\c tristan.roussillon@liris.cnrs.fr )
 * Laboratoire d'InfoRmatique en Image et Syst√®mes d'information - LIRIS (CNRS, UMR 5205), CNRS, France
 *
 * @date 2011/01/14
 *
 * Implementation of inline methods defined in MaximalSegments.h
 *
 * This file is part of the DGtal library.
 */


//////////////////////////////////////////////////////////////////////////////
#include <cstdlib>
//////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// IMPLEMENTATION of inline methods.
///////////////////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////////////////
// class MaximalSegments<TSegment>::ConstIterator
///////////////////////////////////////////////////////////////////////////////

/**
 * Retrieves the first maximal segment found on the digital curve.
 */
  template <typename TSegment>
inline
void
DGtal::MaximalSegments<TSegment>::ConstIterator::firstMaximalSegment()
{

	mySegment.init(myBack);

	//while my segment can be extended at the front
	++myFront;
	while ( (myFront != myCov->myEnd) && 
					(mySegment.extend(myFront)) ) {
		++myFront;
	}
	//
	if (myFront != myCov->myEnd) {
		
		if (myCov->isClosed) { //if processed as closed 
			this->nextMaximalSegment();
			myCov->myFirstMaximalSegmentBack = myBack;
		}

	}

}

/**
 * Goes to the next maximal segment on a digital curve.
 */
  template <typename TSegment>
inline
void
DGtal::MaximalSegments<TSegment>::ConstIterator::nextMaximalSegment()
{

	if (myFlag == false) {
		//if the current segment lies between 
    //the begin and the end iterator 
    //of the digital curve

		if (myFront != myCov->myEnd) { //if not the end

			//backward extension
			myBack = myFront;
			mySegment.init(myFront);

			//while my segment can be extended at the back
			--myBack;
			while (mySegment.extendOppositeEnd(myBack)) {
				--myBack;
			}

			//forward extension
      //(update of the position of the last point
      // of the digital curve in the same time)
			++myBack;
			myFront = myBack;
			myCov->myLast = myFront;
			mySegment.init(myBack);

			//while my segment can be extended at the front
			++myFront;
			while ( (myFront != myCov->myEnd) && 
							(mySegment.extend(myFront)) ) {
				++myFront;
				++myCov->myLast;
			}

			if (myFront == myCov->myEnd) {

				if (myCov->isClosed) { //if processed as closed 
					//while my segment can be extended at the beginning
					myFront = myCov->myBegin;
					while (mySegment.extend(myFront)) {
						++myFront;
					}
					myFlag = true;
				}

			}

		} else { //if the front of the segment is at the end
						// of the digital curve
			myBack = myCov->myEnd;
		}
	
	} else {
		//if the current segment contains
    //the first and last points 
    //of the digital curve

		//backward extension
		myBack = myFront;
		mySegment.init(myFront);

		//while my segment can be extended at the back
		myBack = decrementInLoop(myBack,myCov->myBegin,myCov->myLast);
		while (mySegment.extend(myBack)) {
			myBack = decrementInLoop(myBack,myCov->myBegin,myCov->myLast);
		}
		myBack = incrementInLoop(myBack,myCov->myBegin,myCov->myEnd);

		if (myBack != myCov->myFirstMaximalSegmentBack) { //if not the end

			//forward extension
			myFront = myBack;
			mySegment.init(myBack);

			//while my segment can be extended at the front
			myFront = incrementInLoop(myFront,myCov->myBegin,myCov->myEnd);
			while (mySegment.extend(myFront)) {
				myFront = incrementInLoop(myFront,myCov->myBegin,myCov->myEnd);
			}

		} else { //if the back of the segment is at the 
             //back of the first maximal segment 
			myFront = myCov->myEnd;
			myBack = myCov->myEnd;
		}

	}

}

// ------------------------- Standard services -----------------------

/**
 * Constructor.
 * Nb: complexity in O(n).
 *
 * @param anIterator an iterator on the digital curve
 * to decompose
 */
 template <typename TSegment>
inline
DGtal::MaximalSegments<TSegment>::ConstIterator::ConstIterator ( 
	MaximalSegments<TSegment> *aCov,
	const typename TSegment::Iterator& aBack,
	const TSegment& aSegment)
  : myCov( aCov ), 
		myFront( aBack ), 
		myBack( aBack ),
		mySegment( aSegment ), 
		myFlag(false)
{
	if (myBack != myCov->myEnd) {
		this->firstMaximalSegment();
  }
}


/**
 * Copy constructor.
 * @param other the iterator to clone.
 */
  template <typename TSegment>
inline
DGtal::MaximalSegments<TSegment>::ConstIterator::ConstIterator
( const ConstIterator & aOther )
  : myCov( aOther.myCov ), 
		myFront( aOther.myFront ), myBack( aOther.myBack ),
		mySegment( aOther.mySegment ), 
		myFlag( aOther.myFlag ) 
{
}
    
/**
 * Assignment.
 * @param other the iterator to copy.
 * @return a reference on 'this'.
 */
  template <typename TSegment>
inline
typename DGtal::MaximalSegments<TSegment>::ConstIterator::ConstIterator& 
DGtal::MaximalSegments<TSegment>::ConstIterator::operator=
( const ConstIterator & other )
{
  if ( this != &other )
    {
      myCov = other.myCov;
      myFront = other.myFront;
      myBack = other.myBack;
      mySegment = other.mySegment;
      myFlag = other.myFlag;
    }
  return *this;
}
    
/**
 * Destructor.
 * Does nothing
 */
  template <typename TSegment>
inline
DGtal::MaximalSegments<TSegment>::ConstIterator::~ConstIterator()
{
}

///////////////////////////////////////////////////////////////////////////////
// ------------------------- iteration services -------------------------
    
      
/**
 * @return the current segment.
 */
  template <typename TSegment>
inline
TSegment
DGtal::MaximalSegments<TSegment>::ConstIterator::operator*() const
{
  return mySegment;
}

/**
 * @return the current segment.
 */
  template <typename TSegment>
inline
TSegment
DGtal::MaximalSegments<TSegment>::ConstIterator::get() const
{
  return mySegment;
}

/**
 * Pre-increment.
 * Goes to the next segment on a digital curve.
 */

  template <typename TSegment>
inline
typename DGtal::MaximalSegments<TSegment>::ConstIterator::ConstIterator& 
DGtal::MaximalSegments<TSegment>::ConstIterator::operator++()
{
  this->nextMaximalSegment();
  return *this;
}



/**
 * @return an iterator of the digital curve
 * at the front of the segment.
 */
  template <typename TSegment>
inline
const typename TSegment::Iterator
DGtal::MaximalSegments<TSegment>::ConstIterator::getFront() const
{
  return myFront;
}

/**
 * @return an iterator of the digital curve
 * at the back of the segment.
 */
  template <typename TSegment>
inline
const typename TSegment::Iterator
DGtal::MaximalSegments<TSegment>::ConstIterator::getBack() const
{
  return myBack;
}





/**
 * Equality operator.
 *
 * @param aOther the iterator to compare with 
 *
 * @return 'true' if their current positions coincide.
 */
  template <typename TSegment>
inline
bool
DGtal::MaximalSegments<TSegment>::ConstIterator::operator==
( const ConstIterator & aOther ) const
{
  return ( (myFront == aOther.myFront)&&(myBack == aOther.myBack) );
}

/**
 * Inequality operator.
 *
 * @param aOther the iterator to compare with 
 *
 * @return 'true' if their current positions differs.
 */
  template <typename TSegment>
inline
bool
DGtal::MaximalSegments<TSegment>::ConstIterator::operator!=
( const ConstIterator & aOther ) const
{
  return ( (myFront != aOther.myFront)||(myBack != aOther.myBack) );
}

//------------------- private services --------------------------//

/**
 * increment
 */
  template <typename TSegment>
inline
typename TSegment::Iterator
DGtal::MaximalSegments<TSegment>::ConstIterator::incrementInLoop
 (typename TSegment::Iterator& anIt, const typename TSegment::Iterator& aBegin,  const typename TSegment::Iterator& aEnd)
{
	++anIt;
	if (anIt == aEnd) return aBegin;
	else return anIt;
}

/**
 * decrement
 */
  template <typename TSegment>
inline
typename TSegment::Iterator
DGtal::MaximalSegments<TSegment>::ConstIterator::decrementInLoop
 (typename TSegment::Iterator& anIt, const typename TSegment::Iterator& aFirst,  const typename TSegment::Iterator& aLast)
{
	if (anIt == aFirst) return aLast;
	else {
		--anIt;
		return anIt;
	}
}

///////////////////////////////////////////////////////////////////////////////
// class MaximalSegments<TSegment>
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// Interface - public :

/**
 * Constructor.
 * @param aBegin, begin iterator on a digital curve
 * @param aEnd, end iterator on a digital curve
 */
  template <typename TSegment>
DGtal::MaximalSegments<TSegment>::MaximalSegments(
  const typename TSegment::Iterator& aBegin, 
  const typename TSegment::Iterator& aEnd, 
	const TSegment& aSegment, 
	const bool& aFlag)
 : myBegin(aBegin),
	 myLast(aBegin),
	 myEnd(aEnd),
	 myFirstMaximalSegmentBack(aBegin),
	 mySegment(aSegment),
	 isClosed(aFlag)
{
}

/**
 * Destructor.
 */
  template <typename TSegment>
inline
DGtal::MaximalSegments<TSegment>::~MaximalSegments()
{
}

/**
 * Iterator service.
 * @return an iterator pointing on the first segment
 * of the digital curve.
 */
  template <typename TSegment>
inline
typename DGtal::MaximalSegments<TSegment>::ConstIterator 
DGtal::MaximalSegments<TSegment>::begin() 
{
  return ConstIterator(this, myBegin, mySegment);
}

/**
 * Iterator service.
 * @return an iterator pointing after the last segment
 * of the digital curve.
 */
  template <typename TSegment>
inline
typename DGtal::MaximalSegments<TSegment>::ConstIterator 
DGtal::MaximalSegments<TSegment>::end() 
{
  return ConstIterator(this, myEnd, mySegment);
}


/**
 * Writes/Displays the object on an output stream.
 * @param out the output stream where the object is written.
 */
  template <typename TSegment>
inline
void
DGtal::MaximalSegments<TSegment>::selfDisplay ( std::ostream & out ) const
{
  out << "[MaximalSegments]";
}

/**
 * Checks the validity/consistency of the object.
 * @return 'true' if the object is valid, 'false' otherwise.
 */
  template <typename TSegment>
inline
bool
DGtal::MaximalSegments<TSegment>::isValid() const
{
    return true;
}



///////////////////////////////////////////////////////////////////////////////
// Implementation of inline functions                                        //

  template <typename TSegment>
inline
std::ostream&
DGtal::operator<< ( std::ostream & out, 
		  const MaximalSegments<TSegment> & object )
{
  object.selfDisplay( out );
  return out;
}

//                                                                           //
///////////////////////////////////////////////////////////////////////////////


