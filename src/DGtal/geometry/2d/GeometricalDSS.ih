/**
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as
 *  published by the Free Software Foundation, either version 3 of the
 *  License, or  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 **/

/**
 * @file GeometricalDSS.ih
 * @author Tristan Roussillon (\c tristan.roussillon@liris.cnrs.fr )
 * Laboratoire d'InfoRmatique en Image et Syst√®mes d'information - LIRIS (CNRS, UMR 5205), CNRS, France
 *
 * @date 2011/09/26
 *
 * Implementation of inline methods defined in GeometricalDSS.h
 *
 * This file is part of the DGtal library.
 */


//////////////////////////////////////////////////////////////////////////////
#include <cstdlib>
//////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// IMPLEMENTATION of inline methods.
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// ----------------------- Standard services ------------------------------

template <typename TConstIterator>
inline
DGtal::GeometricalDSS<TConstIterator>::GeometricalDSS()
:myBegin(), myEnd(), myPreimagePtr()
{
}

template <typename TConstIterator>
inline
DGtal::GeometricalDSS<TConstIterator>::GeometricalDSS( const Self& other )
:myBegin(other.myBegin), myEnd(other.myEnd), myPreimagePtr(other.myPreimagePtr)
{
}

template <typename TConstIterator>
inline
typename DGtal::GeometricalDSS<TConstIterator>::Self&
DGtal::GeometricalDSS<TConstIterator>::operator= ( const Self& other )
{
  if ( this != &other )
  {
    myBegin = other.myBegin;
    myEnd = other.myEnd;
    myPreimagePtr = other.myPreimagePtr;
  }
  return *this;
}

template <typename TConstIterator>
inline
DGtal::GeometricalDSS<TConstIterator>::~GeometricalDSS()
{
}

template <typename TConstIterator>
inline
bool
DGtal::GeometricalDSS<TConstIterator>::operator==( const Self& other ) const
{
  Pair firstPair( *myBegin );
  Pair oFirstPair( *(other.myBegin) ); 
  if ( (firstPair.first == oFirstPair.first)
     &&(firstPair.second == oFirstPair.second) )
  {
    ConstIterator it (myEnd); 
    if ( isNotEmpty(myBegin, it) ) --it;
    Pair lastPair( *it );  
    ConstIterator oIt (other.myEnd); 
    if ( isNotEmpty(other.myBegin, oIt) ) --oIt;
    Pair oLastPair( *oIt ); 
   
    if ( (lastPair.first == oLastPair.first)
       &&(lastPair.second == oLastPair.second) )
    {
      return ( *myPreimagePtr == *(other.myPreimagePtr) ); 
    }
    else return false; 
  } 
  else return false; 
}

template <typename TConstIterator>
inline
bool
DGtal::GeometricalDSS<TConstIterator>::operator!=( const Self& other ) const
{
  return !(*this == other); 
}

template <typename TConstIterator>
inline
typename DGtal::GeometricalDSS<TConstIterator>::Reverse
DGtal::GeometricalDSS<TConstIterator>::getReverse() const
{
  return Reverse(); 
}

///////////////////////////////////////////////////////////////////////////////
// Interface - public :

template <typename TConstIterator>
inline
bool
DGtal::GeometricalDSS<TConstIterator>::isValid() const
{
  return true;
}

template <typename TConstIterator>
inline
typename DGtal::GeometricalDSS<TConstIterator>::ConstIterator
DGtal::GeometricalDSS<TConstIterator>::begin() const
{
  return myBegin;
}

template <typename TConstIterator>
inline
typename DGtal::GeometricalDSS<TConstIterator>::ConstIterator
DGtal::GeometricalDSS<TConstIterator>::end() const
{
  return myEnd;
}

///////////////////////////////////////////////////////////////////////////////
// Growth operations                                                        //

template <typename TConstIterator>
inline
void
DGtal::GeometricalDSS<TConstIterator>::init(const ConstIterator& anIt)
{
  myBegin = anIt; 
  myEnd = anIt; 
  Pair aPair( *anIt); 
  myPreimagePtr = PreimagePtr( new Preimage( aPair.first, aPair.second, StraightLine() ) );
}

template <typename TConstIterator>
inline
bool
DGtal::GeometricalDSS<TConstIterator>::isExtendable()
{
  return true; 
}

template <typename TConstIterator>
inline
bool
DGtal::GeometricalDSS<TConstIterator>::extend()
{
  myEnd++; 
  return true; 
}

template <typename TConstIterator>
inline
bool
DGtal::GeometricalDSS<TConstIterator>::isOppositeEndExtendable()
{
  return true; 
}

template <typename TConstIterator>
inline
bool
DGtal::GeometricalDSS<TConstIterator>::extendOppositeEnd()
{
  myBegin--; 
  return true; 
}

///////////////////////////////////////////////////////////////////////////////
// Display :

template <typename TConstIterator>
inline
void
DGtal::GeometricalDSS<TConstIterator>::selfDisplay ( std::ostream & out ) const
{
  out << "[GeometricalDSS]";
  out << (*myPreimagePtr); 
  out << "[end of GeometricalDSS]";
}


template <typename TConstIterator>
inline
DGtal::DrawableWithBoard2D*
DGtal::GeometricalDSS<TConstIterator>::defaultStyle( std::string /*mode*/ ) const
{
  return new DrawableWithBoard2D; 
}

template <typename TConstIterator>
inline
std::string
DGtal::GeometricalDSS<TConstIterator>::styleName() const
{
  return "GeometricalDSS";
}

template <typename TConstIterator>
inline
void 
DGtal::GeometricalDSS<TConstIterator>::selfDraw(Board2D & aBoard) const
{
//TODO
}


///////////////////////////////////////////////////////////////////////////////
// Implementation of inline functions                                        //

template <typename TConstIterator>
inline
std::ostream&
DGtal::operator<< ( std::ostream & out, 
		  const GeometricalDSS<TConstIterator> & object )
{
  object.selfDisplay( out );
  return out;
}

//                                                                           //
///////////////////////////////////////////////////////////////////////////////


