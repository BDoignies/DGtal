/**
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as
 *  published by the Free Software Foundation, either version 3 of the
 *  License, or  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 **/

/**
 * @file SaturedSegmentation.ih
 * @author Tristan Roussillon (\c tristan.roussillon@liris.cnrs.fr )
 * Laboratoire d'InfoRmatique en Image et Syst√®mes d'information - LIRIS (CNRS, UMR 5205), CNRS, France
 *
 * @date 2011/07/21
 *
 * Implementation of inline methods defined in SaturedSegmentation.h
 *
 * This file is part of the DGtal library.
 */


//////////////////////////////////////////////////////////////////////////////
#include <cstdlib>
//////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// IMPLEMENTATION of inline methods.
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// class SaturedSegmentation::SegmentComputerIterator
///////////////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////////////
// ------------------------- Some processings -----------------------
//////////////////////////////////////////////////////////////////////////////

/**
 * Checks if the current segment intersects the next one (if exists).
 */
  template <typename TSegmentComputer>
inline
bool
DGtal::SaturedSegmentation<TSegmentComputer>::SegmentComputerIterator::doesIntersectNext(const ConstIterator& it, const ConstIterator& itb, const ConstIterator& ite)
{
  typedef typename IteratorCirculatorTraits<typename SegmentComputer::ConstIterator>::Type Type; 
  this->doesIntersectNext( it, itb, ite, Type() );
}

/**
 * Specialization for iterators.
 */
  template <typename TSegmentComputer>
inline
bool
DGtal::SaturedSegmentation<TSegmentComputer>::SegmentComputerIterator::doesIntersectNext(const ConstIterator& it, const ConstIterator& itb, const ConstIterator& ite, IteratorType )
{
		ConstIterator previousIt(it); 
    if ( (it != itb)&&(it != ite) ) {
      --previousIt;
		  SegmentComputer tmpSegmentComputer;
		  tmpSegmentComputer.init(previousIt);
		  return tmpSegmentComputer.extend();
    } else {
      return false; 
    }
}

/**
 * Specialization for circulators
 */
  template <typename TSegmentComputer>
inline
bool
DGtal::SaturedSegmentation<TSegmentComputer>::SegmentComputerIterator::doesIntersectNext(const ConstIterator& it, const ConstIterator& itb, const ConstIterator& ite, CirculatorType )
{
		this->doesIntersectNext(it);
}

/**
 * Checks if the current segment intersects the next one (if exists).
 */
  template <typename TSegmentComputer>
inline
bool
DGtal::SaturedSegmentation<TSegmentComputer>::SegmentComputerIterator::doesIntersectNext(const ConstIterator& it)
{
		ConstIterator previousIt(it); --previousIt;

		SegmentComputer tmpSegmentComputer;
		tmpSegmentComputer.init(previousIt);
		return tmpSegmentComputer.extend();
}

/**
 * Computes the first maximal segment of the segmentation.
 */
  template <typename TSegmentComputer>
inline
void
DGtal::SaturedSegmentation<TSegmentComputer>::SegmentComputerIterator::initFirstMaximalSegment()
{
  if (myS->myMode == "First") {
    DGtal::firstMaximalSegment(mySegmentComputer, myS->myStart, myS->myBegin, myS->myEnd);
  } 
  else
  if (myS->myMode == "Last") {
    DGtal::lastMaximalSegment(mySegmentComputer, myS->myStart, myS->myBegin, myS->myEnd);
  } 
  else { // (myS->myMode == "MostCentered") 
    DGtal::mostCenteredMaximalSegment(mySegmentComputer, myS->myStart, myS->myBegin, myS->myEnd);
  }
}

/**
 * Computes the last maximal segment of the segmentation.
 */
  template <typename TSegmentComputer>
inline
void
DGtal::SaturedSegmentation<TSegmentComputer>::SegmentComputerIterator::initLastMaximalSegment()
{
  typedef typename IteratorCirculatorTraits<typename SegmentComputer::ConstIterator>::Type Type; 
  this->initLastMaximalSegment( Type() );
}

/**
 * Specialization for iterator.
 */
  template <typename TSegmentComputer>
inline
void
DGtal::SaturedSegmentation<TSegmentComputer>::SegmentComputerIterator::initLastMaximalSegment(IteratorType)
{
  ConstIterator i(myS->myStop); --i; 
  if (myS->myMode == "First") {
    DGtal::firstMaximalSegment(mySegmentComputer, i, myS->myBegin, myS->myEnd);
  } 
  else
  if (myS->myMode == "Last") {
    DGtal::lastMaximalSegment(mySegmentComputer, i, myS->myBegin, myS->myEnd);
  } 
  else { // (myS->myMode == "MostCentered") 
    DGtal::mostCenteredMaximalSegment(mySegmentComputer, i, myS->myBegin, myS->myEnd);
  }
  myLastMaximalSegmentBegin = mySegmentComputer.begin(); 
  myLastMaximalSegmentEnd = mySegmentComputer.end(); 
}

/**
 * Specialization for circulator.
 */
  template <typename TSegmentComputer>
inline
void
DGtal::SaturedSegmentation<TSegmentComputer>::SegmentComputerIterator::initLastMaximalSegment(CirculatorType)
{
  if (myS->myStop == myS->myStart) {
    this->initFirstMaximalSegment(); 
    DGtal::previousMaximalSegment(mySegmentComputer, myS->myBegin ); 
    myLastMaximalSegmentBegin = mySegmentComputer.begin(); 
    myLastMaximalSegmentEnd = mySegmentComputer.end(); 
  } else {
    this->initLastMaximalSegment( IteratorType() ); 
  }
}

/**
 * Goes to the next segment.
 */
  template <typename TSegmentComputer>
inline
void
DGtal::SaturedSegmentation<TSegmentComputer>::SegmentComputerIterator::nextMaximalSegment()
{

	if ( myFlagIsLast ) { //if end

    myFlagIsValid = false; 

	} else { //otherwise

	  myFlagIntersectPrevious = myFlagIntersectNext;

  	DGtal::nextMaximalSegment(mySegmentComputer, myS->myEnd, 
                      typename SegmentComputer::Category() );

    if ( (mySegmentComputer.begin() == myLastMaximalSegmentBegin) 
       &&(mySegmentComputer.end() == myLastMaximalSegmentEnd) ) { //if only one segment

	    myFlagIntersectNext = doesIntersectNext( mySegmentComputer.end(), myS->myBegin, myS->myEnd );
      myFlagIsLast = true; 
      
    } else {                                                     //otherwise
	    myFlagIntersectNext = doesIntersectNext( mySegmentComputer.end() );
    }

	}

}



//////////////////////////////////////////////////////////////////////////////
// ------------------------- Standard services -----------------------
//////////////////////////////////////////////////////////////////////////////

/**
 * Constructor.
 * Nb: complexity in O(n).
 *
 */
 template <typename TSegmentComputer>
inline
DGtal::SaturedSegmentation<TSegmentComputer>::SegmentComputerIterator::SegmentComputerIterator ( 
	const SaturedSegmentation<TSegmentComputer> *s,
	const TSegmentComputer& aSegmentComputer,
  const bool& isValid )
  : myS( s ), 
		mySegmentComputer( aSegmentComputer ), 
    myFlagIntersectNext( false ),
		myFlagIntersectPrevious( false ),
    myFlagIsLast( false ),
    myFlagIsValid( isValid )
{

  if (myFlagIsValid) {
	  if ( isNotEmpty<ConstIterator>(myS->myStart, myS->myStop) ) { //if at least one element

std::cerr << "last" << std::endl;
      this->initLastMaximalSegment(); 
//std::cerr << "first" << std::endl;
      this->initFirstMaximalSegment(); 
std::cerr << "initialized" << std::endl;
		  myFlagIntersectPrevious = doesIntersectNext( mySegmentComputer.begin(), myS->myBegin, myS->myEnd );

	    if ( (mySegmentComputer.begin() == myLastMaximalSegmentBegin) 
         &&(mySegmentComputer.end() == myLastMaximalSegmentEnd) ) { //if only one segment

		    myFlagIntersectNext = doesIntersectNext( mySegmentComputer.end(), myS->myBegin, myS->myEnd );
        myFlagIsLast = true; 
        
	    } else {                                                     //otherwise
		    myFlagIntersectNext = doesIntersectNext( mySegmentComputer.end() );
      }
 
    } else {
      myFlagIsValid = false;
    }
  }
}



/**
 * Copy constructor.
 * @param other the iterator to clone.
 */
  template <typename TSegmentComputer>
inline
DGtal::SaturedSegmentation<TSegmentComputer>::SegmentComputerIterator::SegmentComputerIterator
( const SegmentComputerIterator & other )
  : myS( other.myS ), 
		mySegmentComputer( other.mySegmentComputer ),
		myFlagIntersectNext( other.myFlagIntersectNext ), 
		myFlagIntersectPrevious( other.myFlagIntersectPrevious ) ,
    myFlagIsLast( other.myFlagIsLast ),
    myFlagIsValid( other.myFlagIsValid ),
    myLastMaximalSegmentBegin( other.myLastMaximalSegmentBegin ),
    myLastMaximalSegmentEnd( other.myLastMaximalSegmentEnd )
{
}
    
/**
 * Assignment.
 * @param other the iterator to copy.
 * @return a reference on 'this'.
 */
  template <typename TSegmentComputer>
inline
typename DGtal::SaturedSegmentation<TSegmentComputer>::SegmentComputerIterator::SegmentComputerIterator& 
DGtal::SaturedSegmentation<TSegmentComputer>::SegmentComputerIterator::operator=
( const SegmentComputerIterator & other )
{
  if ( this != &other )
    {
      myS = other.myS;
      mySegmentComputer = other.mySegmentComputer;
			myFlagIntersectNext = other.myFlagIntersectNext;
			myFlagIntersectPrevious = other.myFlagIntersectPrevious;
			myFlagIsValid = other.myFlagIsValid;
			myFlagIsLast = other.myFlagIsLast;
      myLastMaximalSegmentBegin( other.myLastMaximalSegmentBegin ); 
      myLastMaximalSegmentEnd( other.myLastMaximalSegmentEnd );
    }
  return *this;
}
    
/**
 * Destructor.
 * Does nothing
 */
  template <typename TSegmentComputer>
inline
DGtal::SaturedSegmentation<TSegmentComputer>::SegmentComputerIterator::~SegmentComputerIterator()
{
}

///////////////////////////////////////////////////////////////////////////////
// ------------------------- iteration services -------------------------
//////////////////////////////////////////////////////////////////////////////
    
      
/**
 * @return the current segment.
 */
  template <typename TSegmentComputer>
inline
const TSegmentComputer&
DGtal::SaturedSegmentation<TSegmentComputer>::SegmentComputerIterator::operator*() const
{
  return mySegmentComputer;
}

/**
 * @return the pointer to the current segment.
 */
  template <typename TSegmentComputer>
inline
const TSegmentComputer*
DGtal::SaturedSegmentation<TSegmentComputer>::SegmentComputerIterator::operator->() const
{
  return &mySegmentComputer;
}

/**
 * @return the current segment.
 */
  template <typename TSegmentComputer>
inline
TSegmentComputer
DGtal::SaturedSegmentation<TSegmentComputer>::SegmentComputerIterator::get() const
{
  return mySegmentComputer;
}

/**
 * Pre-increment.
 * Goes to the next segment.
 */

  template <typename TSegmentComputer>
inline
typename DGtal::SaturedSegmentation<TSegmentComputer>::SegmentComputerIterator & 
DGtal::SaturedSegmentation<TSegmentComputer>::SegmentComputerIterator::operator++()
{
  this->nextMaximalSegment();
  return *this;
}
    

/**
 * Equality operator.
 *
 * @param aOther the iterator to compare with 
 *
 * @return 'true' if their current positions coincide.
 */
  template <typename TSegmentComputer>
inline
bool
DGtal::SaturedSegmentation<TSegmentComputer>::SegmentComputerIterator::operator==
( const SegmentComputerIterator & other ) const
{
 if ( isValid() ) 
  return ( (other.isValid() ) && 
( mySegmentComputer.begin() == other.mySegmentComputer.begin() ) &&
( mySegmentComputer.end() == other.mySegmentComputer.end() ) );  
 else 
  return ( ! other.isValid() );

}

/**
 * Inequality operator.
 *
 * @param aOther the iterator to compare with 
 *
 * @return 'true' if their current positions differs.
 */
  template <typename TSegmentComputer>
inline
bool
DGtal::SaturedSegmentation<TSegmentComputer>::SegmentComputerIterator::operator!=
( const SegmentComputerIterator & other ) const
{
  return !(*this == other);
}

//////////////////////////////////////////////////////////////////////////////
// ------------------------- accessors -------------------------
//////////////////////////////////////////////////////////////////////////////

  template <typename TSegmentComputer>
inline
const bool
DGtal::SaturedSegmentation<TSegmentComputer>::SegmentComputerIterator::intersectNext() const
{
  return myFlagIntersectNext;
}

  template <typename TSegmentComputer>
inline
const bool
DGtal::SaturedSegmentation<TSegmentComputer>::SegmentComputerIterator::intersectPrevious() const
{
  return myFlagIntersectPrevious;
}



  template <typename TSegmentComputer>
inline
const typename TSegmentComputer::ConstIterator
DGtal::SaturedSegmentation<TSegmentComputer>::SegmentComputerIterator::begin() const
{
  return mySegmentComputer.begin();
}

  template <typename TSegmentComputer>
inline
const typename TSegmentComputer::ConstIterator
DGtal::SaturedSegmentation<TSegmentComputer>::SegmentComputerIterator::end() const
{
  return mySegmentComputer.end();
}



///////////////////////////////////////////////////////////////////////////////
// class SaturedSegmentation
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// Interface - public :


/**
 * Constructor.
 */
  template <typename TSegmentComputer>
DGtal::SaturedSegmentation<TSegmentComputer>::SaturedSegmentation
(const ConstIterator& itb, const ConstIterator& ite, const SegmentComputer& aSegmentComputer)
 : myBegin(itb),
	 myEnd(ite),
   myStart(itb),
	 myStop(ite),
	 mySegmentComputer(aSegmentComputer),
   myMode("MostCentered")
{
}


  template <typename TSegmentComputer>
inline
void
DGtal::SaturedSegmentation<TSegmentComputer>::setSubRange
(const ConstIterator& itb, const ConstIterator& ite)
{
  myStart = itb;
	myStop = ite;
  myMode = "MostCentered";
}

  template <typename TSegmentComputer>
inline
void
DGtal::SaturedSegmentation<TSegmentComputer>::setMode
(const std::string& aMode)
{
  myMode = aMode; 
}


/**
 * Destructor.
 */
  template <typename TSegmentComputer>
inline
DGtal::SaturedSegmentation<TSegmentComputer>::~SaturedSegmentation()
{
}

/**
 * ConstIterator service.
 * @return an iterator pointing on the first segment
 * of the digital curve.
 */
  template <typename TSegmentComputer>
inline
typename DGtal::SaturedSegmentation<TSegmentComputer>::SegmentComputerIterator 
DGtal::SaturedSegmentation<TSegmentComputer>::begin() const
{
  return SegmentComputerIterator(this, mySegmentComputer, true);
}

/**
 * ConstIterator service.
 * @return an iterator pointing after the last segment
 * of the digital curve.
 */
  template <typename TSegmentComputer>
inline
typename DGtal::SaturedSegmentation<TSegmentComputer>::SegmentComputerIterator 
DGtal::SaturedSegmentation<TSegmentComputer>::end() const
{
  return SegmentComputerIterator(this, mySegmentComputer, false);
}


/**
 * Writes/Displays the object on an output stream.
 * @param out the output stream where the object is written.
 */
  template <typename TSegmentComputer>
inline
void
DGtal::SaturedSegmentation<TSegmentComputer>::selfDisplay ( std::ostream & out ) const
{
  out << "[SaturedSegmentation]";
}

/**
 * Checks the validity/consistency of the object.
 * @return 'true' if the object is valid, 'false' otherwise.
 */
  template <typename TSegmentComputer>
inline
bool
DGtal::SaturedSegmentation<TSegmentComputer>::isValid() const
{
    return true;
}



///////////////////////////////////////////////////////////////////////////////
// Implementation of inline functions                                        //

  template <typename TSegmentComputer>
inline
std::ostream&
DGtal::operator<< ( std::ostream & out, 
		  const SaturedSegmentation<TSegmentComputer> & object )
{
  object.selfDisplay( out );
  return out;
}

//                                                                           //
///////////////////////////////////////////////////////////////////////////////


