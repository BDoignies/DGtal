/**
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as
 *  published by the Free Software Foundation, either version 3 of the
 *  License, or  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 **/
//LICENSE-END
/**
 * @file ArithDSS.ih
 * @author Tristan Roussillon (\c tristan.roussillon@liris.cnrs.fr )
 * Laboratoire d'InfoRmatique en Image et Syst√®mes d'information - LIRIS (CNRS, UMR 5205), CNRS, France
 *
 * @date 2010/07/01
 *
 * Implementation of inline methods defined in ArithDSS.h
 *
 * This file is part of the DGtal library.
 */

///////////////////////////////////////////////////////////////////////////////
// IMPLEMENTATION of inline methods.
///////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
#include <cstdlib>
//////////////////////////////////////////////////////////////////////////////



///////////////////////////////////////////////////////////////////////////////
// Implementation of inline methods                                          //

 /**
   * Writes/Displays the object on an output stream.
   * @param out the output stream where the object is written.
   */




template <typename Domain2D>
inline
bool
DGtal::ArithDSS<Domain2D>::isValid() const
{
	//todo: 
	//check if gcd(myA,myB)=1
	//if myUl - myUf = k(myA,myB), etc.
	return true;	
}

template <typename Domain2D>
inline
bool 
DGtal::ArithDSS<Domain2D>::add(const Point & aPoint)
{

	Vector step = aPoint-myL;
	Integer deviation = norm(step.at(0),step.at(1));
	if ( (deviation>1)||(deviation<=0) ) return false;
	else {
	  
	  //remainder
	  Integer r = myA*aPoint.at(0) - myB*aPoint.at(1);
	  	  
		if ( (r < myMu-1)||(r > myMu+myOmega) )
			return false; //strongly exterior
		else { 
			//add aPoint to the DSS
			myL = aPoint; 
			//leaning points update
			//weakly interior
			if (r == myMu) myUl = aPoint;  
			if (r == myMu+myOmega-1) myLl = aPoint;
			//weakly exterior  
			if (r == myMu-1) {	
				myUl = aPoint; 
				myLf = myLl;
				myA = myUl.at(1) - myUf.at(1); 
				myB = myUl.at(0) - myUf.at(0); 
				myMu = myA*myUl.at(0) - myB*myUl.at(1);
				myOmega = norm(myA,myB);
			} else if (r == myMu+myOmega) { 
				myLl = aPoint; 
				myUf = myUl; 
				myA = myLl.at(1) - myLf.at(1); 
				myB = myLl.at(0) - myLf.at(0); 
				myMu = myA*myUl.at(0) - myB*myUl.at(1);
				myOmega = norm(myA,myB);
			}
			return true;
		}

	}

}


///////////////////////////////////////////////////////////////////////////////
// Implementation of inline functions and external operators                 //

/**
 * Overloads 'operator<<' for displaying objects of class 'ArithDSS'.
 * @param out the output stream where the object is written.
 * @param object the object of class 'ArithDSS' to write.
 * @return the output stream after the writing.
 */

//template <typename Domain2D>
//inline 
//std::ostream&
//DGtal::operator<< ( std::ostream & out,
//                  const ArithDSS<Domain2D> & object )
//{
//   
//}

  template < typename Domain2D>
  inline
  void
  DGtal::ArithDSS<Domain2D>::selfDisplay ( std::ostream & out)
  {
    
    out << "[ArithDSS] \n" << "Parameters (a,b,mu,omega)=" << 
"("<< myA << ", " << myB << ", ";
    out << myMu << ", " << myOmega << ")\n";
    out << "First point " << myF << " Last point " << myL << "\n";
    out << "Leaning points\n";
    out << "   Uf " << myUf << endl << "   Ul " << myUl << endl;
    out << "   Lf " << myLf << endl << "   Ll " << myLl <<  endl;
    out << "[End ArithDSS]\n";
    
  }



//                                                                           //
///////////////////////////////////////////////////////////////////////////////


