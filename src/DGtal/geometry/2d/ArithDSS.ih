/**
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as
 *  published by the Free Software Foundation, either version 3 of the
 *  License, or  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 **/
//LICENSE-END
/**
 * @file ArithDSS.ih
 * @author Tristan Roussillon (\c tristan.roussillon@liris.cnrs.fr )
 * Laboratoire d'InfoRmatique en Image et SystÃ¨mes d'information - LIRIS (CNRS, UMR 5205), CNRS, France
 *
 * @date 2010/07/01
 *
 * Implementation of inline methods defined in ArithDSS.h
 *
 * This file is part of the DGtal library.
 */

///////////////////////////////////////////////////////////////////////////////
// IMPLEMENTATION of inline methods.
///////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
#include <cstdlib>
//////////////////////////////////////////////////////////////////////////////



///////////////////////////////////////////////////////////////////////////////
// Implementation of inline methods                                          //

 /**
   * Writes/Displays the object on an output stream.
   * @param out the output stream where the object is written.
   */




template <typename Domain2D>
inline
bool
DGtal::ArithDSS<Domain2D>::isValid() const
{
	//todo: 
	//check if gcd(myA,myB)=1
	//if myUl - myUf = k(myA,myB), etc.
	return true;	
}

  /**
     * Add a connected pixel aPoint at the front of a DSS.
     *
     * @param aPoint the new pixel (connected to the DSS) 
     
     * @return true if the union of theDSS and aPoint is still a DSS.
     */


template <typename Domain2D>
inline
bool 
DGtal::ArithDSS<Domain2D>::addFront(const Point & aPoint)
{

	Vector step = aPoint-myL;
	Integer deviation = norm(step[0],step[1]);
	if ( (deviation>1)||(deviation<=0) ) return false;
	else {
	  
	  //remainder
	  Integer r = myA*aPoint[0] - myB*aPoint[1];
	  	  
		if ( (r < myMu-1)||(r > myMu+myOmega) )
			return false; //strongly exterior
		else { 
			//add aPoint to the DSS
			myL = aPoint; 
			//leaning points update
			//weakly interior
			if (r == myMu) myUl = aPoint;  
			if (r == myMu+myOmega-1) myLl = aPoint;
			//weakly exterior  
			if (r == myMu-1) {	
				myUl = aPoint; 
				myLf = myLl;
				myA = myUl[1] - myUf[1]; 
				myB = myUl[0] - myUf[0]; 
				myMu = myA*myUl[0] - myB*myUl[1];
				myOmega = norm(myA,myB);
			} else if (r == myMu+myOmega) { 
				myLl = aPoint; 
				myUf = myUl; 
				myA = myLl[1] - myLf[1]; 
				myB = myLl[0] - myLf[0]; 
				myMu = myA*myUl[0] - myB*myUl[1];
				myOmega = norm(myA,myB);
			}
			return true;
		}

	}

}


/**
 * Projects the point [m] onto the average straight line (ie (mu+nu)/2).
 * @param m any point expressed in the local reference frame (may not be part of the segment).
 * @return the projected point.
 */
template <typename Domain2D>
inline
typename DGtal::ArithDSS<Domain2D>::PointD
DGtal::ArithDSS<Domain2D>::project( const Point & m ) const
{
  float alpha = ( myMu + myMu + ( myA >= 0 ? myA : -myA ) + myB - 1 ) / 2.0f;
  float d2 = (float)( myA * myA + myB * myB );
  float s = myB * m[0] + myA * m[1];
  float xp = ( myB * s + myA * alpha ) / d2;
  float yp = ( myA * s - myB * alpha ) / d2;
  return PointD( xp, yp );
}

/**
 * Projects the point [m] onto the straight line whose points have
 * remainder [r].
 *
 * @param m any point expressed in the local reference frame (may not
 * be part of the segment).
 *
 * @param r the remainder (may not be an integer).
 * @return the projected point.
 */

template <typename Domain2D>
inline
typename DGtal::ArithDSS<Domain2D>::PointD
DGtal::ArithDSS<Domain2D>::project( const Point & m, float r ) const
{
  //  float alpha = ( myMu + myMu + ( myA >= 0 ? myA : -myA ) + myB - 1 ) / 2.0f;
  float d2 = (float)( myA * myA + myB * myB );
  float s = myB * m[0] + myA * m[1];
  float xp = ( myB * s + myA * r ) / d2;
  float yp = ( myA * s - myB * r ) / d2;
  
  return PointD( xp, yp );
}

/**
 * Projects the point [m] onto the straight line going through point [p].
 *
 * @param m any point expressed in the local reference frame (may not
 * be part of the segment).
 *
 * @param p any point expressed in the local reference frame (may not
 * be part of the segment).
 *
 * @return the projected point.
 */
template <typename Domain2D>
inline
typename DGtal::ArithDSS<Domain2D>::PointD
DGtal::ArithDSS<Domain2D>::project( const Point & m, const Point & p ) const
{
  float r = myA * p[0] - myB * p[1];
  float d2 = (float)( myA * myA + myB * myB );
  float s = myB * m[0] + myA * m[1];
  float xp = ( myB * s + myA * r ) / d2;
  float yp = ( myA * s - myB * r ) / d2;
  trace.info() << xp << " " << yp << endl;
  return PointD( xp, yp );
}

/**
 * Defined as: norm( project(myL) - project(myF) )
 * @return the projected length of the segment.
 * @see projectRegularly
 */
template <typename Domain2D>
inline
double
DGtal::ArithDSS<Domain2D>::projectedSegmentLength() const
{
  PointD v = project( myL );
  PointD u = project( myF );
  v -= u;
  return v.norm(ArithDSS<Domain2D>::PointD::L_2);
}




template<typename Domain2D>
template<typename Functor>
inline
void 
DGtal::ArithDSS<Domain2D>::selfDraw( LibBoard::Board & aBoard) const
{
  if (Domain2D::staticDimension == 2)
    {
      Functor applystyle(aBoard);
      
      
      PointD topLeft = project(myF, myUf);
      PointD bottomLeft = project(myF,myLf);
      PointD bottomRight = project(myL, myLf);
      PointD topRight = project(myL,myUf);
      
      // IS
      // Incompatibilité des Point de Board et de DGtal...
      // A corriger
      LibBoard::Point topLeftBoard(topLeft[0],topLeft[1]);
      LibBoard::Point bottomLeftBoard(bottomLeft[0],bottomLeft[1]);
      LibBoard::Point bottomRightBoard(bottomRight[0],bottomRight[1]);
      LibBoard::Point topRightBoard(topRight[0],topRight[1]);
      
      vector<LibBoard::Point> bb;
      bb.push_back(topLeftBoard);
      bb.push_back(bottomLeftBoard);
      bb.push_back(bottomRightBoard);
      bb.push_back(topRightBoard);
      
      
      aBoard.drawClosedPolyline(bb);      
     
    }
  else
    ASSERT(false && ("selfDraw-NOT-YET-IMPLEMENTED-in-ND"));
  
}


///////////////////////////////////////////////////////////////////////////////
// Implementation of inline functions and external operators                 //

/**
 * Overloads 'operator<<' for displaying objects of class 'ArithDSS'.
 * @param out the output stream where the object is written.
 * @param object the object of class 'ArithDSS' to write.
 * @return the output stream after the writing.
 */

//template <typename Domain2D>
//inline 
//std::ostream&
//DGtal::operator<< ( std::ostream & out,
//                  const ArithDSS<Domain2D> & object )
//{
//   
//}

  template < typename Domain2D>
  inline
  void
  DGtal::ArithDSS<Domain2D>::selfDisplay ( std::ostream & out)
  {
    
    out << "[ArithDSS] \n" << "Parameters (a,b,mu,omega)=" << 
"("<< myA << ", " << myB << ", ";
    out << myMu << ", " << myOmega << ")\n";
    out << "First point " << myF << " Last point " << myL << "\n";
    out << "Leaning points\n";
    out << "   Uf " << myUf << endl << "   Ul " << myUl << endl;
    out << "   Lf " << myLf << endl << "   Ll " << myLl <<  endl;
    out << "[End ArithDSS]\n";
    
  }



//                                                                           //
///////////////////////////////////////////////////////////////////////////////


