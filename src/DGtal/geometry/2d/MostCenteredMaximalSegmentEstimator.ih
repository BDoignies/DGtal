/**
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as
 *  published by the Free Software Foundation, either version 3 of the
 *  License, or  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 **/

/**
 * @file MostCenteredMaximalSegmentEstimator.ih
 * @author Tristan Roussillon (\c tristan.roussillon@liris.cnrs.fr )
 * Laboratoire d'InfoRmatique en Image et Syst√®mes d'information - LIRIS (CNRS, UMR 5205), CNRS, France
 *
 * @date 2011/01/26
 *
 * Implementation of inline methods defined in MostCenteredMaximalSegmentEstimator.h
 *
 * This file is part of the DGtal library.
 */


//////////////////////////////////////////////////////////////////////////////
#include <cstdlib>
//////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// IMPLEMENTATION of inline methods.
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// ----------------------- Standard services ------------------------------

/**
 * Constructor.
 */
template <typename SegmentComputer, typename Functor>
inline
DGtal::MostCenteredMaximalSegmentEstimator<SegmentComputer,Functor>
      ::MostCenteredMaximalSegmentEstimator(
      const double h, 
      const ConstIterator& itb, const ConstIterator& ite,
      const SegmentComputer& aSegmentComputer, 
      const Functor& aFunctor, 
      const bool& isClosed) 
{
  init(h,itb,ite,aSegmentComputer,aFunctor,isClosed);
}

/**
 * Init.
 */
template <typename SegmentComputer, typename Functor>
inline
void
DGtal::MostCenteredMaximalSegmentEstimator<SegmentComputer,Functor>
      ::init(
      const double h, 
      const ConstIterator& itb, const ConstIterator& ite,
      const SegmentComputer& aSegmentComputer, 
      const Functor& aFunctor, 
      const bool& isClosed) 
{
  myH = h;
  myBegin = itb;
  myEnd = ite;
  myFunctor = aFunctor;
  myFlagIsClosed = isClosed;

  //maximal segments computation
  myMSRange.init(myBegin,myEnd,aSegmentComputer,myFlagIsClosed);

}

/**
 * @return the estimated quantity at *it
 * from itb till ite
 */
template <typename SegmentComputer, typename Functor>
template <typename OutputIterator>
inline
OutputIterator
DGtal::MostCenteredMaximalSegmentEstimator<SegmentComputer,Functor>
      ::eval(const ConstIterator& itb, const ConstIterator& ite,
             OutputIterator result) {


  typename MaximalSegments<SegmentComputer>
          ::SegmentIterator segIt = myMSRange.begin();

	ConstIterator b = segIt.getBack(); //iterateur arriere
	ConstIterator m = b;               //iterateur milieu

  //////////////////////////////////premier seg

	unsigned int length = 0;             //longueur du seg max
  for (ConstIterator i = b; i != segIt.getFront(); ++i) ++length;

	Quantity q = myFunctor(*segIt); //estimation du seg max

	unsigned int d = 0; //ecart entre l'iterateur arriere et milieu

	//positionnement de m au milieu du premier seg max
	while (d < (length/2)) {
    //stockage
    *result++ = q;
    ++m;
		++d;
	}

	/////////////////////////////////pour tous les seg max suivants
	int nbarcs = 1;
	++segIt;
	while (segIt != myMSRange.end()) {
		nbarcs++;

		//mise a jour de length
	  length = 0;   
    for (ConstIterator i = segIt.getBack(); i != segIt.getFront(); ++i) ++length;

		//positionnement de b a l'arriere de l'arc courant
		int di = 0;
		while (b != segIt.getBack()) {
			++b;
			++di;
		}

		//positionnement de m	
		//et copie des quantites
		int dm = 0;
		while (dm < (length/2 - d + di)/2) {
      //stockage
      *result++ = q;
			++m;
			++dm;
		}	

		//mise a jour de d
		d = d + dm - di;

		//mise a jour de q, l'estimation
		q = myFunctor(*segIt);

		//passer a l'arc suivant
		++segIt;
	}

	//fin
	do {
		++m;
    //stockage
    *result++ = q;
	} while (m != segIt.getFront());




///

/*
    //just a test
    ConstIterator i = itb;
    while (i != ite) {
      *result++ = 1;
      ++i;
    } 
*/
    return result;
}



/**
 * @return the estimated quantity at *it
 */
template <typename SegmentComputer, typename Functor>
inline
typename Functor::Value
DGtal::MostCenteredMaximalSegmentEstimator<SegmentComputer,Functor>
      ::eval(const ConstIterator& it) {

//just a test
  typename MaximalSegments<SegmentComputer>
          ::SegmentIterator segIt = myMSRange.begin();
  SegmentComputer sc(*segIt);

  return myFunctor(sc);
}


/**
 * Checks the validity/consistency of the object.
 * @return 'true' if the object is valid, 'false' otherwise.
 */
template <typename SegmentComputer, typename Functor>
inline
bool
DGtal::MostCenteredMaximalSegmentEstimator<SegmentComputer,Functor>::isValid() const
{
    return true;
}


