/**
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as
 *  published by the Free Software Foundation, either version 3 of the
 *  License, or  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 **/

/**
 * @file MostCenteredMaximalSegmentEstimator.ih
 * @author Tristan Roussillon (\c tristan.roussillon@liris.cnrs.fr )
 * Laboratoire d'InfoRmatique en Image et Syst√®mes d'information - LIRIS (CNRS, UMR 5205), CNRS, France
 *
 * @date 2011/01/26
 *
 * Implementation of inline methods defined in MostCenteredMaximalSegmentEstimator.h
 *
 * This file is part of the DGtal library.
 */


//////////////////////////////////////////////////////////////////////////////
#include <cstdlib>
//////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// IMPLEMENTATION of inline methods.
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// ----------------------- Standard services ------------------------------

/**
 * Constructor.
 */
template <typename SegmentComputer, typename Functor>
inline
DGtal::MostCenteredMaximalSegmentEstimator<SegmentComputer,Functor>
::MostCenteredMaximalSegmentEstimator(
				      const double h, 
				      const ConstIterator& itb, const ConstIterator& ite,
				      const SegmentComputer& aSegmentComputer, 
				      const Functor& aFunctor, 
				      const bool& isClosed) 
{
  init(h,itb,ite,aSegmentComputer,aFunctor,isClosed);
}

/**
 * Init.
 */
template <typename SegmentComputer, typename Functor>
inline
void
DGtal::MostCenteredMaximalSegmentEstimator<SegmentComputer,Functor>
::init(
       const double h, 
       const ConstIterator& itb, const ConstIterator& ite,
       const SegmentComputer& aSegmentComputer, 
       const Functor& aFunctor, 
       const bool& isClosed) 
{
  myH = h;
  myBegin = itb;
  myEnd = ite;
  myFunctor = aFunctor;
  myFlagIsClosed = isClosed;

  //maximal segments computation
  myMSRange.init(myBegin,myEnd,aSegmentComputer,myFlagIsClosed);

}


/**
 * Checks the validity/consistency of the object.
 * @return 'true' if the object is valid, 'false' otherwise.
 */
template <typename SegmentComputer, typename Functor>
inline
bool
DGtal::MostCenteredMaximalSegmentEstimator<SegmentComputer,Functor>::isValid() const
{
  return true;
}

/**
 * @return the estimated quantity at *it
 * from itb till ite
 */
template <typename SegmentComputer, typename Functor>
template <typename OutputIterator>
inline
OutputIterator
DGtal::MostCenteredMaximalSegmentEstimator<SegmentComputer,Functor>
::eval(const ConstIterator& itb, const ConstIterator& ite,
       OutputIterator result) {

  //segmentComputer iterators
  SegmentIterator segIt( myMSRange.begin() );
  SegmentIterator nextSegIt( segIt );

  if (nextSegIt != myMSRange.end() ) { //more than one segment
    ++nextSegIt; 

//////////////// main loop ///////////////////////////////////

    //main element iterator
    ConstIterator eltIt = segIt.getBack();
    //true if *eltIt has be estimated, false otherwise
    bool hasToBeEstimated = false;
    //step end iterator indicating that 
    //the estimation will be performed from *nextSegIt 
    ConstIterator stepEnd = nextStepEnd(segIt, nextSegIt); 

    while (eltIt != ite) {

      //incrementation of segIt/nextSegIt
      if (eltIt == stepEnd) {
        segIt = nextSegIt;
        ++nextSegIt; //controler la validite ?
        stepEnd = nextStepEnd(segIt, nextSegIt); 
      } 

      //estimation and incrementation of eltIt
      if (hasToBeEstimated) {
         *result++ = myFunctor(*eltIt,*segIt);
      } else if (eltIt == itb) {
        hasToBeEstimated = true; 
         *result++ = myFunctor(*eltIt,*segIt);
      }
      ++eltIt; 

    }
/////////////////////////////////////////////////////////////

  } else {                                 //only one segment

    for (ConstIterator i = myBegin; i != myEnd; ++i) {
       *result++ = myFunctor(*i,*segIt);
    }

  }

  return result;
}



/**
 * @return the estimated quantity at *it
 */
template <typename SegmentComputer, typename Functor>
inline
typename Functor::Value
DGtal::MostCenteredMaximalSegmentEstimator<SegmentComputer,Functor>
::eval(const ConstIterator& it) {

  //just a test
  typename MaximalSegments<SegmentComputer>
    ::SegmentIterator segIt = myMSRange.begin();
  SegmentComputer sc(*segIt);

  return myFunctor(*it,sc);
}



/**
 * @return the ConstIterator that is between 
 * the back ConstIterator of [it2] (denoted b) and 
 * the front ConstIterator of [it1] (denoted f)
 * if b < f and b otherwise
 */
template <typename SegmentComputer, typename Functor>
inline
typename SegmentComputer::Iterator 
DGtal::MostCenteredMaximalSegmentEstimator<SegmentComputer,Functor>::
      nextStepEnd(const SegmentIterator& it1, const SegmentIterator& it2) {

  ConstIterator b( it2.getBack() ); 
  ConstIterator f( it1.getFront() ); 

  ConstIterator tmp( f );
  ++tmp; //always valid for range viewed as open
  if (tmp == b) { //empty intersection between it1 and it2
    return f;
  } else {    //not empty intersection between it1 and it2
    bool flag = true; 
    while (b != f) {
      if (flag) {
        --f;
        flag = false; 
      } else {
        ++b; 
        flag = true; 
      } 
    }
    return b;     
  }
}

