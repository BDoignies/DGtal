/**
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as
 *  published by the Free Software Foundation, either version 3 of the
 *  License, or  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 **/

/**
 * @file GridCurveRanges.ih
 * @author Tristan Roussillon (\c
 * tristan.roussillon@liris.cnrs.fr ) Laboratoire d'InfoRmatique en
 * Image et SystÃ¨mes d'information - LIRIS (CNRS, UMR 5205), CNRS,
 * France
 *
 *
 * @date 2011/09/06
 *
 *  @brief Implementation of ranges used in GridCurve.h, 
 * included in GridCurve class definition. 
 *
 * This file is part of the DGtal library.
 */

    ///////////////////////////////////////////////////////////////////////////////
    // class SCellsRange
    ///////////////////////////////////////////////////////////////////////////////


/**
 * This class is a model of CRange and thus provides a ConstIterator to scan 
 * the Khalimsky coordinates of the d-cells of a grid curve 
 */


class SCellsRange
{

  // ------------------------- inner types --------------------------------
public: 
  typedef typename GridCurve::Storage Storage; 
  typedef typename GridCurve::Storage::const_iterator ConstIterator;
  typedef typename GridCurve::Storage::const_reverse_iterator ConstReverseIterator;

  /**
   * Default Constructor.
   */
  SCellsRange(){}

  /**
   * Constructor.
   */
  SCellsRange( const Storage& aStorage ): myData(&aStorage){}

  /**
   * Copy constructor.
   * @param other the iterator to clone.
   */
  SCellsRange( const SCellsRange & aOther )
    : myData( aOther.myData ){}
  
  /**
   * Assignment.
   * @param other the iterator to copy.
   * @return a reference on 'this'.
   */
  SCellsRange& operator= ( const SCellsRange & other )
  {  
    if ( this != &other )
    {
      myData = other.myData;
    }
    return *this;
  }

  /**
   * Destructor. Does nothing.
   */
  ~SCellsRange() {}

  /**
   * @return the size of the range
   */
  typename Storage::size_type size() const {
    return myData->size();
  }

  // ------------------------- private data --------------------------------
private: 
  const typename GridCurve::Storage* myData;

  // ------------------------- iterator services --------------------------------
public:

  /**
   * Iterator service.
   * @return begin iterator
   */
  ConstIterator begin() const {
    return myData->begin();
  }

  /**
   * Iterator service.
   * @return end iterator
   */
  ConstIterator end() const {
    return myData->end();
  }

  /**
   * Iterator service.
   * @return rbegin iterator
   */
  ConstReverseIterator rbegin() const {
    return myData->rbegin();
  }

  /**
   * Iterator service.
   * @return rend iterator
   */
  ConstReverseIterator rend() const {
    return myData->rend();
  }

};


///////////////////////////////////////////////////////////////////////////////
// end of class SCellsRange
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// class PointsRange
///////////////////////////////////////////////////////////////////////////////

/**
 * This class is a model of CRange and provides a ConstIterator to scan 
 * the 1-cells of a grid curve viewed as digital points
 */

class PointsRange
{

  // ------------------------- inner types --------------------------------
public: 

  friend class GridCurve<KSpace>;

  typedef typename GridCurve::Storage Storage; 
  typedef typename Storage::const_iterator ConstIteratorOnSCells; 

  typedef SCellToPoint<KSpace> Modifier; 

  typedef ConstIteratorAdapter<ConstIteratorOnSCells,Modifier> ConstIterator; 
  typedef std::reverse_iterator<ConstIterator> ConstReverseIterator;

  // ------------------------- standard services --------------------------------

  /**
   * Default Constructor.
   */
  PointsRange(){}

  /**
   * Constructor.
   */
  PointsRange(const GridCurve* aGridCurve ): myC(aGridCurve){}

  /**
   * Copy constructor.
   * @param other the iterator to clone.
   */
  PointsRange( const PointsRange & aOther )
    : myC( aOther.myC ){}
  
  /**
   * Assignment.
   * @param other the iterator to copy.
   * @return a reference on 'this'.
   */
  PointsRange& operator= ( const PointsRange & other )
  {  
    if ( this != &other )
    {
      myC = other.myC;
    }
  return *this;
  }

  /**
   * Destructor. Does nothing.
   */
  ~PointsRange() {}

  /**
   * @return the size of the range
   */
  typename Storage::size_type size() const 
  {
    return myC->my0SCells.size();
  }

  // ------------------------- private data --------------------------------
  private: 
    const GridCurve* myC;

  // ------------------------- iterator services --------------------------------
public:

  /**
   * Iterator service.
   * @return begin iterator
   */
  ConstIterator begin() const {
    return ConstIterator( myC->my0SCells.begin(), Modifier(myC->myK) );
  }

  /**
   * Iterator service.
   * @return end iterator
   */
  ConstIterator end() const {
    return ConstIterator( myC->my0SCells.end(), Modifier(myC->myK) );
  }

  /**
   * Iterator service.
   * @return rbegin iterator
   */
  ConstReverseIterator rbegin() const {
    return ConstReverseIterator(this->end());
  }

  /**
   * Iterator service.
   * @return rend iterator
   */
  ConstReverseIterator rend() const {
    return ConstReverseIterator(this->begin());
  }

};

///////////////////////////////////////////////////////////////////////////////
// end of class PointsRange
///////////////////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////////////////
// class MidPointsRange
///////////////////////////////////////////////////////////////////////////////

/**
 * This class is a model of CRange and provides a ConstIterator to scan 
 * the 1-cells and return their midpoint in real coordinates
 */

class MidPointsRange
{

  // ------------------------- inner types --------------------------------
public: 
  
  friend class GridCurve<KSpace>;

  typedef typename GridCurve::Storage Storage; 
  typedef typename Storage::const_iterator ConstIteratorOnSCells; 

  typedef SCellToMidPoint<KSpace> Modifier; 

  typedef ConstIteratorAdapter<ConstIteratorOnSCells,Modifier> ConstIterator; 
  typedef std::reverse_iterator<ConstIterator> ConstReverseIterator;

  // ------------------------- standard services --------------------------------

  /**
   * Default Constructor.
   */
  MidPointsRange(){}

  /**
   * Constructor.
   */
  MidPointsRange(const GridCurve* aGridCurve ): myC(aGridCurve){}

  /**
   * Copy constructor.
   * @param other the iterator to clone.
   */
  MidPointsRange( const MidPointsRange & aOther )
    : myC( aOther.myC ){}
  
  /**
   * Assignment.
   * @param other the iterator to copy.
   * @return a reference on 'this'.
   */
  MidPointsRange& operator= ( const MidPointsRange & other )
  {  
    if ( this != &other )
    {
      myC = other.myC;
    }
  return *this;
  }

  /**
   * Destructor. Does nothing.
   */
  ~MidPointsRange() {}

  /**
   * @return the size of the range
   */
  typename Storage::size_type size() const 
  {
    return myC->my1SCells.size();
  }

  // ------------------------- private data --------------------------------
  private: 
    const GridCurve* myC;

  // ------------------------- iterator services --------------------------------
public:

  /**
   * Iterator service.
   * @return begin iterator
   */
  ConstIterator begin() const {
    return ConstIterator( myC->my1SCells.begin(), Modifier(myC->myK) );
  }

  /**
   * Iterator service.
   * @return end iterator
   */
  ConstIterator end() const {
    return ConstIterator( myC->my1SCells.end(), Modifier(myC->myK) );
  }

  /**
   * Iterator service.
   * @return rbegin iterator
   */
  ConstReverseIterator rbegin() const {
    return ConstReverseIterator(this->end());
  }

  /**
   * Iterator service.
   * @return rend iterator
   */
  ConstReverseIterator rend() const {
    return ConstReverseIterator(this->begin());
  }

};

///////////////////////////////////////////////////////////////////////////////
// end of class MidPointsRange
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// class ArrowsRange
///////////////////////////////////////////////////////////////////////////////

/**
 * This class is a model of CRange and provides a ConstIterator to scan 
 * the 1-cells and return the integer coordinates of the associated 
 * point and displacement vector
 */

class ArrowsRange
{

  // ------------------------- inner types --------------------------------
public: 

  friend class GridCurve<KSpace>;

  typedef typename GridCurve::Storage Storage; 
  typedef typename Storage::const_iterator ConstIteratorOnSCells; 

  typedef SCellToArrow<KSpace> Modifier; 

  typedef ConstIteratorAdapter<ConstIteratorOnSCells,Modifier> ConstIterator; 
  typedef std::reverse_iterator<ConstIterator> ConstReverseIterator;

  // ------------------------- standard services --------------------------------

  /**
   * Default Constructor.
   */
  ArrowsRange(){}

  /**
   * Constructor.
   */
  ArrowsRange(const GridCurve* aGridCurve ): myC(aGridCurve){}

  /**
   * Copy constructor.
   * @param other the iterator to clone.
   */
  ArrowsRange( const ArrowsRange & aOther )
    : myC( aOther.myC ){}
  
  /**
   * Assignment.
   * @param other the iterator to copy.
   * @return a reference on 'this'.
   */
  ArrowsRange& operator= ( const ArrowsRange & other )
  {  
    if ( this != &other )
    {
      myC = other.myC;
    }
  return *this;
  }

  /**
   * Destructor. Does nothing.
   */
  ~ArrowsRange() {}

  /**
   * @return the size of the range
   */
  typename Storage::size_type size() const 
  {
    return myC->my1SCells.size();
  }

  // ------------------------- private data --------------------------------
  private: 
    const GridCurve* myC;

  // ------------------------- iterator services --------------------------------
public:

  /**
   * Iterator service.
   * @return begin iterator
   */
  ConstIterator begin() const {
    return ConstIterator( myC->my1SCells.begin(), Modifier(myC->myK) );
  }

  /**
   * Iterator service.
   * @return end iterator
   */
  ConstIterator end() const {
    return ConstIterator( myC->my1SCells.end(), Modifier(myC->myK) );
  }

  /**
   * Iterator service.
   * @return rbegin iterator
   */
  ConstReverseIterator rbegin() const {
    return ConstReverseIterator(this->end());
  }

  /**
   * Iterator service.
   * @return rend iterator
   */
  ConstReverseIterator rend() const {
    return ConstReverseIterator(this->begin());
  }

};

///////////////////////////////////////////////////////////////////////////////
// end of class ArrowsRange
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// class InnerPointsRange
///////////////////////////////////////////////////////////////////////////////

/**
 * This class is a model of CRange and provides a ConstIterator to scan 
 * the 1-cells and return the (center of the direct incident pixel
 */
class InnerPointsRange
{

  // ------------------------- inner types --------------------------------
public: 

  friend class GridCurve<KSpace>;

  typedef typename GridCurve::Storage Storage; 
  typedef typename Storage::const_iterator ConstIteratorOnSCells; 

  typedef SCellToInnerPoint<KSpace> Modifier; 

  typedef ConstIteratorAdapter<ConstIteratorOnSCells,Modifier> ConstIterator; 
  typedef std::reverse_iterator<ConstIterator> ConstReverseIterator;

  // ------------------------- standard services --------------------------------

  /**
   * Default Constructor.
   */
  InnerPointsRange(){}

  /**
   * Constructor.
   */
  InnerPointsRange(const GridCurve* aGridCurve ): myC(aGridCurve){}

  /**
   * Copy constructor.
   * @param other the iterator to clone.
   */
  InnerPointsRange( const InnerPointsRange & aOther )
    : myC( aOther.myC ){}
  
  /**
   * Assignment.
   * @param other the iterator to copy.
   * @return a reference on 'this'.
   */
  InnerPointsRange& operator= ( const InnerPointsRange & other )
  {  
    if ( this != &other )
    {
      myC = other.myC;
    }
  return *this;
  }

  /**
   * Destructor. Does nothing.
   */
  ~InnerPointsRange() {}

  /**
   * @return the size of the range
   */
  typename Storage::size_type size() const 
  {
    return myC->my1SCells.size();
  }

  // ------------------------- private data --------------------------------
  private: 
    const GridCurve* myC;

  // ------------------------- iterator services --------------------------------
public:

  /**
   * Iterator service.
   * @return begin iterator
   */
  ConstIterator begin() const {
    return ConstIterator( myC->my1SCells.begin(), Modifier(myC->myK) );
  }

  /**
   * Iterator service.
   * @return end iterator
   */
  ConstIterator end() const {
    return ConstIterator( myC->my1SCells.end(), Modifier(myC->myK) );
  }

  /**
   * Iterator service.
   * @return rbegin iterator
   */
  ConstReverseIterator rbegin() const {
    return ConstReverseIterator(this->end());
  }

  /**
   * Iterator service.
   * @return rend iterator
   */
  ConstReverseIterator rend() const {
    return ConstReverseIterator(this->begin());
  }

};

///////////////////////////////////////////////////////////////////////////////
// end of class InnerPointsRange
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// class OuterPointsRange
///////////////////////////////////////////////////////////////////////////////

/**
 * This class is a model of CRange and provides a ConstIterator to scan 
 * the 1-cells and return the center of the indirect incident pixel
 */
class OuterPointsRange
{

  // ------------------------- inner types --------------------------------
public: 

  friend class GridCurve<KSpace>;

  typedef typename GridCurve::Storage Storage; 
  typedef typename Storage::const_iterator ConstIteratorOnSCells; 

  typedef SCellToOuterPoint<KSpace> Modifier; 

  typedef ConstIteratorAdapter<ConstIteratorOnSCells,Modifier> ConstIterator; 
  typedef std::reverse_iterator<ConstIterator> ConstReverseIterator;

  // ------------------------- standard services --------------------------------

  /**
   * Default Constructor.
   */
  OuterPointsRange(){}

  /**
   * Constructor.
   */
  OuterPointsRange(const GridCurve* aGridCurve ): myC(aGridCurve){}

  /**
   * Copy constructor.
   * @param other the iterator to clone.
   */
  OuterPointsRange( const OuterPointsRange & aOther )
    : myC( aOther.myC ){}
  
  /**
   * Assignment.
   * @param other the iterator to copy.
   * @return a reference on 'this'.
   */
  OuterPointsRange& operator= ( const OuterPointsRange & other )
  {  
    if ( this != &other )
    {
      myC = other.myC;
    }
  return *this;
  }

  /**
   * Destructor. Does nothing.
   */
  ~OuterPointsRange() {}

  /**
   * @return the size of the range
   */
  typename Storage::size_type size() const 
  {
    return myC->my1SCells.size();
  }

  // ------------------------- private data --------------------------------
  private: 
    const GridCurve* myC;

  // ------------------------- iterator services --------------------------------
public:

  /**
   * Iterator service.
   * @return begin iterator
   */
  ConstIterator begin() const {
    return ConstIterator( myC->my1SCells.begin(), Modifier(myC->myK) );
  }

  /**
   * Iterator service.
   * @return end iterator
   */
  ConstIterator end() const {
    return ConstIterator( myC->my1SCells.end(), Modifier(myC->myK) );
  }

  /**
   * Iterator service.
   * @return rbegin iterator
   */
  ConstReverseIterator rbegin() const {
    return ConstReverseIterator(this->end());
  }

  /**
   * Iterator service.
   * @return rend iterator
   */
  ConstReverseIterator rend() const {
    return ConstReverseIterator(this->begin());
  }

};

///////////////////////////////////////////////////////////////////////////////
// end of class OuterPointsRange
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// class IncidentPointsRange
///////////////////////////////////////////////////////////////////////////////

/**
 * This class is a model of CRange and provides a ConstIterator to scan 
 * the 1-cells and return the center of the indirect incident pixel
 */
class IncidentPointsRange
{

  // ------------------------- inner types --------------------------------
public: 

  friend class GridCurve<KSpace>;

  typedef typename GridCurve::Storage Storage; 
  typedef typename Storage::const_iterator ConstIteratorOnSCells; 

  typedef SCellToIncidentPoints<KSpace> Modifier; 

  typedef ConstIteratorAdapter<ConstIteratorOnSCells,Modifier> ConstIterator; 
  typedef std::reverse_iterator<ConstIterator> ConstReverseIterator;

  // ------------------------- standard services --------------------------------

  /**
   * Default Constructor.
   */
  IncidentPointsRange(){}

  /**
   * Constructor.
   */
  IncidentPointsRange(const GridCurve* aGridCurve ): myC(aGridCurve){}

  /**
   * Copy constructor.
   * @param other the iterator to clone.
   */
  IncidentPointsRange( const IncidentPointsRange & aOther )
    : myC( aOther.myC ){}
  
  /**
   * Assignment.
   * @param other the iterator to copy.
   * @return a reference on 'this'.
   */
  IncidentPointsRange& operator= ( const IncidentPointsRange & other )
  {  
    if ( this != &other )
    {
      myC = other.myC;
    }
  return *this;
  }

  /**
   * Destructor. Does nothing.
   */
  ~IncidentPointsRange() {}

  /**
   * @return the size of the range
   */
  typename Storage::size_type size() const 
  {
    return myC->my1SCells.size();
  }

  // ------------------------- private data --------------------------------
  private: 
    const GridCurve* myC;

  // ------------------------- iterator services --------------------------------
public:

  /**
   * Iterator service.
   * @return begin iterator
   */
  ConstIterator begin() const {
    return ConstIterator( myC->my1SCells.begin(), Modifier(myC->myK) );
  }

  /**
   * Iterator service.
   * @return end iterator
   */
  ConstIterator end() const {
    return ConstIterator( myC->my1SCells.end(), Modifier(myC->myK) );
  }

  /**
   * Iterator service.
   * @return rbegin iterator
   */
  ConstReverseIterator rbegin() const {
    return ConstReverseIterator(this->end());
  }

  /**
   * Iterator service.
   * @return rend iterator
   */
  ConstReverseIterator rend() const {
    return ConstReverseIterator(this->begin());
  }

};

///////////////////////////////////////////////////////////////////////////////
// end of class IncidentPointsRange
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// class CodesRange
///////////////////////////////////////////////////////////////////////////////

/**
 * This class is a model of CRange and provides a ConstIterator to scan 
 * the 1-cells and return the center of the indirect incident pixel
 */
class CodesRange
{

  // ------------------------- inner types --------------------------------
public: 

  friend class GridCurve<KSpace>;

  typedef typename GridCurve::Storage Storage; 
  typedef typename Storage::const_iterator ConstIteratorOnSCells; 

  typedef SCellToCode<KSpace> Modifier; 

  typedef ConstIteratorAdapter<ConstIteratorOnSCells,Modifier> ConstIterator; 
  typedef std::reverse_iterator<ConstIterator> ConstReverseIterator;

  // ------------------------- standard services --------------------------------

  /**
   * Default Constructor.
   */
  CodesRange(){}

  /**
   * Constructor.
   */
  CodesRange(const GridCurve* aGridCurve ): myC(aGridCurve){}

  /**
   * Copy constructor.
   * @param other the iterator to clone.
   */
  CodesRange( const CodesRange & aOther )
    : myC( aOther.myC ){}
  
  /**
   * Assignment.
   * @param other the iterator to copy.
   * @return a reference on 'this'.
   */
  CodesRange& operator= ( const CodesRange & other )
  {  
    if ( this != &other )
    {
      myC = other.myC;
    }
  return *this;
  }

  /**
   * Destructor. Does nothing.
   */
  ~CodesRange() {}

  /**
   * @return the size of the range
   */
  typename Storage::size_type size() const 
  {
    return myC->my1SCells.size();
  }

  // ------------------------- private data --------------------------------
  private: 
    const GridCurve* myC;

  // ------------------------- iterator services --------------------------------
public:

  /**
   * Iterator service.
   * @return begin iterator
   */
  ConstIterator begin() const {
    return ConstIterator( myC->my1SCells.begin(), Modifier(myC->myK) );
  }

  /**
   * Iterator service.
   * @return end iterator
   */
  ConstIterator end() const {
    return ConstIterator( myC->my1SCells.end(), Modifier(myC->myK) );
  }

  /**
   * Iterator service.
   * @return rbegin iterator
   */
  ConstReverseIterator rbegin() const {
    return ConstReverseIterator(this->end());
  }

  /**
   * Iterator service.
   * @return rend iterator
   */
  ConstReverseIterator rend() const {
    return ConstReverseIterator(this->begin());
  }

};

///////////////////////////////////////////////////////////////////////////////
// end of class CodesRange
///////////////////////////////////////////////////////////////////////////////
