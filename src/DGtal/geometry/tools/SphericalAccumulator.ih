/**
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as
 *  published by the Free Software Foundation, either version 3 of the
 *  License, or  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 **/

/**
 * @file SphericalAccumulator.ih
 * @author David Coeurjolly (\c david.coeurjolly@liris.cnrs.fr )
 * Laboratoire d'InfoRmatique en Image et Syst√®mes d'information - LIRIS (CNRS, UMR 5205), CNRS, France
 *
 * @date 2012/09/17
 *
 * Implementation of inline methods defined in SphericalAccumulator.h
 *
 * This file is part of the DGtal library.
 */


//////////////////////////////////////////////////////////////////////////////
#include <cstdlib>
//////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// IMPLEMENTATION of inline methods.
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// ----------------------- Standard services ------------------------------

/**
 * Constructor.
 */
template <typename T>
inline
DGtal::SphericalAccumulator<T>::SphericalAccumulator(const Size aP)
{
  myTotal = 0;
  myNphi = aP + 1;
  myNtheta = 2*aP;
  myAccumulator.resize(myNphi*myNtheta,0);
  myAccumulatorDir.resize(myNphi*myNtheta, Vector::zero);

  /*  for(Size i=0; i < myNphi; i++)
    for(Size j=0; j < myNtheta; j++)
      {
	double dphi = M_PI/(double)(myNphi-1);
	Size Ntheta_i = (Size)floor((myNphi-1)*sin(i*dphi));     
	
	if (j <=Ntheta_i)
	  myAccumulator[j + i*myNtheta]=0;
	else
	  myAccumulator[j+ i*myNtheta]=-1;
      }
  */
}

/**
 * Destructor.
 */
template <typename T>
inline
DGtal::SphericalAccumulator<T>::~SphericalAccumulator()
{
}
// --------------------------------------------------------
template <typename T>
inline
void DGtal::SphericalAccumulator<T>::binCoordinates(const Vector &aDir, 
						    Size &posPhi, 
						    Size &posTheta) const
{
  double theta,phi;

  ASSERT(aDir.norm() != 0);
  Vector vec = aDir.getNormalized();

  trace.warning() << "Adding : "<<aDir<<"    "<<vec<<std::endl;

  phi = acos(NumberTraits<typename T::Coordinate>::castToDouble(vec[2]));
  
  double dphi = M_PI/(double)(myNphi-1);
  posPhi = static_cast<Size>(floor( (phi+dphi/2.) *(myNphi-1)/  M_PI));
  if(posPhi == 0 || posPhi== (myNphi-1))
    {
      posTheta =0;
    }
  else
    {
      theta = acos(NumberTraits<typename T::Component>::castToDouble(vec[0])/
			  sqrt((NumberTraits<typename T::Component>::castToDouble(vec[0])*
				NumberTraits<typename T::Component>::castToDouble(vec[0])
				+
				NumberTraits<typename T::Component>::castToDouble(vec[1])*
				NumberTraits<typename T::Component>::castToDouble(vec[1]))));
      if(vec[1]<0)
	{
	  theta *= -1;
	  theta += 2*M_PI;
	}
      double dtheta = M_PI/((double)(myNphi-1)*sin(posPhi*dphi));
      posTheta = static_cast<Size>(floor( (theta+dtheta/2.0)/dtheta)) % myNtheta;
    }
  
  posTheta = std::max<int>(0,std::min(2*(myNphi-1)-1,posTheta));
  posPhi = std::max<int>(0,std::min((myNphi-1),posPhi));
  
  trace.warning()<<"phi="<<phi<<"  norm="<<aDir.norm()<<std::endl;
  trace.warning()<<"posPhi="<<posPhi<<std::endl;
  trace.warning()<<"theta="<<theta<<std::endl;
  trace.warning()<<"posTheta="<<posTheta<<std::endl;
  
  ASSERT(posPhi>=0 );
  ASSERT(posPhi < myNphi);
  ASSERT( isValidBin(posPhi,posTheta) );
}
// --------------------------------------------------------
template <typename T>
inline
void DGtal::SphericalAccumulator<T>::addDirection(const Vector &aDir)
{
  Size posPhi,posTheta;
  
  binCoordinates(aDir,posPhi,posTheta);
  myAccumulator[posTheta + posPhi*myNtheta] += 1;
  myAccumulatorDir[posTheta + posPhi*myNtheta] += aDir.getNormalized();
  myTotal ++;
}
// --------------------------------------------------------
template <typename T>
inline
typename DGtal::SphericalAccumulator<T>::Quantity
DGtal::SphericalAccumulator<T>::samples() const
{
  return myTotal;
}
// --------------------------------------------------------
template <typename T>
inline
typename DGtal::SphericalAccumulator<T>::Quantity
DGtal::SphericalAccumulator<T>::count(const Size &posPhi, 
				      const Size &posTheta) const
{
  ASSERT( isValidBin(posPhi,posTheta) );
  return myAccumulator[posTheta + posPhi*myNtheta];
}
// --------------------------------------------------------
template <typename T>
inline
T
DGtal::SphericalAccumulator<T>::representativeDirection(const Size &posPhi,
							const Size &posTheta) const
{
  //  ASSERT( isValidBin(posPhi,posTheta) );
  Vector p=myAccumulatorDir[posTheta + posPhi*myNtheta] ;
  return p / static_cast<typename T::Component>(myAccumulator[posTheta + posPhi*myNtheta]);
}
// --------------------------------------------------------
template <typename T>
inline
T
DGtal::SphericalAccumulator<T>::representativeDirection(ConstIterator &it) const
{
  Size dist = it - myAccumulator.begin();
  Vector p = *(myAccumulatorDir.begin() + dist);
  return p/static_cast<typename T::Component>( *it );
}
// --------------------------------------------------------
// --------------------------------------------------------
template <typename T>
inline
void
DGtal::SphericalAccumulator<T>::binCoordinates(ConstIterator &it, 
					       Size &posPhi,
					       Size &posTheta) const
{
  Size dist = it - myAccumulator.begin();
  posPhi = dist/ myNtheta;
  posTheta = dist % myNtheta;
}
// --------------------------------------------------------
template <typename T>
inline
bool
DGtal::SphericalAccumulator<T>::isValidBin(const Size &posPhi, 
					   const Size &posTheta) const
{
  double dphi = M_PI/(double)(myNphi-1);
  double Ntheta_i = 2.0*(myNphi-1)*sin(posPhi*dphi);  
  
  /*  trace.info()<<"posPhi="<<posPhi<<"  posTheta="<<posTheta<<"  myNphi="<<myNphi<<std::endl;  
  trace.info()<<"DPHI="<<dphi<<"  Ntheta_i="<<Ntheta_i<<std::endl;
  */
  if ((posPhi == 0) || (posPhi == (myNphi-1)))
    return (posTheta==0);
  else
    return (posPhi < myNphi) &&  (posTheta<Ntheta_i);
}
// --------------------------------------------------------
template <typename T>
inline
void
DGtal::SphericalAccumulator<T>::getBinGeometry(const Size &posPhi,
					       const Size &posTheta,
					       Vector &a,
					       Vector &b,
					       Vector &c,
					       Vector &d) const
{
  ASSERT( isValidBin(posPhi,posTheta) );
  double dphi = M_PI/(double)(myNphi-1);
  double phi= (double)posPhi*dphi;
  double dtheta;
  
  if (posPhi == 0)
    dtheta =  M_PI/(double)((myNphi-1)*sin((posPhi+1)*dphi));     
  else
    dtheta = M_PI/(double)((myNphi-1)*sin(phi));     
  
  double theta=posTheta*dtheta;// - dtheta/2;
  double Nthetai = 2.0*(myNphi-1)*sin(phi); 

  trace.info() << "("<<posPhi<<";"<<posTheta<<")   phi="<<phi<<"   theta="<<theta
	       <<"  phi-d/2="<<phi-dphi/2.0<<"   theta-dth="<<theta-dtheta/2.0 
	       <<  "   NTHeta="<<2.0*(myNphi-1)*sin(posPhi*dphi) 
	       << "    dtheta = "<<dtheta<<std::endl;
  

  a[0]=cos(theta-dtheta/2.0)*sin(phi -dphi/2.0);
  a[1]=sin(theta-dtheta/2.0)*sin(phi -dphi/2.0);
  a[2]=cos(phi -dphi/2.0);
  
  
  if ((double)posTheta+1 >= Nthetai)
    {
      b[0]=cos(-dtheta/2.0)*sin(phi -dphi/2.0);
      b[1]=sin(-dtheta/2.0)*sin(phi -dphi/2.0);
      b[2]=cos(phi -dphi/2.0);
      
      c[0]=cos(- dtheta/2.0)*sin(phi+dphi/2.0);
      c[1]=sin( - dtheta/2.0)*sin(phi+dphi/2.0);
      c[2]=cos(phi+dphi/2.0);      
    }
  else
    {
      b[0]=cos(theta+dtheta/2.0)*sin(phi -dphi/2.0);
      b[1]=sin(theta+dtheta/2.0)*sin(phi -dphi/2.0);
      b[2]=cos(phi -dphi/2.0);
      
      c[0]=cos(theta+dtheta/2.0)*sin(phi+dphi/2.0);
      c[1]=sin(theta+dtheta/2.0)*sin(phi+dphi/2.0);
      c[2]=cos(phi+dphi/2.0);      
    }
  
  d[0]=cos(theta-dtheta/2.0)*sin(phi+dphi/2.0);
  d[1]=sin(theta-dtheta/2.0)*sin(phi+dphi/2.0);
  d[2]=cos(phi+dphi/2.0);      
}
// --------------------------------------------------------
template <typename T>
inline
void
DGtal::SphericalAccumulator<T>::clear()
{
  myTotal = 0;
  for(Size i=0; i < myNphi; i++)
    for(Size j=0; j < myNtheta; j++)
      if (isValidBin(i,j))
	myAccumulator[j + i*myNtheta]=0;
      else
	myAccumulator[j+ i*myNtheta]=-1;
      
  std::fill(myAccumulatorDir.begin(), myAccumulatorDir.end(), Vector::zero);
}


///////////////////////////////////////////////////////////////////////////////
// Interface - public :

/**
 * Writes/Displays the object on an output stream.
 * @param out the output stream where the object is written.
 */
template <typename T>
inline
void
DGtal::SphericalAccumulator<T>::selfDisplay ( std::ostream & out ) const
{
  out << "[SphericalAccumulator] Nphi="<<myNphi<<"  Ntheta="<<myNtheta<<"  myTotal="<<myTotal;
}

/**
 * Checks the validity/consistency of the object.
 * @return 'true' if the object is valid, 'false' otherwise.
 */
template <typename T>
inline
bool
DGtal::SphericalAccumulator<T>::isValid() const
{
    return true;
}



///////////////////////////////////////////////////////////////////////////////
// Implementation of inline functions                                        //

template <typename T>
inline
std::ostream&
DGtal::operator<< ( std::ostream & out, 
		  const SphericalAccumulator<T> & object )
{
  object.selfDisplay( out );
  return out;
}

//                                                                           //
///////////////////////////////////////////////////////////////////////////////


