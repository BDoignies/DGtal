/**
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as
 *  published by the Free Software Foundation, either version 3 of the
 *  License, or  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 **/

/**
 * @file SphericalAccumulator.ih
 * @author David Coeurjolly (\c david.coeurjolly@liris.cnrs.fr )
 * Laboratoire d'InfoRmatique en Image et Syst√®mes d'information - LIRIS (CNRS, UMR 5205), CNRS, France
 *
 * @date 2012/09/17
 *
 * Implementation of inline methods defined in SphericalAccumulator.h
 *
 * This file is part of the DGtal library.
 */


//////////////////////////////////////////////////////////////////////////////
#include <cstdlib>
//////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// IMPLEMENTATION of inline methods.
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// ----------------------- Standard services ------------------------------

/**
 * Constructor.
 */
template <typename T>
inline
DGtal::SphericalAccumulator<T>::SphericalAccumulator(const Size aP):
  myNphi(aP)
{
  myTotal = 0;
  myNtheta = 2*myNphi;
  myAccumulator.resize(myNphi*myNtheta,0);
  myAccumulatorDir.resize(myNphi*myNtheta, Vector::zero);
}


/**
 * Destructor.
 */
template <typename T>
inline
DGtal::SphericalAccumulator<T>::~SphericalAccumulator()
{
}
// --------------------------------------------------------
template <typename T>
inline
void DGtal::SphericalAccumulator<T>::binCoordinates(const Vector &aDir, 
						    Size &posPhi, 
						    Size &posTheta) const
{
  double theta,phi;
 
  ASSERT(aDir.norm() != 0);
  //Polar coordinates
  phi = acos(NumberTraits<typename T::Coordinate>::castToDouble(aDir[2])
	     /aDir.norm());
  
  trace.warning()<<"phi="<<phi<<std::endl;
  double dphi = M_PI/(myNphi-1);
  posPhi = static_cast<Size>( floor( (phi+dphi/2.) * dphi));
  
  ASSERT(posPhi< myNphi);

  trace.warning()<<"posphi="<<posPhi<<std::endl;
  
  if(posPhi == 0 || posPhi== (myNphi-1))
    posTheta =0;
  else
    {
      double theta = atan2(NumberTraits<typename T::Coordinate>::castToDouble(aDir[1]), 
			   NumberTraits<typename T::Coordinate>::castToDouble(aDir[0]))
	+ M_PI;
      
      double dtheta = M_PI/((myNphi-1)*sin(posPhi*dphi));
      posTheta =  static_cast<Size>( floor((theta+dtheta/2.)*dtheta)) % (myNtheta);
      trace.warning()<<"theta="<<theta<<std::endl;
  
    }
  
  posTheta = static_cast<Size>(std::max<NumberTraits<Size>::SignedVersion>(0,
									   std::min<NumberTraits<Size>::SignedVersion>((NumberTraits<Size>::SignedVersion)(myNtheta-1),
														       (NumberTraits<Size>::SignedVersion)posTheta)));

  trace.warning()<<"postheta="<<posTheta<<std::endl;
  posPhi   = std::max<Size>(0,std::min<Size>(myNphi,posPhi));
  
  ASSERT(posTheta>=0 && posTheta < myNtheta);
  ASSERT(posPhi>=0 && posPhi < myNphi);
}
// --------------------------------------------------------
template <typename T>
inline
void DGtal::SphericalAccumulator<T>::addDirection(const Vector &aDir)
{
  Size posPhi,posTheta;
  
  binCoordinates(aDir,posPhi,posTheta);
  myAccumulator[posTheta + posPhi*myNtheta] += 1;
  myAccumulatorDir[posTheta + posPhi*myNtheta] += aDir.getNormalized();
  myTotal ++;
}
// --------------------------------------------------------
template <typename T>
inline
typename DGtal::SphericalAccumulator<T>::Quantity
DGtal::SphericalAccumulator<T>::samples() const
{
  return myTotal;
}
// --------------------------------------------------------
template <typename T>
inline
typename DGtal::SphericalAccumulator<T>::Quantity
DGtal::SphericalAccumulator<T>::count(const Size &posPhi, 
				      const Size &posTheta) const
{
  return myAccumulator[posTheta + posPhi*myNtheta];
}
// --------------------------------------------------------
template <typename T>
inline
T
DGtal::SphericalAccumulator<T>::representativeDirection(const Size &posPhi,
							const Size &posTheta) const
{
  Vector p=myAccumulatorDir[posTheta + posPhi*myNtheta] ;
  return p / static_cast<typename T::Component>(myAccumulator[posTheta + posPhi*myNtheta]);
}
// --------------------------------------------------------
template <typename T>
inline
T
DGtal::SphericalAccumulator<T>::representativeDirection(ConstIterator &it) const
{
  Size dist = it - myAccumulator.begin();
  Vector p = *(myAccumulatorDir.begin() + dist);
  return p/static_cast<typename T::Component>( *it );
}
// --------------------------------------------------------
// --------------------------------------------------------
template <typename T>
inline
void
DGtal::SphericalAccumulator<T>::binCoordinates(ConstIterator &it, 
					       Size &phi,
					       Size &theta) const
{
  Size dist = it - myAccumulator.begin();
  phi = dist/ myNtheta;
  theta = dist % myNtheta;
}
// --------------------------------------------------------
template <typename T>
inline
void
DGtal::SphericalAccumulator<T>::getBinGeometry(const Size &posPhi,
					       const Size &posTheta,
					       Vector &a,
					       Vector &b,
					       Vector &c,
					       Vector &d) const
{
  double dphi = M_PI/myNphi;
  double dtheta;
  double theta;
  
  if (posPhi == 0)
    dtheta =  M_PI/((myNphi-1)*sin((posPhi+1)*dphi));     
  else
    {
      dtheta = M_PI/((myNphi-1)*sin(posPhi*dphi));     
    }
  
  theta=posTheta*dtheta;
  double phi=posPhi*dphi;
  
  a[0]=cos(theta-dtheta/2.0)*sin(phi -dphi/2.0);
  a[1]=sin(theta-dtheta/2.0)*sin(phi -dphi/2.0);
  a[2]=cos(phi -dphi/2.0);
  
  b[0]=cos(theta+dtheta/2.0)*sin(phi -dphi/2.0);
  b[1]=sin(theta+dtheta/2.0)*sin(phi -dphi/2.0);
  b[2]=cos(phi -dphi/2.0);
  
  c[0]=cos(theta+dtheta/2.0)*sin(phi+dphi/2.0);
  c[1]=sin(theta+dtheta/2.0)*sin(phi+dphi/2.0);
  c[2]=cos(phi+dphi/2.0);      
  
  d[0]=cos(theta-dtheta/2.0)*sin(phi+dphi/2.0);
  d[1]=sin(theta-dtheta/2.0)*sin(phi+dphi/2.0);
  d[2]=cos(phi+dphi/2.0);      
}
// --------------------------------------------------------
template <typename T>
inline
void
DGtal::SphericalAccumulator<T>::clear()
{
  myTotal = 0;
  std::fill(myAccumulator.begin(), myAccumulator.end(), 0);
  std::fill(myAccumulatorDir.begin(), myAccumulatorDir.end(), Vector::zero);
}


///////////////////////////////////////////////////////////////////////////////
// Interface - public :

/**
 * Writes/Displays the object on an output stream.
 * @param out the output stream where the object is written.
 */
template <typename T>
inline
void
DGtal::SphericalAccumulator<T>::selfDisplay ( std::ostream & out ) const
{
  out << "[SphericalAccumulator] Nphi="<<myNphi<<"  Ntheta="<<myNtheta<<"  myTotal="<<myTotal;
}

/**
 * Checks the validity/consistency of the object.
 * @return 'true' if the object is valid, 'false' otherwise.
 */
template <typename T>
inline
bool
DGtal::SphericalAccumulator<T>::isValid() const
{
    return true;
}



///////////////////////////////////////////////////////////////////////////////
// Implementation of inline functions                                        //

template <typename T>
inline
std::ostream&
DGtal::operator<< ( std::ostream & out, 
		  const SphericalAccumulator<T> & object )
{
  object.selfDisplay( out );
  return out;
}

//                                                                           //
///////////////////////////////////////////////////////////////////////////////


