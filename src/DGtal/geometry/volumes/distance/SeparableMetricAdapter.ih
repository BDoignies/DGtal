/**
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as
 *  published by the Free Software Foundation, either version 3 of the
 *  License, or  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *·
 **/

/**
 * @file ExactLpSeparableMetric.ih
 * @author David Coeurjolly (\c david.coeurjolly@liris.cnrs.fr )
 * Laboratoire d'InfoRmatique en Image et Systèmes d'information - LIRIS (CNRS, UMR 5205), CNRS, France
 *
 * @date 2013/21/04
 *
 * Implementation of inline methods defined in ExactLpSeparableMetric.h
 *
 * This file is part of the DGtal library.
 */


//////////////////////////////////////////////////////////////////////////////
#include <cstdlib>
//////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// IMPLEMENTATION of inline methods.
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
//------------------------------------------------------------------------------
template <typename TM>
inline
typename DGtal::SeparableMetricAdapter<TM>::Abscissa 
DGtal::SeparableMetricAdapter<TM>::binarySearchHidden(const Abscissa &udim, 
                                                                  const Abscissa &vdim,
                                                                  const Promoted &nu,
                                                                  const Promoted &nv,
                                                                  const Abscissa &lower,
                                                                  const Abscissa &upper) const
{   
  ASSERT(  (nu +  BasicMathFunctions::power( static_cast<Promoted>(abs( udim - lower)),  p)) <
           (nv +  BasicMathFunctions::power( static_cast<Promoted>(abs( vdim - lower)), p)));
  
  //Recurrence stop 
  if ( (upper - lower) <= NumberTraits<Abscissa>::ONE)
    {
      //testing upper
      Promoted nuUpdated = nu +  BasicMathFunctions::power( static_cast<Promoted>(abs( udim - upper )), p);
      Promoted nvUpdated = nv +  BasicMathFunctions::power( static_cast<Promoted>(abs( vdim - upper )), p);
      if (nuUpdated < nvUpdated)
        return upper;
      else
        return lower;
    }
  
  Abscissa mid = (lower + upper)/2;
  Promoted nuUpdated = nu +  BasicMathFunctions::power( static_cast<Promoted>(abs( udim - mid )), p);
  Promoted nvUpdated = nv +  BasicMathFunctions::power( static_cast<Promoted>(abs( vdim - mid )), p);
      
  //Recursive call
  if ( nuUpdated < nvUpdated)
    return binarySearchHidden(udim,vdim,nu,nv,mid,upper);
  else
    return binarySearchHidden(udim,vdim,nu,nv,lower,mid);
      
}
//------------------------------------------------------------------------------
template <typename TM>
inline
bool 
DGtal::SeparableMetricAdapter<TM>::hiddenBy(const Point &u, 
                                                        const Point &v,
                                                        const Point &w, 
                                                        const Point &startingPoint,
                                                        const Point &endPoint,
                                                        const typename Point::UnsignedComponent dim) const
{
  //Interval bound for the binary search
  Abscissa lower = startingPoint[dim];
  Abscissa upper = endPoint[dim];
      
  //Partial norm computation (sum_{i!=dim}  |u_i-v_i|^p
  Promoted nu = NumberTraits<Promoted>::ZERO;
  Promoted nv = NumberTraits<Promoted>::ZERO;
  Promoted nw = NumberTraits<Promoted>::ZERO;
  for(DGtal::Dimension i  = 0 ; i < Point::dimension ; i++)
    if (i != dim)
      {
        nu += BasicMathFunctions::power ( static_cast<Promoted>(abs(u[i] - startingPoint[i])), p);
        nv += BasicMathFunctions::power ( static_cast<Promoted>(abs(v[i] - startingPoint[i])), p);
        nw += BasicMathFunctions::power ( static_cast<Promoted>(abs(w[i] - startingPoint[i])), p);
      }
 
  //Abscissa of voronoi edges
  Abscissa uv,vw;
  Promoted dv,dw,du,ddv,ddw;

  //checking distances to lower bound
  du = nu + BasicMathFunctions::power( static_cast<Promoted>(abs( u[dim] - lower)), p);
  dv = nv + BasicMathFunctions::power( static_cast<Promoted>(abs( v[dim] - lower)), p);
  dw = nw + BasicMathFunctions::power( static_cast<Promoted>(abs( w[dim] - lower)), p);

  //Precondition of binarySearchHidden is true
  if (du < dv )
    {
      uv = binarySearchHidden(u[dim],v[dim],nu,nv,lower,upper);
      if (dv < dw)
        {
          vw = binarySearchHidden(v[dim],w[dim],nv,nw,lower,upper); //precondition
          return (uv > vw);
        }

      if (dw > dv)
        return true; 
      else
        {
          //check if uv + 1 is stricly in W
       
          //first, optimisation
          if (uv == upper) return true;
          
          //distances at uv+1
          ddv = nv + BasicMathFunctions::power( static_cast<Promoted>(abs( v[dim] - uv -1)), p);
          ddw = nw + BasicMathFunctions::power( static_cast<Promoted>(abs( w[dim] - uv -1)), p);
          if (ddw < ddv)
            return true;
          else
            return false;
        }
    }
  else  // du >= dv
    {
      if (dv <= dw)
        return false;
      else
        return true;
    }
}
//------------------------------------------------------------------------------
template <typename TM>
inline
void
DGtal::SeparableMetricAdapter<TM>::selfDisplay ( std::ostream & out ) const
{
  out << "[SeparableMetricAdapter] metric="<<myMetric;
}
//------------------------------------------------------------------------------
template <typename TM>
inline
std::ostream&
DGtal::operator<< ( std::ostream & out, 
                    const SeparableMetricAdapter<TM> & object )
{
  object.selfDisplay( out );
  return out;
}