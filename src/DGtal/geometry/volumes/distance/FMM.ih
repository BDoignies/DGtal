/**
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as
 *  published by the Free Software Foundation, either version 3 of the
 *  License, or  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 **/

/**
 * @file FMM.ih
 * @author Tristan Roussillon (\c
 * tristan.roussillon@liris.cnrs.fr ) Laboratoire d'InfoRmatique en
 * Image et Syst√®mes d'information - LIRIS (CNRS, UMR 5205), CNRS,
 * France
 *
 *
 * @date 2012/01/17
 *
 * @brief Implementation of inline methods defined in FMM.h
 *
 * This file is part of the DGtal library.
 */


//////////////////////////////////////////////////////////////////////////////
#include <cstdlib>
//////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// IMPLEMENTATION of inline methods.
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// ----------------------- Standard services ------------------------------


template <typename TMetricComputer, typename TPointPredicate>
inline
DGtal::FMM<TMetricComputer, TPointPredicate>::FMM(AcceptedPointsSet& aSet, const MetricComputer& aMC, const PointPredicate& aPointPredicate): 
myAcceptedPoints( aSet ), myMC( aMC ), myPointPredicate( aPointPredicate ), 
myAreaThreshold( std::numeric_limits<Area>::max() ), 
myDistanceThreshold( std::numeric_limits<Distance>::max() )
{
 init(); 
}


template <typename TMetricComputer, typename TPointPredicate>
inline
DGtal::FMM<TMetricComputer, TPointPredicate>::FMM(AcceptedPointsSet& aSet, const MetricComputer& aMC, const PointPredicate& aPointPredicate, const Area& aAreaThreshold, const Distance& aDistanceThreshold): 
myAcceptedPoints( aSet ), myMC( aMC ), myPointPredicate( aPointPredicate ), 
myAreaThreshold( aAreaThreshold ), 
myDistanceThreshold( aDistanceThreshold )
{
 init();
}


template <typename TMetricComputer, typename TPointPredicate>
inline
DGtal::FMM<TMetricComputer, TPointPredicate>::~FMM()
{
}

///////////////////////////////////////////////////////////////////////////////
// Interface - public :

template <typename TMetricComputer, typename TPointPredicate>
inline
bool
DGtal::FMM<TMetricComputer, TPointPredicate>::isValid() const
{
  return true; 
}

template <typename TMetricComputer, typename TPointPredicate>
inline
void
DGtal::FMM<TMetricComputer, TPointPredicate>::selfDisplay ( std::ostream & out ) const
{
   out << "[FMM]" << std::endl; 
}


///////////////////////////////////////////////////////////////////////////////
// Internals

template <typename TMetricComputer, typename TPointPredicate>
inline
void
DGtal::FMM<TMetricComputer, TPointPredicate>::init()
{
}

template <typename TMetricComputer, typename TPointPredicate>
inline
bool
DGtal::FMM<TMetricComputer, TPointPredicate>::addNew()
{
  return false; 
}

template <typename TMetricComputer, typename TPointPredicate>
inline
void
DGtal::FMM<TMetricComputer, TPointPredicate>::update(const Point& aPoint)
{
}


///////////////////////////////////////////////////////////////////////////////
// Implementation of inline functions                                        //

template <typename TMetricComputer, typename TPointPredicate>
inline
std::ostream&
DGtal::operator<< ( std::ostream & out, 
      const FMM<TMetricComputer, TPointPredicate> & object )
{
  object.selfDisplay( out );
  return out;
}

//                                                                           //
///////////////////////////////////////////////////////////////////////////////


