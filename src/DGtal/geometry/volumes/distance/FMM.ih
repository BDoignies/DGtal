/**
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as
 *  published by the Free Software Foundation, either version 3 of the
 *  License, or  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 **/

/**
 * @file FMM.ih
 * @author Tristan Roussillon (\c
 * tristan.roussillon@liris.cnrs.fr ) Laboratoire d'InfoRmatique en
 * Image et Syst√®mes d'information - LIRIS (CNRS, UMR 5205), CNRS,
 * France
 *
 *
 * @date 2012/01/17
 *
 * @brief Implementation of inline methods defined in FMM.h
 *
 * This file is part of the DGtal library.
 */


//////////////////////////////////////////////////////////////////////////////
#include <cstdlib>
//////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// IMPLEMENTATION of inline methods.
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// ----------------------- Standard services ------------------------------

template <typename TImage, typename TSet, typename TPointPredicate, typename TDistance >
inline
DGtal::FMM<TImage, TSet, TPointPredicate, TDistance>
::FMM(Image& aImg, AcceptedPointSet& aSet, 
      const PointPredicate& aPointPredicate,
      const Distance& aDistance )
  : myImage( aImg ), myAcceptedPoints( aSet ), myDC( aDistance ), 
    myPointPredicate( aPointPredicate ), 
    myAreaThreshold( std::numeric_limits<Area>::max() ), 
    myDistanceValueThreshold( std::numeric_limits<DistanceValue>::max() )
{
  if (myAcceptedPoints.size() == 0) throw InputException(); 
  init(); 
}


template <typename TImage, typename TSet, typename TPointPredicate, typename TDistance >
inline
DGtal::FMM<TImage, TSet, TPointPredicate, TDistance>
::FMM(Image& aImg, AcceptedPointSet& aSet, 
      const PointPredicate& aPointPredicate, 
      const Area& aAreaThreshold, 
      const DistanceValue& aDistanceValueThreshold,
      const Distance& aDistance )
  : myImage( aImg ), myAcceptedPoints( aSet ), myDC( aDistance ), 
    myPointPredicate( aPointPredicate ), 
    myAreaThreshold( aAreaThreshold ), 
    myDistanceValueThreshold( aDistanceValueThreshold )
{
  if (myAcceptedPoints.size() == 0) throw InputException(); 
  init();
}


template <typename TImage, typename TSet, typename TPointPredicate, typename TDistance >
inline
DGtal::FMM<TImage, TSet, TPointPredicate, TDistance>::~FMM()
{
}

///////////////////////////////////////////////////////////////////////////////
// Static functions :


template <typename TImage, typename TSet, typename TPointPredicate, typename TDistance >
template <typename TIteratorOnPoints>
void
DGtal::FMM<TImage, TSet, TPointPredicate, TDistance>
::initFromPointsRange(const TIteratorOnPoints& itb, const TIteratorOnPoints& ite, 
		  Image& aImg, AcceptedPointSet& aSet, 
		  const DistanceValue& aDistanceValue)
{
  TIteratorOnPoints it = itb; 
  for ( ; it != ite; ++it) 
    {
      insertAndAlwaysSetValue( aImg, aSet, *it, aDistanceValue ); 
    }
}

template <typename TImage, typename TSet, typename TPointPredicate, typename TDistance >
template <typename TIteratorOnPairs>
void
DGtal::FMM<TImage, TSet, TPointPredicate, TDistance>
::initFromIncidentPointsRange(const TIteratorOnPairs& itb, const TIteratorOnPairs& ite, 
			      Image& aImg, AcceptedPointSet& aSet, 
			      const DistanceValue& aDistanceValue, 
			      bool aFlagIsPositive)
{
  DistanceValue k = -1; 
  if (aFlagIsPositive) k = 1; 

  TIteratorOnPairs it = itb; 
  for ( ; it != ite; ++it) 
    {
      Point inner( it->first ); 
      Point outer( it->second ); 
      insertAndAlwaysSetValue( aImg, aSet, inner, k*aDistanceValue ); 
      insertAndAlwaysSetValue( aImg, aSet, outer, -k*aDistanceValue ); 
    }
}

///////////////////////////////////////////////////////////////////////////////
// Interface - public :


template <typename TImage, typename TSet, typename TPointPredicate, typename TDistance >
inline
void
DGtal::FMM<TImage, TSet, TPointPredicate, TDistance>::compute()
{
  Point p = Point::diagonal(0); 
  DistanceValue d = 0; 
  while ( addNewAcceptedPoint( p, d ) )
    {   }
}

template <typename TImage, typename TSet, typename TPointPredicate, typename TDistance >
inline
bool
DGtal::FMM<TImage, TSet, TPointPredicate, TDistance>
::computeOneStep(Point& aPoint, DistanceValue& aValue)
{
  return addNewAcceptedPoint(aPoint, aValue);
}

template <typename TImage, typename TSet, typename TPointPredicate, typename TDistance >
inline
typename DGtal::FMM<TImage, TSet, TPointPredicate, TDistance>::DistanceValue
DGtal::FMM<TImage, TSet, TPointPredicate, TDistance>::getMin() const
{
  const AcceptedPointSet& set = myAcceptedPoints; 
  ASSERT( set.size() >= 1 ); 

  typename AcceptedPointSet::ConstIterator it = set.begin(); 
  typename AcceptedPointSet::ConstIterator itEnd = set.end(); 
  DistanceValue min = myImage( *it );  
  for (++it; it != itEnd; ++it)
    {
      DistanceValue v = myImage( *it ); 
      if (v < min) min = v; 
    }
  return min; 
}

template <typename TImage, typename TSet, typename TPointPredicate, typename TDistance >
inline
typename DGtal::FMM<TImage, TSet, TPointPredicate, TDistance>::DistanceValue
DGtal::FMM<TImage, TSet, TPointPredicate, TDistance>::getMax() const
{
  const AcceptedPointSet& set = myAcceptedPoints; 
  ASSERT( set.size() >= 1 ); 

  typename AcceptedPointSet::ConstIterator it = set.begin(); 
  typename AcceptedPointSet::ConstIterator itEnd = set.end(); 
  DistanceValue max = myImage( *it );  
  for (++it; it != itEnd; ++it)
    {
      DistanceValue v = myImage( *it ); 
      if (v > max) max = v; 
    }
  return max; 
}

template <typename TImage, typename TSet, typename TPointPredicate, typename TDistance >
inline
bool
DGtal::FMM<TImage, TSet, TPointPredicate, TDistance>::isValid() const
{
  //area threshold
  if ( (myAcceptedPoints.size() <= 0)
       || (myAcceptedPoints.size() >= myAreaThreshold) ) return false;

  //distance threshold
  if ( (std::abs(getMin()) >= myDistanceValueThreshold)
       || (getMax() >= myDistanceValueThreshold) ) return false; 

  //point predicate
  bool flagIsOk = true;  
  const AcceptedPointSet& set = myAcceptedPoints; 
  typename AcceptedPointSet::ConstIterator it = set.begin(); 
  typename AcceptedPointSet::ConstIterator itEnd = set.end(); 
  for ( ; ( (it != itEnd)&&(flagIsOk == true) ); ++it)
    {
      if (myPointPredicate( *it ) == false) flagIsOk = false;  
    }
  if (!flagIsOk) return false; 

  return true; 
}

template <typename TImage, typename TSet, typename TPointPredicate, typename TDistance >
inline
void
DGtal::FMM<TImage, TSet, TPointPredicate, TDistance>::selfDisplay ( std::ostream & out ) const
{
  out << "[FMM " << dimension << "d] ";
  out << myAcceptedPoints.size() << " accepted points (< " << myAreaThreshold << ")"; 
  out << " and " << myCandidatePoints.size() << " candidates. "; 
  myDC.selfDisplay(out); 
  out << " "; 
  out << "dmin: " << getMin() << ", dmax: " << getMax(); 
  out << " (abs < " << myDistanceValueThreshold << ")" << std::endl; 
}


///////////////////////////////////////////////////////////////////////////////
// Internals

template <typename TImage, typename TSet, typename TPointPredicate, typename TDistance >
inline
void
DGtal::FMM<TImage, TSet, TPointPredicate, TDistance>::init()
{
  typename AcceptedPointSet::Iterator it = myAcceptedPoints.begin(); 
  typename AcceptedPointSet::Iterator itEnd = myAcceptedPoints.end(); 
  for ( ; it != itEnd; ++it)
    {
      update( *it ); 
    }
}

template <typename TImage, typename TSet, typename TPointPredicate, typename TDistance >
inline
bool
DGtal::FMM<TImage, TSet, TPointPredicate, TDistance>
::addNewAcceptedPoint(Point& aPoint, DistanceValue& aValue)
{

  if ( (myAcceptedPoints.size()+1) < myAreaThreshold )
    {//if a new point can be accepted

      bool flagStop = false; 
      typename CandidatePointSet::iterator it = myCandidatePoints.begin();  
      typename CandidatePointSet::iterator itEnd = myCandidatePoints.end();  
      while ( (it != itEnd) && (!flagStop) )
	{ //while there are candidates and no point has been accepted

	  //pair of min distance
	  PointDistanceValue minPair = *it; 

	  if ( std::abs(minPair.second) < myDistanceValueThreshold ) 
	    { //if distance below a given threshold

	      //the point of min distance is removed from the set of candidates
	      myCandidatePoints.erase(*it); 
	      //it can be inserted into the set of accepted points
	      if ( insertAndSetValue( myImage, myAcceptedPoints,
	      			      minPair.first, minPair.second ) )
	      	{ //if it does not belong to the set
	      	  //the set of candidates is updated with 
	      	  //the neighbors of the new accepted point
		  aPoint = minPair.first;
		  aValue = minPair.second; 
	      	  update( aPoint ); 
	      	  flagStop = true; 
	      	}
	      else 
		{ //otherwise it has already been accepted
		  //with a smaller distance and the next candidate
		  //should be considered
		  it = myCandidatePoints.begin(); 
		}

	    }//end if distance below a given threshold
	  else return false; 

	} //end while there are candidates

      return flagStop; //true if a point has been accepted 

    } //end if a new point can be accepted
  else return false; 
}

template <typename TImage, typename TSet, typename TPointPredicate, typename TDistance >
inline
void
DGtal::FMM<TImage, TSet, TPointPredicate, TDistance>::update(const Point& aPoint)
{
 
  //neigbors
  Point neighbor = aPoint; 
  for (Dimension k = 0; k < dimension; ++k)
    {
      typename Point::Coordinate c = neighbor.at(k); 
      neighbor.at(k) = (c+1); 
      addNewCandidate(neighbor); 
      neighbor.at(k) = (c-1); 
      addNewCandidate(neighbor); 
      neighbor.at(k) = c; 
    }
}

template <typename TImage, typename TSet, typename TPointPredicate, typename TDistance >
inline
bool
DGtal::FMM<TImage, TSet, TPointPredicate, TDistance>::addNewCandidate(const Point& aPoint)
{

  //if it lies within the computation domain
  //and if it is not already accepted 
  if ( (myPointPredicate(aPoint) ) 
       && ( myAcceptedPoints.find(aPoint) == myAcceptedPoints.end() ) ) 
    {
      DistanceValue d = myDC(myImage, myAcceptedPoints, aPoint); 
      PointDistanceValue newPair( aPoint, d ); 
      //insert the new candidate with its distance
      myCandidatePoints.insert(newPair);
      return true; 
    } 
  else return false; 
}


///////////////////////////////////////////////////////////////////////////////
// Implementation of inline functions                                        //

template <typename TImage, typename TSet, typename TPointPredicate, typename TDistance >
inline
std::ostream&
DGtal::operator<< ( std::ostream & out, 
		    const FMM<TImage, TSet, TPointPredicate, TDistance> & object )
{
  object.selfDisplay( out );
  return out;
}

//                                                                           //
///////////////////////////////////////////////////////////////////////////////


