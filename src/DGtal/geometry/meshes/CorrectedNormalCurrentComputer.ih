/**
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as
 *  published by the Free Software Foundation, either version 3 of the
 *  License, or  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 **/

/**
 * @file CorrectedNormalCurrentComputer.ih
 * @author Jacques-Olivier Lachaud (\c jacques-olivier.lachaud@univ-savoie.fr )
 * Laboratory of Mathematics (CNRS, UMR 5127), University of Savoie, France
 *
 * @date 2020/02/18
 *
 * Implementation of inline methods defined in CorrectedNormalCurrentComputer.h
 *
 * This file is part of the DGtal library.
 */


//////////////////////////////////////////////////////////////////////////////
#include <cstdlib>
//////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// IMPLEMENTATION of inline methods.
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// ----------------------- Standard services ------------------------------

//-----------------------------------------------------------------------------
template <typename TRealPoint, typename TRealVector>
DGtal::CorrectedNormalCurrentComputer<TRealPoint, TRealVector>::
CorrectedNormalCurrentComputer( ConstAlias< SurfaceMesh > aMesh,
                                bool unit_u )
  : myMesh( aMesh ), myUnitU( unit_u )
{}

//-----------------------------------------------------------------------------
template <typename TRealPoint, typename TRealVector>
typename DGtal::CorrectedNormalCurrentComputer<TRealPoint, TRealVector>::ScalarMeasure
DGtal::CorrectedNormalCurrentComputer<TRealPoint, TRealVector>::
computeMu0() const
{
  ScalarMeasure mu0( &myMesh, 0.0 );
  if ( myMesh.vertexNormals().empty() )
    {
      trace.warning() << "[CorrectedNormalCurrentComputer::computeInterpolatedMu0]"
                      << " Unable to compute measures without vertex normals."
                      << std::endl;
      return mu0;
    }
  auto& face_mu0 = mu0.kMeasures( 2 );
  face_mu0.resize( myMesh.nbFaces() );
  Index idx_f = 0;
  for ( const auto& f : myMesh.allIncidentVertices() )
    {
      RealPoints  p( f.size() );
      RealVectors u( f.size() );
      for ( Index idx_v = 0; idx_v < f.size(); ++idx_v )
        {
          p[ idx_v ] = myMesh.positions()    [ f[ idx_v ] ];
          u[ idx_v ] = myMesh.vertexNormals()[ f[ idx_v ] ];
        }
      face_mu0[ idx_f++ ] = Formula::mu0InterpolatedU( p, u, myUnitU );
    }
  return mu0;
}

//-----------------------------------------------------------------------------
template <typename TRealPoint, typename TRealVector>
typename DGtal::CorrectedNormalCurrentComputer<TRealPoint, TRealVector>::ScalarMeasure
DGtal::CorrectedNormalCurrentComputer<TRealPoint, TRealVector>::
computeMu1() const
{
  ScalarMeasure mu1( &myMesh, 0.0 );
  if ( myMesh.vertexNormals().empty() )
    {
      trace.warning() << "[CorrectedNormalCurrentComputer::computeMu1]"
                      << " Unable to compute measures without vertex normals."
                      << std::endl;
      return mu1;
    }
  auto& face_mu1 = mu1.kMeasures( 2 );
  face_mu1.resize( myMesh.nbFaces() );
  Index idx_f = 0;
  for ( const auto& f : myMesh.allIncidentVertices() )
    {
      RealPoints  p( f.size() );
      RealVectors u( f.size() );
      for ( Index idx_v = 0; idx_v < f.size(); ++idx_v )
        {
          p[ idx_v ] = myMesh.positions()    [ f[ idx_v ] ];
          u[ idx_v ] = myMesh.vertexNormals()[ f[ idx_v ] ];
        }
      face_mu1[ idx_f++ ] = Formula::mu1InterpolatedU( p, u, myUnitU );
    }
  return mu1;
}

//-----------------------------------------------------------------------------
template <typename TRealPoint, typename TRealVector>
typename DGtal::CorrectedNormalCurrentComputer<TRealPoint, TRealVector>::ScalarMeasure
DGtal::CorrectedNormalCurrentComputer<TRealPoint, TRealVector>::
computeMu2() const
{
  ScalarMeasure mu2( &myMesh, 0.0 );
  if ( myMesh.vertexNormals().empty() )
    {
      trace.warning() << "[CorrectedNormalCurrentComputer::computeMu2]"
                      << " Unable to compute measures without vertex normals."
                      << std::endl;
      return mu2;
    }
  auto& face_mu2 = mu2.kMeasures( 2 );
  face_mu2.resize( myMesh.nbFaces() );
  Index idx_f = 0;
  for ( const auto& f : myMesh.allIncidentVertices() )
    {
      RealPoints  p( f.size() );
      RealVectors u( f.size() );
      for ( Index idx_v = 0; idx_v < f.size(); ++idx_v )
        {
          p[ idx_v ] = myMesh.positions()    [ f[ idx_v ] ];
          u[ idx_v ] = myMesh.vertexNormals()[ f[ idx_v ] ];
        }
      face_mu2[ idx_f++ ] = Formula::mu2InterpolatedU( p, u, myUnitU );
    }
  return mu2;
}

//-----------------------------------------------------------------------------
template <typename TRealPoint, typename TRealVector>
typename DGtal::CorrectedNormalCurrentComputer<TRealPoint, TRealVector>::TensorMeasure
DGtal::CorrectedNormalCurrentComputer<TRealPoint, TRealVector>::
computeMuXY() const
{
  const RealTensor zeroT { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 };
  TensorMeasure muXY( &myMesh, zeroT );
  if ( myMesh.vertexNormals().empty() )
    {
      trace.warning() << "[CorrectedNormalCurrentComputer::computeMuXY]"
                      << " Unable to compute measures without vertex normals."
                      << std::endl;
      return muXY;
    }
  auto& face_muXY = muXY.kMeasures( 2 );
  face_muXY.resize( myMesh.nbFaces() );
  Index idx_f = 0;
  for ( const auto& f : myMesh.allIncidentVertices() )
    {
      RealPoints  p( f.size() );
      RealVectors u( f.size() );
      for ( Index idx_v = 0; idx_v < f.size(); ++idx_v )
        {
          p[ idx_v ] = myMesh.positions()    [ f[ idx_v ] ];
          u[ idx_v ] = myMesh.vertexNormals()[ f[ idx_v ] ];
        }
      face_muXY[ idx_f++ ] = Formula::muXYInterpolatedU( p, u, myUnitU );
    }
  return muXY;
}



///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
