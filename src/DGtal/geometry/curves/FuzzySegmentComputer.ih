/**
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as
 *  published by the Free Software Foundation, either version 3 of the
 *  License, or  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 **/

/**
 * @file FuzzySegmentComputer.ih
 * @author Bertrand Kerautret (\c kerautre@loria.fr )
 * LORIA (CNRS, UMR 7503), University of Nancy, France
 *
 * @date 2015/01/05
 *
 * Implementation of inline methods defined in FuzzySegmentComputer.h
 *
 * This file is part of the DGtal library.
 */

///////////////////////////////////////////////////////////////////////////////
// IMPLEMENTATION of inline methods.
///////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
#include <cstdlib>
//////////////////////////////////////////////////////////////////////////////



///////////////////////////////////////////////////////////////////////////////
// Implementation of inline methods                                          //
///////////////////////////////////////////////////////////////////////////////



// ----------------------- Standard services ------------------------------


//-----------------------------------------------------------------------------
template <typename TSpace, typename TInputPoint, typename TInternalScalar>
inline
DGtal::FuzzySegmentComputer<TSpace, TInputPoint, TInternalScalar>::~FuzzySegmentComputer()
{ // Nothing to do.
}



//-----------------------------------------------------------------------------
template <typename TSpace, typename TInputPoint, typename TInternalScalar>
inline
DGtal::FuzzySegmentComputer<TSpace, TInputPoint, TInternalScalar>::FuzzySegmentComputer()
{ // Nothing to do.
}



//-----------------------------------------------------------------------------
template <typename TSpace, typename TInputPoint, typename TInternalScalar>
inline
DGtal::FuzzySegmentComputer<TSpace, TInputPoint, TInternalScalar>::
FuzzySegmentComputer( const FuzzySegmentComputer & other )
{ // Nothing to do.
}

template <typename TSpace, typename TInputPoint, typename TInternalScalar>
inline
FuzzySegmentComputer & 
DGtal::FuzzySegmentComputer<TSpace, TInputPoint, TInternalScalar>::
operator= ( const FuzzySegmentComputer & other )
{// Nothing to do.

}




//-----------------------------------------------------------------------------
template <typename TSpace, typename TInputPoint, typename TInternalScalar>
inline
Size
DGtal::FuzzySegmentComputer<TSpace, TInputPoint, TInternalScalar>::size() const 
{
  return myPointSet.size();
}


//-----------------------------------------------------------------------------
template <typename TSpace, typename TInputPoint, typename TInternalScalar>
inline
bool
DGtal::FuzzySegmentComputer<TSpace, TInputPoint, TInternalScalar>::empty() const 
{
  return myPointSet.size()!=0;
}



//-----------------------------------------------------------------------------
template <typename TSpace, typename TInputPoint, typename TInternalScalar>
inline
ConstIterator
DGtal::FuzzySegmentComputer<TSpace, TInputPoint, TInternalScalar>::begin() const 
{
  return myPointSet.begin();

}



//-----------------------------------------------------------------------------
template <typename TSpace, typename TInputPoint, typename TInternalScalar>
inline
ConstIterator
DGtal::FuzzySegmentComputer<TSpace, TInputPoint, TInternalScalar>::end() const 
{
  return myPointSet.end();
}




//-----------------------------------------------------------------------------
template <typename TSpace, typename TInputPoint, typename TInternalScalar>
inline
Size
DGtal::FuzzySegmentComputer<TSpace, TInputPoint, TInternalScalar>::max_size() const 
{
  return myPointSet.max_size();
}




//-----------------------------------------------------------------------------
template <typename TSpace, typename TInputPoint, typename TInternalScalar>
inline
Size
DGtal::FuzzySegmentComputer<TSpace, TInputPoint, TInternalScalar>::maxSize() const 
{
  return myPointSet.max_size();
}







//-----------------------------------------------------------------------------
template <typename TSpace, typename TInputPoint, typename TInternalScalar>
inline
void
DGtal::FuzzySegmentComputer<TSpace, TInputPoint, TInternalScalar>::init(const ConstIterator& it) const 
{
  // looking for 3 points.
  
  
}


//-----------------------------------------------------------------------------
template <typename TSpace, typename TInputPoint, typename TInternalScalar>
inline
bool
DGtal::FuzzySegmentComputer<TSpace, TInputPoint, TInternalScalar>::isExtendableFront() 
{
  return true;  
}



//-----------------------------------------------------------------------------
template <typename TSpace, typename TInputPoint, typename TInternalScalar>
inline
bool
DGtal::FuzzySegmentComputer<TSpace, TInputPoint, TInternalScalar>::extendFront() 
{
  return true;  
}



//-----------------------------------------------------------------------------
template <typename TSpace, typename TInputPoint, typename TInternalScalar>
inline
bool
DGtal::FuzzySegmentComputer<TSpace, TInputPoint, TInternalScalar>::isExtendableBack() 
{
  return true;  
}



//-----------------------------------------------------------------------------
template <typename TSpace, typename TInputPoint, typename TInternalScalar>
inline
bool
DGtal::FuzzySegmentComputer<TSpace, TInputPoint, TInternalScalar>::extendBack() 
{
  return true;  
}




//-----------------------------------------------------------------------------
template <typename TSpace, typename TInputPoint, typename TInternalScalar>
inline
Primitive
DGtal::FuzzySegmentComputer<TSpace, TInputPoint, TInternalScalar>::primitive()  const
{
  return Primitive(0,0,0);  
}




//-----------------------------------------------------------------------------
template <typename TSpace, typename TInputPoint, typename TInternalScalar>
inline
void
DGtal::FuzzySegmentComputer<TSpace, TInputPoint, TInternalScalar>::selfDisplay(std::ostream & out)  const
{
  out << "[Fuzzy Segment Computer]" ; 
}




//-----------------------------------------------------------------------------
template <typename TSpace, typename TInputPoint, typename TInternalScalar>
inline
void
DGtal::FuzzySegmentComputer<TSpace, TInputPoint, TInternalScalar>::isValid()  const
{
  return true;
}





//-----------------------------------------------------------------------------
template <typename TSpace, typename TInputPoint, typename TInternalScalar>
inline
bool
DGtal::FuzzySegmentComputer<TSpace, TInputPoint, TInternalScalar>::melkmanIsWellInitialized()  const
{
  return true;
}


//-----------------------------------------------------------------------------
template <typename TSpace, typename TInputPoint, typename TInternalScalar>
inline
double
DGtal::FuzzySegmentComputer<TSpace, TInputPoint, TInternalScalar>::melkmanMainDiagonal()  const
{
  return 0.0;
}


//-----------------------------------------------------------------------------
template <typename TSpace, typename TInputPoint, typename TInternalScalar>
inline
void
DGtal::FuzzySegmentComputer<TSpace, TInputPoint, TInternalScalar>::melkmanAddPoint(const Point &p)
{
  
}



//-----------------------------------------------------------------------------
template <typename TSpace, typename TInputPoint, typename TInternalScalar>
inline
bool
DGtal::FuzzySegmentComputer<TSpace, TInputPoint, TInternalScalar>::melkmanIsConvexValid(const std::deque<int> & D , float thick) const
{
  return true;
}
















///////////////////////////////////////////////////////////////////////////////
// Implementation of inline functions and external operators                 //

/**
 * Overloads 'operator<<' for displaying objects of class 'FuzzySegmentComputer'.
 * @param out the output stream where the object is written.
 * @param object the object of class 'FuzzySegmentComputer' to write.
 * @return the output stream after the writing.
 */
inline
std::ostream&
DGtal::operator<< ( std::ostream & out,
                  const FuzzySegmentComputer & object )
{
    object.selfDisplay ( out );
    return out;
}

//                                                                           //
///////////////////////////////////////////////////////////////////////////////


