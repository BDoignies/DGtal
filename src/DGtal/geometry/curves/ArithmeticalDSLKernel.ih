/**
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as
 *  published by the Free Software Foundation, either version 3 of the
 *  License, or  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 **/

/**
 * @file ArithmeticalDSLKernel.ih
 * @author Tristan Roussillon (\c tristan.roussillon@liris.cnrs.fr )
 * Laboratoire d'InfoRmatique en Image et Syst√®mes d'information - LIRIS (CNRS, UMR 5205), CNRS, France
 *
 * @date 2013/07/02
 *
 * Implementation of inline methods defined in ArithmeticalDSLKernel.h
 *
 * This file is part of the DGtal library.
 */


//////////////////////////////////////////////////////////////////////////////
#include <cstdlib>
//////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// IMPLEMENTATION of inline methods.
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// ----------------------------------------------------------------------------
template <typename TCoordinate, unsigned short adjacency>
template <typename TInteger>
inline
typename DGtal::ArithmeticalDSLKernel<TCoordinate,adjacency>::Vector 
DGtal::ArithmeticalDSLKernel<TCoordinate,adjacency>
::shift(const TInteger& a, const TInteger& b) 
{
  Vector res;
  if (b == NumberTraits<TInteger>::ZERO)
    {
      if (a == NumberTraits<TInteger>::ZERO)     //no octant
	res = Vector(NumberTraits<TCoordinate>::ZERO,NumberTraits<TCoordinate>::ZERO); 
      else if (a > NumberTraits<TInteger>::ZERO) //octant 2
	res = Vector(NumberTraits<TCoordinate>::ONE,NumberTraits<TCoordinate>::ZERO); 
      else // (a < 0)                            //octant 6
	res = Vector(-NumberTraits<TCoordinate>::ONE,NumberTraits<TCoordinate>::ZERO); 
    }
  else if (b > NumberTraits<TInteger>::ZERO)
    {
      if (a == NumberTraits<TInteger>::ZERO)     //octant 0 
	res = Vector(NumberTraits<TCoordinate>::ZERO,-NumberTraits<TCoordinate>::ONE); 
      else if (a > NumberTraits<TInteger>::ZERO)
	{
	  if (b > a)                             //octant 0
	    res = Vector(NumberTraits<TCoordinate>::ZERO,-NumberTraits<TCoordinate>::ONE); 
	  else                                   //octant 1
	    res = Vector(NumberTraits<TCoordinate>::ONE,NumberTraits<TCoordinate>::ZERO); 
	}
      else // (a < 0)
	{ 
	  if (b >= -a)                           //octant 7
	    res = Vector(NumberTraits<TCoordinate>::ZERO,-NumberTraits<TCoordinate>::ONE); 
	  else                                   //octant 6
	    res = Vector(-NumberTraits<TCoordinate>::ONE,NumberTraits<TCoordinate>::ZERO); 
	}	    
    }
  else // (b < 0) 
    { 
      if (a == NumberTraits<TInteger>::ZERO)      //octant 4
	res = Vector(NumberTraits<TCoordinate>::ZERO,NumberTraits<TCoordinate>::ONE); 
      else if (a > NumberTraits<TInteger>::ZERO)
	{
	  if (-b >= a)                            //octant 3
	    res = Vector(NumberTraits<TCoordinate>::ZERO,NumberTraits<TCoordinate>::ONE); 
	  else                                    //octant 2
	    res = Vector(NumberTraits<TCoordinate>::ONE,NumberTraits<TCoordinate>::ZERO); 
	}
      else // (a < 0) 
	{
	  if (-b > -a)                            //octant 4
	    res = Vector(NumberTraits<TCoordinate>::ZERO,NumberTraits<TCoordinate>::ONE); 
	  else                                    //octant 5
	    res = Vector(-NumberTraits<TCoordinate>::ONE,NumberTraits<TCoordinate>::ZERO); 
	}
    }
  return res; 
}

// ----------------------------------------------------------------------------
template <typename TCoordinate, unsigned short adjacency>
template <typename TInteger>
inline
typename DGtal::ArithmeticalDSLKernel<TCoordinate,adjacency>::Steps 
DGtal::ArithmeticalDSLKernel<TCoordinate,adjacency>
::steps(const TInteger& a, const TInteger& b) 
{
  Steps steps; 
  if (b == NumberTraits<TInteger>::ZERO)
    {
      if (a == NumberTraits<TInteger>::ZERO) 
	{ //no octant
	  steps.first = Vector(NumberTraits<TCoordinate>::ZERO,NumberTraits<TCoordinate>::ZERO); 
	  steps.second = Vector(NumberTraits<TCoordinate>::ZERO,NumberTraits<TCoordinate>::ZERO); 
	}
      else if (a > NumberTraits<TInteger>::ZERO)
	{ //octant 2
	  steps.first = Vector(NumberTraits<TCoordinate>::ZERO,NumberTraits<TCoordinate>::ONE); 
	  steps.second = Vector(NumberTraits<TCoordinate>::ZERO,NumberTraits<TCoordinate>::ZERO); 
	}
      else // (a < 0)
	{ //octant 6
	  steps.first = Vector(NumberTraits<TCoordinate>::ZERO,-NumberTraits<TCoordinate>::ONE); 
	  steps.second = Vector(NumberTraits<TCoordinate>::ZERO,NumberTraits<TCoordinate>::ZERO); 
	}	    
    }
  else if (b > NumberTraits<TInteger>::ZERO)
    {
      if (a == NumberTraits<TInteger>::ZERO)
	{ //octant 0
	  steps.first = Vector(NumberTraits<TCoordinate>::ONE,NumberTraits<TCoordinate>::ZERO); 
	  steps.second = Vector(NumberTraits<TCoordinate>::ZERO,NumberTraits<TCoordinate>::ZERO); 
	}
      else if (a > NumberTraits<TInteger>::ZERO)
	{
	  if (b == a)
	    {
	      steps.first = Vector(NumberTraits<TCoordinate>::ONE,NumberTraits<TCoordinate>::ONE); 
	      steps.second = Vector(NumberTraits<TCoordinate>::ZERO,NumberTraits<TCoordinate>::ZERO); 
	    }
	  else if (b > a)
	    { //octant 0
	      steps.first = Vector(NumberTraits<TCoordinate>::ONE,NumberTraits<TCoordinate>::ZERO); 
	      steps.second = Vector(NumberTraits<TCoordinate>::ONE,NumberTraits<TCoordinate>::ONE); 
	    }
	  else // (b < a)
	    { //octant 1
	      steps.second = Vector(NumberTraits<TCoordinate>::ZERO,NumberTraits<TCoordinate>::ONE); 
	      steps.first = Vector(NumberTraits<TCoordinate>::ONE,NumberTraits<TCoordinate>::ONE); 
	    }
	}
      else //(a < 0)
	{ 
	  if (b == -a)
	    {
	      steps.first = Vector(NumberTraits<TCoordinate>::ONE,-NumberTraits<TCoordinate>::ONE); 
	      steps.second = Vector(NumberTraits<TCoordinate>::ZERO,NumberTraits<TCoordinate>::ZERO); 
	    }
	  else if (b > -a)
	    { //octant 7
	      steps.second = Vector(NumberTraits<TCoordinate>::ONE,NumberTraits<TCoordinate>::ZERO); 
	      steps.first = Vector(NumberTraits<TCoordinate>::ONE,-NumberTraits<TCoordinate>::ONE); 
	    }
	  else // (b < -a)
	    { //octant 6
	      steps.first = Vector(NumberTraits<TCoordinate>::ZERO,-NumberTraits<TCoordinate>::ONE); 
	      steps.second = Vector(NumberTraits<TCoordinate>::ONE,-NumberTraits<TCoordinate>::ONE); 
	    }
	}	    
    }
  else // (b < 0)
    { 
      if (a == NumberTraits<TInteger>::ZERO)
	{ //octant 4
	  steps.first = Vector(-NumberTraits<TCoordinate>::ONE,NumberTraits<TCoordinate>::ZERO); 
	  steps.second = Vector(NumberTraits<TCoordinate>::ZERO,NumberTraits<TCoordinate>::ZERO); 
	}
      else if (a > NumberTraits<TInteger>::ZERO)
	{
	  if (-b == a)
	    {
	      steps.first = Vector(-NumberTraits<TCoordinate>::ONE,NumberTraits<TCoordinate>::ONE); 
	      steps.second = Vector(NumberTraits<TCoordinate>::ZERO,NumberTraits<TCoordinate>::ZERO); 
	    }
	  else if (-b > a)
	    { //octant 3
	      steps.second = Vector(-NumberTraits<TCoordinate>::ONE,NumberTraits<TCoordinate>::ZERO); 
	      steps.first = Vector(-NumberTraits<TCoordinate>::ONE,NumberTraits<TCoordinate>::ONE); 
	    }
	  else // (-b < a)
	    { //octant 2
	      steps.first = Vector(NumberTraits<TCoordinate>::ZERO,NumberTraits<TCoordinate>::ONE); 
	      steps.second = Vector(-NumberTraits<TCoordinate>::ONE,NumberTraits<TCoordinate>::ONE); 
	    }	    
	}
      else // (a < 0)
	{
	  if (-b == -a)
	    {
	      steps.first = Vector(-NumberTraits<TCoordinate>::ONE,-NumberTraits<TCoordinate>::ONE); 
	      steps.second = Vector(NumberTraits<TCoordinate>::ZERO,NumberTraits<TCoordinate>::ZERO); 
	    }
	  else if (-b > -a)
	    { //octant 4
	      steps.first = Vector(-NumberTraits<TCoordinate>::ONE,NumberTraits<TCoordinate>::ZERO); 
	      steps.second = Vector(-NumberTraits<TCoordinate>::ONE,-NumberTraits<TCoordinate>::ONE); 
	    }
	  else // (-b < -a)
	    { //octant 5
	      steps.second = Vector(NumberTraits<TCoordinate>::ZERO,-NumberTraits<TCoordinate>::ONE); 
	      steps.first = Vector(-NumberTraits<TCoordinate>::ONE,-NumberTraits<TCoordinate>::ONE); 
	    }
	}
    }
  return steps; 
}

// ----------------------------------------------------------------------------
template <typename TCoordinate, unsigned short adjacency>
template <typename TInteger>
inline
TInteger 
DGtal::ArithmeticalDSLKernel<TCoordinate,adjacency>
::norm(const TInteger& a, const TInteger& b) 
{
  if (b >= NumberTraits<TInteger>::ZERO)
    {
      if (a >= NumberTraits<TInteger>::ZERO)
	{
	  if (b >= a)
	    return b;
	  else 
	    return a; 
	}
      else 
	{
	  if (b >= -a)
	    return b;
	  else 
	    return -a; 
	}
    }
  else
    {
      if (a >= NumberTraits<TInteger>::ZERO)
	{
	  if (-b >= a)
	    return -b;
	  else 
	    return a; 
	}
      else 
	{
	  if (-b >= -a)
	    return -b;
	  else 
	    return -a; 
	}
    }
}


// ----------------------------------------------------------------------------
template <typename TCoordinate, unsigned short adjacency>
template <typename TInteger>
inline
typename DGtal::ArithmeticalDSLKernel<TCoordinate,adjacency>::Octant
DGtal::ArithmeticalDSLKernel<TCoordinate,adjacency>
::octant(const TInteger& a, const TInteger& b) 
{
  Octant res;
  
  if (b == NumberTraits<TInteger>::ZERO)
    {
      if (a == NumberTraits<TInteger>::ZERO) 
	{ //no octant
	  res = std::make_pair(-1,-1);
	}
      else if (a > NumberTraits<TInteger>::ZERO)
	{ //octant 1,2
	  res = std::make_pair(1,2);
	}
      else // (a < 0)
	{ //octant 5,6
	  res = std::make_pair(5,6);
	}	    
    }
  else if (b > NumberTraits<TInteger>::ZERO)
    {
      if (a == NumberTraits<TInteger>::ZERO)
	{ //octant 0,7
	  res = std::make_pair(0,7);
	}
      else if (a > NumberTraits<TInteger>::ZERO)
	{
	  if (b == a)
	    { //octant 0,1
	      res = std::make_pair(0,1);
	    }
	  else if (b > a)
	    { //octant 0
	      res = std::make_pair(0,0);
	    }
	  else // (b < a)
	    { //octant 1
	      res = std::make_pair(1,1);
	    }
	}
      else //(a < 0)
	{ 
	  if (b == -a)
	    {
	      res = std::make_pair(6,7);
	    }
	  else if (b > -a)
	    { //octant 7
	      res = std::make_pair(7,7);
	    }
	  else // (b < -a)
	    { //octant 6
	      res = std::make_pair(6,6);
	    }
	}	    
    }
  else // (b < 0)
    { 
      if (a == NumberTraits<TInteger>::ZERO)
	{ //octant 3,4
	  res = std::make_pair(3,4);
	}
      else if (a > NumberTraits<TInteger>::ZERO)
	{
	  if (-b == a)
	    {
	      res = std::make_pair(2,3);
	    }
	  else if (-b > a)
	    { //octant 3
	      res = std::make_pair(3,3);
	    }
	  else // (-b < a)
	    { //octant 2
	      res = std::make_pair(2,2);
	    }	    
	}
      else // (a < 0)
	{
	  if (-b == -a)
	    {
	      res = std::make_pair(4,5);
	    }
	  else if (-b > -a)
	    { //octant 4
	      res = std::make_pair(4,4);
	    }
	  else // (-b < -a)
	    { //octant 5
	      res = std::make_pair(5,5);
	    }
	}
    }


  return res;
  

}

// ----------------------------------------------------------------------------
template <typename TCoordinate>
template <typename TInteger>
inline
typename DGtal::ArithmeticalDSLKernel<TCoordinate,4>::Vector 
DGtal::ArithmeticalDSLKernel<TCoordinate,4>
::shift(const TInteger& a, const TInteger& b) 
{
  Vector res; 
  if (b == NumberTraits<TInteger>::ZERO)
    {
      if (a == NumberTraits<TInteger>::ZERO)
	{ //no quadrant
	  res = Vector(NumberTraits<TCoordinate>::ZERO,NumberTraits<TCoordinate>::ZERO); 
	}
      else if (a > NumberTraits<TInteger>::ZERO)
	{ //quadrant 1
	  res = Vector(NumberTraits<TCoordinate>::ONE,NumberTraits<TCoordinate>::ONE); 
	}
      else // (a < 0)
	{ //quadrant 3
	  res = Vector(-NumberTraits<TCoordinate>::ONE,-NumberTraits<TCoordinate>::ONE); 
	}	    
    }
  else if (b > NumberTraits<TInteger>::ZERO)
    {
      if (a >= NumberTraits<TInteger>::ZERO)
	{ //quadrant 0
	  res = Vector(NumberTraits<TCoordinate>::ONE,-NumberTraits<TCoordinate>::ONE); 
	}
      else // (a < 0) 
	{ //quadrant 3
	  res = Vector(-NumberTraits<TCoordinate>::ONE,-NumberTraits<TCoordinate>::ONE); 
	}	    
    }
  else // (b < 0) 
    { 
      if (a > NumberTraits<TInteger>::ZERO)
	{ //quadrant 1
	  res = Vector(NumberTraits<TCoordinate>::ONE,NumberTraits<TCoordinate>::ONE); 
	}
      else // (a <= 0)
	{ //quadrant 2
	  res = Vector(-NumberTraits<TCoordinate>::ONE,NumberTraits<TCoordinate>::ONE); 
	}
    }
  return res; 
}

// ----------------------------------------------------------------------------
template <typename TCoordinate>
template <typename TInteger>
inline
typename DGtal::ArithmeticalDSLKernel<TCoordinate,4>::Steps 
DGtal::ArithmeticalDSLKernel<TCoordinate,4>
::steps(const TInteger& a, const TInteger& b) 
{
  Steps steps;
  if (b == NumberTraits<TInteger>::ZERO)
    {
      if (a == NumberTraits<TInteger>::ZERO)
	{ //no quadrant
	  steps.first = Vector(NumberTraits<TCoordinate>::ZERO,NumberTraits<TCoordinate>::ZERO); 
	  steps.second = Vector(NumberTraits<TCoordinate>::ZERO,NumberTraits<TCoordinate>::ZERO); 
	}
      else if (a > NumberTraits<TInteger>::ZERO)
	{ 
	  steps.first = Vector(NumberTraits<TCoordinate>::ZERO,NumberTraits<TCoordinate>::ONE); 
	  steps.second = Vector(NumberTraits<TCoordinate>::ZERO,NumberTraits<TCoordinate>::ZERO); 
	}
      else // (a < 0)
	{ 
	  steps.first = Vector(NumberTraits<TCoordinate>::ZERO,-NumberTraits<TCoordinate>::ONE); 
	  steps.second = Vector(NumberTraits<TCoordinate>::ZERO,NumberTraits<TCoordinate>::ZERO); 
	}	    
    }
  else if (b > NumberTraits<TInteger>::ZERO)
    {
      if (a == NumberTraits<TInteger>::ZERO)
	{
	  steps.first = Vector(NumberTraits<TCoordinate>::ONE,NumberTraits<TCoordinate>::ZERO); 
	  steps.second = Vector(NumberTraits<TCoordinate>::ZERO,NumberTraits<TCoordinate>::ZERO); 
	}
      else if (a > NumberTraits<TInteger>::ZERO)
	{ //quadrant 0
	  steps.first = Vector(NumberTraits<TCoordinate>::ONE,NumberTraits<TCoordinate>::ZERO); 
	  steps.second = Vector(NumberTraits<TCoordinate>::ZERO,NumberTraits<TCoordinate>::ONE); 
	}
      else // (a < 0) 
	{ //quadrant 3
	  steps.second = Vector(NumberTraits<TCoordinate>::ONE,NumberTraits<TCoordinate>::ZERO); 
	  steps.first = Vector(NumberTraits<TCoordinate>::ZERO,-NumberTraits<TCoordinate>::ONE); 
	}	    
    }
  else // (b < 0) 
    { 
      if (a == NumberTraits<TInteger>::ZERO)
	{
	  steps.first = Vector(-NumberTraits<TCoordinate>::ONE,NumberTraits<TCoordinate>::ZERO); 
	  steps.second = Vector(NumberTraits<TCoordinate>::ZERO,NumberTraits<TCoordinate>::ZERO); 
	}
      else if (a > NumberTraits<TInteger>::ZERO)
	{ //quadrant 1
	  steps.second = Vector(-NumberTraits<TCoordinate>::ONE,NumberTraits<TCoordinate>::ZERO); 
	  steps.first = Vector(NumberTraits<TCoordinate>::ZERO,NumberTraits<TCoordinate>::ONE); 
	}
      else // (a < 0)
	{ //quadrant 2
	  steps.first = Vector(-NumberTraits<TCoordinate>::ONE,NumberTraits<TCoordinate>::ZERO); 
	  steps.second = Vector(NumberTraits<TCoordinate>::ZERO,-NumberTraits<TCoordinate>::ONE); 
	}
    }
  return steps; 
}

// ----------------------------------------------------------------------------
template <typename TCoordinate>
template <typename TInteger>
inline
TInteger 
DGtal::ArithmeticalDSLKernel<TCoordinate,4>
::norm(const TInteger& a, const TInteger& b) 
{
  if (b >= NumberTraits<TInteger>::ZERO)
    {
      if (a >= NumberTraits<TInteger>::ZERO)
	return b+a; 
     else 
       return b-a; 
    }
  else
    {
      if (a >= NumberTraits<TInteger>::ZERO)
	return -b+a; 
      else 
	return -b-a; 
    }
}
