/**
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as
 *  published by the Free Software Foundation, either version 3 of the
 *  License, or  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 **/

/**
 * @file ArithmeticalDSS.ih
 * @author Tristan Roussillon (\c tristan.roussillon@liris.cnrs.fr )
 * Laboratoire d'InfoRmatique en Image et Syst√®mes d'information - LIRIS (CNRS, UMR 5205), CNRS, France
 *
 * @date 2013/06/28
 *
 * Implementation of inline methods defined in ArithmeticalDSS.h
 *
 * This file is part of the DGtal library.
 */


//////////////////////////////////////////////////////////////////////////////
#include <cstdlib>
//////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// IMPLEMENTATION of inline methods.
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// ----------------------- Standard services ------------------------------

template <typename TC, typename TI, unsigned short adj>
inline
DGtal::ArithmeticalDSS<TC, TI, adj>
::ArithmeticalDSS(const Point& aPoint)
  : myF(aPoint), myL(aPoint), 
    myUf(aPoint), myUl(aPoint), 
    myLf(aPoint), myLl(aPoint), 
    myDSL( NumberTraits<TC>::ZERO, 
	   NumberTraits<TC>::ZERO, 
	   NumberTraits<TI>::ZERO, 
	   NumberTraits<TI>::ZERO, 
	   std::make_pair( Vector(NumberTraits<TC>::ZERO, NumberTraits<TC>::ZERO), 
			   Vector(NumberTraits<TC>::ZERO, NumberTraits<TC>::ZERO) ), 
	   Vector(NumberTraits<TC>::ZERO, NumberTraits<TC>::ZERO) )
{
}

template <typename TC, typename TI, unsigned short adj>
inline
DGtal::ArithmeticalDSS<TC, TI, adj>
::ArithmeticalDSS(const Coordinate& aA, const Coordinate& aB, 
		  const Integer& aLowerBound, const Integer& aUpperBound, 
		  const Point& aF, const Point& aL,
		  const Point& aUf, const Point& aUl,
		  const Point& aLf, const Point& aLl, 
		  const Steps& aSteps, const Vector& aShift)
  :
  myF(aF), myL(aL),
  myUf(aUf), myUl(aUl), myLf(aLf), myLl(aLl),
  myDSL( aA, aB, aLowerBound, aUpperBound, aSteps, aShift )
{
}

//-----------------------------------------------------------------------------
template <typename TC, typename TI, unsigned short adj>
inline
DGtal::ArithmeticalDSS<TC, TI, adj>
::ArithmeticalDSS(const Coordinate& aA, const Coordinate& aB, 
		  const Point& aF, const Point& aL,
		  const Point& aUf, const Point& aUl,
		  const Point& aLf, const Point& aLl)
  :
  myF(aF), myL(aL),
  myUf(aUf), myUl(aUl), myLf(aLf), myLl(aLl),
  myDSL( aA, aB, DSL::remainder( aA, aB, aUf ) )
{
}

//-----------------------------------------------------------------------------
template <typename TC, typename TI, unsigned short adj>
inline
DGtal::ArithmeticalDSS<TC, TI, adj>
::ArithmeticalDSS(const Point& aF, const Point& aL, 
		  const bool& areOnTheUpperLine)
  : myDSL( NumberTraits<TC>::ZERO, NumberTraits<TC>::ZERO, NumberTraits<TI>::ZERO )
{
  typedef DGtal::ArithmeticalDSSFactory<TC, TI, adj> Factory; 

  if (areOnTheUpperLine)
    *this = Factory::createPattern(aF, aL); 
  else 
    *this = Factory::createReversedPattern(aF, aL); 
}

//-----------------------------------------------------------------------------
template <typename TC, typename TI, unsigned short adj>
template <typename Iterator>
inline
DGtal::ArithmeticalDSS<TC, TI, adj>
::ArithmeticalDSS(const Iterator& aItb, const Iterator& aIte)  throw( InputException )
  : myDSL( NumberTraits<TC>::ZERO, NumberTraits<TC>::ZERO, NumberTraits<TI>::ZERO )
{
  if (aItb != aIte)
    {
      Iterator it = aItb; 
      //construction from the begin iterator
      Point p = *it; 
      *this = ArithmeticalDSS(p); 
      //extension
      for (++it; it != aIte; ++it)
	  extendFront(*it); 
    }
  else
    {
      throw InputException();
    }
}

//-----------------------------------------------------------------------------
template <typename TC, typename TI, unsigned short adj>
inline
DGtal::ArithmeticalDSS<TC, TI, adj>
::ArithmeticalDSS(const ArithmeticalDSS<TC, TI, adj>& aOther)
  : 
  myF(aOther.myF), myL(aOther.myL),
  myUf(aOther.myUf), myUl(aOther.myUl), myLf(aOther.myLf), myLl(aOther.myLl),
  myDSL(aOther.myDSL)
{}

//-----------------------------------------------------------------------------
template <typename TC, typename TI, unsigned short adj>
inline
DGtal::ArithmeticalDSS<TC, TI, adj>&
DGtal::ArithmeticalDSS<TC, TI, adj>
::operator=(const ArithmeticalDSS<TC, TI, adj>& aOther)
{
  if ( this != &aOther )
    {
      myF = aOther.myF;
      myL = aOther.myL;
      myUf = aOther.myUf;
      myLf = aOther.myLf;
      myUl = aOther.myUl;
      myLl = aOther.myLl;
      myDSL = aOther.myDSL; 
    }
  return *this;
}

//-----------------------------------------------------------------------------
template <typename TC, typename TI, unsigned short adj>
inline
DGtal::ArithmeticalDSS<TC, TI, adj>
DGtal::ArithmeticalDSS<TC, TI, adj>
::negate() const
{
  return ArithmeticalDSS(-myDSL.myA, -myDSL.myB, 
			 -myDSL.myUpperBound, -myDSL.myLowerBound, 
			 myL, myF, myLl, myLf, myUl, myUf, 
			 std::make_pair(-myDSL.mySteps.first, -myDSL.mySteps.second), 
			 -myDSL.myShift);  
}

//-----------------------------------------------------------------------------
template <typename TC, typename TI, unsigned short adj>
inline
bool
DGtal::ArithmeticalDSS<TC, TI, adj>
::equalsTo(const ArithmeticalDSS<TC, TI, adj>& aOther) const
{
  return ( (myUf == aOther.myUf) && 
	   (myUl == aOther.myUl) &&  
	   (myLf == aOther.myLf) &&  
	   (myLl == aOther.myLl) && 
	   (myF == aOther.myF) &&  
	   (myL == aOther.myL) &&
	   (myDSL.equalsTo(aOther.myDSL)) );
}

//-----------------------------------------------------------------------------
template <typename TC, typename TI, unsigned short adj>
inline
bool
DGtal::ArithmeticalDSS<TC, TI, adj>
::operator==(const ArithmeticalDSS<TC, TI, adj>& aOther) const
{
  return ( equalsTo(aOther) || equalsTo(aOther.negate()) ); 
}

//-----------------------------------------------------------------------------
template <typename TC, typename TI, unsigned short adj>
inline
bool
DGtal::ArithmeticalDSS<TC, TI, adj>
::operator!=(const ArithmeticalDSS<TC, TI, adj>& aOther) const
{
  return !( operator==(aOther) ); 
}

//-----------------------------------------------------------------------------
template <typename TC, typename TI, unsigned short adj>
inline
DGtal::ArithmeticalDSS<TC, TI, adj>::~ArithmeticalDSS()
{
}

//-----------------------------------------------------------------------------
template <typename TC, typename TI, unsigned short adj>
inline
bool
DGtal::ArithmeticalDSS<TC, TI, adj>::isValid() const
{
  return ArithmeticalDSSCheck::checkAll(*this); 
}

//-----------------------------------------------------------------------------
template <typename TC, typename TI, unsigned short adj>
inline
const typename DGtal::ArithmeticalDSS<TC, TI, adj>::DSL&
DGtal::ArithmeticalDSS<TC, TI, adj>::dsl() const
{
  return myDSL; 
}

//-----------------------------------------------------------------------------
template <typename TC, typename TI, unsigned short adj>
inline
typename DGtal::ArithmeticalDSS<TC, TI, adj>::Coordinate
DGtal::ArithmeticalDSS<TC, TI, adj>::a() const
{
  return myDSL.a(); 
}

//-----------------------------------------------------------------------------
template <typename TC, typename TI, unsigned short adj>
inline
typename DGtal::ArithmeticalDSS<TC, TI, adj>::Coordinate
DGtal::ArithmeticalDSS<TC, TI, adj>::b() const
{
  return myDSL.b(); 
}

//-----------------------------------------------------------------------------
template <typename TC, typename TI, unsigned short adj>
inline
typename DGtal::ArithmeticalDSS<TC, TI, adj>::Integer
DGtal::ArithmeticalDSS<TC, TI, adj>::mu() const
{
  return myDSL.mu(); 
}

//-----------------------------------------------------------------------------
template <typename TC, typename TI, unsigned short adj>
inline
typename DGtal::ArithmeticalDSS<TC, TI, adj>::Integer
DGtal::ArithmeticalDSS<TC, TI, adj>::omega() const
{
  return myDSL.omega(); 
}

//-----------------------------------------------------------------------------
template <typename TC, typename TI, unsigned short adj>
inline
typename DGtal::ArithmeticalDSS<TC, TI, adj>::Vector
DGtal::ArithmeticalDSS<TC, TI, adj>::shift() const
{
  return myDSL.shift(); 
}

//-----------------------------------------------------------------------------
template <typename TC, typename TI, unsigned short adj>
inline
typename DGtal::ArithmeticalDSS<TC, TI, adj>::Steps
DGtal::ArithmeticalDSS<TC, TI, adj>::steps() const
{
  return myDSL.steps(); 
}

//-----------------------------------------------------------------------------
template <typename TC, typename TI, unsigned short adj>
inline
typename DGtal::ArithmeticalDSS<TC, TI, adj>::Point
DGtal::ArithmeticalDSS<TC, TI, adj>::back() const
{
  return myF; 
}

//-----------------------------------------------------------------------------
template <typename TC, typename TI, unsigned short adj>
inline
typename DGtal::ArithmeticalDSS<TC, TI, adj>::Point
DGtal::ArithmeticalDSS<TC, TI, adj>::front() const
{
  return myL; 
}

//-----------------------------------------------------------------------------
template <typename TC, typename TI, unsigned short adj>
inline
typename DGtal::ArithmeticalDSS<TC, TI, adj>::Point
DGtal::ArithmeticalDSS<TC, TI, adj>::Uf() const
{
  return myUf; 
}

//-----------------------------------------------------------------------------
template <typename TC, typename TI, unsigned short adj>
inline
typename DGtal::ArithmeticalDSS<TC, TI, adj>::Point
DGtal::ArithmeticalDSS<TC, TI, adj>::Ul() const
{
  return myUl; 
}

//-----------------------------------------------------------------------------
template <typename TC, typename TI, unsigned short adj>
inline
typename DGtal::ArithmeticalDSS<TC, TI, adj>::Point
DGtal::ArithmeticalDSS<TC, TI, adj>::Lf() const
{
  return myLf; 
}

//-----------------------------------------------------------------------------
template <typename TC, typename TI, unsigned short adj>
inline
typename DGtal::ArithmeticalDSS<TC, TI, adj>::Point
DGtal::ArithmeticalDSS<TC, TI, adj>::Ll() const
{
  return myLl; 
}

//-----------------------------------------------------------------------------
template <typename TC, typename TI, unsigned short adj>
inline
typename DGtal::ArithmeticalDSS<TC, TI, adj>::Integer
DGtal::ArithmeticalDSS<TC, TI, adj>::remainder(const Point& aPoint) const
{
  return myDSL.remainder(aPoint); 
}

//-----------------------------------------------------------------------------
template <typename TC, typename TI, unsigned short adj>
inline
typename DGtal::ArithmeticalDSS<TC, TI, adj>::Integer
DGtal::ArithmeticalDSS<TC, TI, adj>::orthogonalPosition(const Point& aPoint) const
{
  return myDSL.orthogonalPosition(aPoint); 
}

//-----------------------------------------------------------------------------
template <typename TC, typename TI, unsigned short adj>
inline
typename DGtal::ArithmeticalDSS<TC, TI, adj>::Integer
DGtal::ArithmeticalDSS<TC, TI, adj>::position(const Point& aPoint) const
{
  return myDSL.position(aPoint); 
}

//-----------------------------------------------------------------------------
template <typename TC, typename TI, unsigned short adj>
inline
bool
DGtal::ArithmeticalDSS<TC, TI, adj>::before(const Point& aP1, const Point& aP2) const
{
  return myDSL.before(aP1, aP2); 
}

//-----------------------------------------------------------------------------
template <typename TC, typename TI, unsigned short adj>
inline
bool
DGtal::ArithmeticalDSS<TC, TI, adj>::beforeOrEqual(const Point& aP1, const Point& aP2) const
{
  return myDSL.beforeOrEqual(aP1, aP2); 
}

//-----------------------------------------------------------------------------
template <typename TC, typename TI, unsigned short adj>
inline
bool
DGtal::ArithmeticalDSS<TC, TI, adj>::isInDSL(const Point& aPoint) const
{
  return myDSL(aPoint); 
}

//-----------------------------------------------------------------------------
template <typename TC, typename TI, unsigned short adj>
inline
bool
DGtal::ArithmeticalDSS<TC, TI, adj>::isInDSS(const Point& aPoint) const
{
  if (isInDSL(aPoint))
    {
      Integer s = position(aPoint);
      Integer s1 = position(myF);
      Integer s2 = position(myL);

      if (s1 == s2)
	return (aPoint == myF); 
      else if (s1 < s2)
	return ( (s >= s1)&&(s <= s2) );
      else 
	return ( (s >= s2)&&(s <= s1) );
    }
  else 
    return false; 
}

//-----------------------------------------------------------------------------
template <typename TC, typename TI, unsigned short adj>
inline
bool
DGtal::ArithmeticalDSS<TC, TI, adj>::operator()(const Point& aPoint) const
{
  return isInDSS(aPoint); 
}

//-----------------------------------------------------------------------------
template <typename TC, typename TI, unsigned short adj>
inline
typename DGtal::ArithmeticalDSS<TC, TI, adj>::ConstIterator
DGtal::ArithmeticalDSS<TC, TI, adj>::begin() const
{
  return ConstIterator(&myDSL, myF);
}

//-----------------------------------------------------------------------------
template <typename TC, typename TI, unsigned short adj>
inline
typename DGtal::ArithmeticalDSS<TC, TI, adj>::ConstIterator
DGtal::ArithmeticalDSS<TC, TI, adj>::end() const
{
  ConstIterator it(&myDSL, myL); 
  it++; 
  return it;
}

//-----------------------------------------------------------------------------
template <typename TC, typename TI, unsigned short adj>
inline
typename DGtal::ArithmeticalDSS<TC, TI, adj>::ConstReverseIterator
DGtal::ArithmeticalDSS<TC, TI, adj>::rbegin() const
{
  return ConstReverseIterator( end() );
}

//-----------------------------------------------------------------------------
template <typename TC, typename TI, unsigned short adj>
inline
typename DGtal::ArithmeticalDSS<TC, TI, adj>::ConstReverseIterator
DGtal::ArithmeticalDSS<TC, TI, adj>::rend() const
{
  return ConstReverseIterator( begin() );
}

//-----------------------------------------------------------------------------
template <typename TC, typename TI, unsigned short adj>
inline
void
DGtal::ArithmeticalDSS<TC, TI, adj>::selfDisplay ( std::ostream & out ) const
{
  out << "[ArithmeticalDSS] ";
  out << myDSL; 
  out << "from " << myF << " to " << myL << std::endl; 
  out << "upper leaning points: " << myUf << " " << myUl << std::endl;  
  out << "lower leaning points: " << myLf << " " << myLl; 
}

//-----------------------------------------------------------------------------
template <typename TC, typename TI, unsigned short adj>
inline
unsigned short int
DGtal::ArithmeticalDSS<TC, TI, adj>::
isExtendableFront( const Point& aNewPoint ) const
{
  Vector step = aNewPoint - myL; 
  Coordinate deviation = DGtal::ArithmeticalDSLKernel<TC,adj>::norm(step[0], step[1]);
 
  //if the two last points are confounded OK
  if (deviation == NumberTraits<Coordinate>::ZERO) 
    return 9; 

  //if the two last points are not connected KO 
  else if (deviation > NumberTraits<Coordinate>::ONE) 
    return 0;

  //if the first step does not exist yet OK
  else if ( (myDSL.mySteps.first[0] == NumberTraits<Coordinate>::ZERO)
	    &&(myDSL.mySteps.first[1] == NumberTraits<Coordinate>::ZERO) ) 
    return 1; 

  //if the first step exists and
  //if the second step does not exist
  else if ( (myDSL.mySteps.second[0] == NumberTraits<Coordinate>::ZERO)
	    &&(myDSL.mySteps.second[1] == NumberTraits<Coordinate>::ZERO) )
    {
      //if the first step exists and is repeated OK
      if (step == myDSL.mySteps.first) 
  	return 2; 
      else 
  	{
	  //if the two steps are compatible OK
	  Vector v = step - myDSL.mySteps.first; 
	  if ( DGtal::ArithmeticalDSLKernel<TC,DGtal::ArithmeticalDSLKernel<TC,adj>::BackgroundAdjacency>
	       ::norm(v[0], v[1]) == NumberTraits<Coordinate>::ONE )
	    {
	      Integer r = remainder(aNewPoint);
	      //if weakly exterior on the left 
	      if (r == myDSL.myLowerBound-NumberTraits<Integer>::ONE)
		return 3;
	      //if weakly exterior on the right
	      else 
		{
		  ASSERT(r == myDSL.myUpperBound+NumberTraits<Integer>::ONE); 
		  return 4;
		}
	    }
  	  else
	    return 0; 
  	}
    }
  //if the two steps are initialized 
  else 
    {
      //if there are only two steps
      if ( (step == myDSL.mySteps.first) || (step == myDSL.mySteps.second ) )
  	{
      	Integer r = remainder(aNewPoint);

  	//if strongly exterior KO
  	if ( (r < myDSL.myLowerBound-NumberTraits<Integer>::ONE)
	     ||(r > myDSL.myUpperBound+NumberTraits<Integer>::ONE) )
  	  return 0;
  	//otherwise OK
  	else 
  	  { 
  	    if (r == myDSL.myLowerBound)
  	      return 5; 
  	    else if (r == myDSL.myUpperBound)
  	      return 6;
  	    else if (r == myDSL.myLowerBound-NumberTraits<Integer>::ONE)
  	      return 7;
  	    else if (r == myDSL.myUpperBound+NumberTraits<Integer>::ONE)
  	      return 8;
  	    else 
  	      return 9; 
  	  }
  	} 
      //if there are more than two steps KO
      else  
  	return 0;
  }
}

//-----------------------------------------------------------------------------
template <typename TC, typename TI, unsigned short adj>
inline
unsigned short int
DGtal::ArithmeticalDSS<TC, TI, adj>::
isExtendableBack( const Point& aNewPoint ) const
{
  return negate().isExtendableFront( aNewPoint ); 
}

//-----------------------------------------------------------------------------
template <typename TC, typename TI, unsigned short adj>
inline
bool
DGtal::ArithmeticalDSS<TC, TI, adj>::
extendFront( const Point& aNewPoint )
{
  //true if the DSS can be extended to aNewPoint
  //false otherwise
  bool flag = true; 
 
  //code that tells how to update the DSS
  unsigned short int res = isExtendableFront(aNewPoint);

  switch (res)
    {
    case 1: //first step init
      myDSL.mySteps.first[0] = (aNewPoint[0] - myL[0]); 
      myDSL.mySteps.first[1] = (aNewPoint[1] - myL[1]); 
      myDSL.myA = myDSL.mySteps.first[1]; 
      myDSL.myB = myDSL.mySteps.first[0]; 
      myDSL.myLowerBound = remainder(myUf); //myUf doesn't change
      myDSL.myUpperBound = remainder(myLf); //myLf doesn't change
      myL = aNewPoint; 
      myUl = aNewPoint; 
      myLl = aNewPoint;
      myDSL.myShift = DGtal::ArithmeticalDSLKernel<TC,adj>::shift(myDSL.myA, myDSL.myB); 
      break; 
    case 2: //first step repeated
      myL = aNewPoint; 
      myUl = aNewPoint; 
      myLl = aNewPoint;
      break; 
    case 3: //second step init on the left
      myDSL.myA = ((myUl[1] - myUf[1]) + (aNewPoint[1] - myL[1]));  
      myDSL.myB = ((myUl[0] - myUf[0]) + (aNewPoint[0] - myL[0])); 
      myDSL.myLowerBound = remainder(myUf); //myUf doesn't change
      myDSL.myUpperBound = remainder(myLl); //myLl doesn't change
      myL = aNewPoint; 
      myUl = aNewPoint; 
      myLf = myLl; 
      myDSL.mySteps = DGtal::ArithmeticalDSLKernel<TC,adj>::steps(myDSL.myA, myDSL.myB);
      myDSL.myShift = myDSL.mySteps.first-myDSL.mySteps.second; 
      break; 
    case 4: //second step init on the right
      myDSL.myA = ((myLl[1] - myLf[1]) + (aNewPoint[1] - myL[1]));  
      myDSL.myB = ((myLl[0] - myLf[0]) + (aNewPoint[0] - myL[0])); 
      myDSL.myLowerBound = remainder(myUl); //myUl doesn't change
      myDSL.myUpperBound = remainder(myLf); //myLf doesn't change
      myL = aNewPoint; 
      myLl = aNewPoint; 
      myUf = myUl; 
      myDSL.mySteps = DGtal::ArithmeticalDSLKernel<TC,adj>::steps(myDSL.myA, myDSL.myB);
      myDSL.myShift = myDSL.mySteps.first-myDSL.mySteps.second; 
      break; 
    case 5: //weakly interior on the left
      myL = aNewPoint; 
      myUl = aNewPoint; 
      break; 
    case 6: //weakly interior on the right
      myL = aNewPoint; 
      myLl = aNewPoint; 
      break; 
    case 7: //weakly exterior on the left
      myDSL.myA = (aNewPoint[1] - myUf[1]);  
      myDSL.myB = (aNewPoint[0] - myUf[0]); 
      myDSL.myLowerBound = remainder(myUf); //myUf doesn't change
      myDSL.myUpperBound = remainder(myLl); //myLl doesn't change
      myL = aNewPoint; 
      myUl = aNewPoint; 
      myLf = myLl; 
      break; 
    case 8: //weakly exterior on the right
      myDSL.myA = (aNewPoint[1] - myLf[1]);  
      myDSL.myB = (aNewPoint[0] - myLf[0]); 
      myDSL.myLowerBound = remainder(myUl); //myUl doesn't change
      myDSL.myUpperBound = remainder(myLf); //myLf doesn't change
      myL = aNewPoint; 
      myLl = aNewPoint; 
      myUf = myUl; 
      break; 
    case 9: //strongly interior
      myL = aNewPoint; 
      break; 
    default: 
      flag = false; 
    }

  return flag; 
}

//-----------------------------------------------------------------------------
template <typename TC, typename TI, unsigned short adj>
inline
bool
DGtal::ArithmeticalDSS<TC, TI, adj>::
extendBack( const Point& aNewPoint )
{
  //call extendFront to the opposite
  DGtal::ArithmeticalDSS<TC, TI, adj> opposite = negate();
  bool flag = opposite.extendFront(aNewPoint);
 
  if (flag) //update '*this' if required
    *this = opposite.negate(); 

  return flag;  
}

//-----------------------------------------------------------------------------
template <typename TC, typename TI, unsigned short adj>
inline
bool
DGtal::ArithmeticalDSS<TC, TI, adj>::
retractFront()
{
  //call retractBack to the opposite
  DGtal::ArithmeticalDSS<TC, TI, adj> opposite = negate();
  bool hasBeenRetracted = opposite.retractBack();
 
  if (hasBeenRetracted) //update '*this' if required
    *this = opposite.negate(); 

  return hasBeenRetracted;  
} 

//-----------------------------------------------------------------------------
template <typename TC, typename TI, unsigned short adj>
inline
bool
DGtal::ArithmeticalDSS<TC, TI, adj>::
retractBack()
{
  if (myF == myL)
    return false; 
  else 
    {

      //next point computation
      Point next = *++begin(); 
      //if the next point is the last one
      if (next == myL)
	{
	  *this = ArithmeticalDSS(next); 
	  return true; 
	}
      //otherwise
      else
	{
	  //points used to update the DSS
	  Point bezoutPoint; 
	  
	  //leaning points / parameters update
	  if (myF == myUf)
	    {
	      bezoutPoint = myUf + myDSL.myShift; 
	      if ( retractUpdateLeaningPoints( Vector(myDSL.myB, myDSL.myA), 
					       next, myL, 
					       bezoutPoint, 
					       myLf, myLl, 
					       myUf, myUl ) )
		retractUpdateParameters( myLf - bezoutPoint ); 
	      
	    }
	  if (myF == myLf) 
	    {
	      bezoutPoint = myLf - myDSL.myShift; 
	      if ( retractUpdateLeaningPoints( Vector(myDSL.myB, myDSL.myA),
					       next, myL, 
					       bezoutPoint, 
					       myUf, myUl, 
					       myLf, myLl ) )
		retractUpdateParameters( myUf - bezoutPoint ); 
	    }

	  //first point update
	  myF = next; 

	  return true; 
	}
    }
} 

//-----------------------------------------------------------------------------
template <typename TC, typename TI, unsigned short adj>
inline
bool
DGtal::ArithmeticalDSS<TC, TI, adj>::
retractUpdateLeaningPoints( const Vector& aDirection, 
			    const Point& aFirst, 
			    const Point& aLast, 
			    const Point& aBezout, 
			    const Point& aFirstAtOppositeSide, 
			    Point& aLastAtOppositeSide, 
			    Point& aFirstAtRemovalSide,
			    const Point& aLastAtRemovalSide)
{
  if (aFirstAtOppositeSide == aLastAtOppositeSide)
    {
      Vector newDirection = aFirstAtOppositeSide - aBezout; 
      Coordinate k; //number of repetition of newDirection
      
      Vector toLastAtRemovalSide = aLastAtRemovalSide - aFirst; 
      k = DGtal::ArithmeticalDSLKernel<TC,adj>::norm(toLastAtRemovalSide[1], toLastAtRemovalSide[0])
	/ DGtal::ArithmeticalDSLKernel<TC,adj>::norm(newDirection[1], newDirection[0]); 
      aFirstAtRemovalSide = aLastAtRemovalSide - newDirection*k; 

      Vector toLast = aLast - aFirstAtOppositeSide; 
      k = DGtal::ArithmeticalDSLKernel<TC,adj>::norm(toLast[1], toLast[0])
	/ DGtal::ArithmeticalDSLKernel<TC,adj>::norm(newDirection[1], newDirection[0]);
      aLastAtOppositeSide = aFirstAtOppositeSide + newDirection*k; 
      return true; 
    }
  else 
    {
      aFirstAtRemovalSide += aDirection; 
      return false; 
    }
}

//-----------------------------------------------------------------------------
template <typename TC, typename TI, unsigned short adj>
inline
void
DGtal::ArithmeticalDSS<TC, TI, adj>::
retractUpdateParameters( const Vector& aNewDirection )
{
  //update of the slope
  myDSL.myA = aNewDirection[1]; 
  myDSL.myB = aNewDirection[0]; 
  //intercepts
  myDSL.myLowerBound = remainder(myUf); 
  myDSL.myUpperBound = remainder(myLf); 
  //update of the steps and shift
  if (myUf == myLf) 
    {
      ASSERT( myUl == myLl );
      myDSL.mySteps = DGtal::ArithmeticalDSLKernel<TC,adj>::steps(myDSL.myA, myDSL.myB); 
      myDSL.myShift = DGtal::ArithmeticalDSLKernel<TC,adj>::shift(myDSL.myA, myDSL.myB); 
    }
}

///////////////////////////////////////////////////////////////////////////////
//                     Drawing services                                      //
///////////////////////////////////////////////////////////////////////////////
//-----------------------------------------------------------------------------
template <typename TC, typename TI, unsigned short adj>
inline
typename DGtal::ArithmeticalDSS<TC, TI, adj>::PointD
DGtal::ArithmeticalDSS<TC, TI, adj>::
project( const Point& aM, double aR ) const
{
  //casts
  double aa = NumberTraits<Coordinate>::castToDouble(myDSL.myA);
  double bb = NumberTraits<Coordinate>::castToDouble(myDSL.myB);
  double xm = NumberTraits<Integer>::castToDouble(aM[0]);
  double ym = NumberTraits<Integer>::castToDouble(aM[1]);

  //computation
  double d2 = ( aa * aa + bb * bb );
  double s = bb * xm + aa * ym;
  double xp = ( bb * s + aa * aR ) / d2;
  double yp = ( aa * s - bb * aR ) / d2;
  
  return PointD( xp, yp );
}

//-----------------------------------------------------------------------------
template <typename TC, typename TI, unsigned short adj>
inline
typename DGtal::ArithmeticalDSS<TC, TI, adj>::PointD
DGtal::ArithmeticalDSS<TC, TI, adj>::
project( const Point& aM, const Point& aP ) const
{
  double r = NumberTraits<Integer>::castToDouble(remainder(aP));
  return project(aM,r);
}

//-----------------------------------------------------------------------------
template <typename TC, typename TI, unsigned short adj>
inline
std::string
DGtal::ArithmeticalDSS<TC, TI, adj>::
className() const
{
  return "ArithmeticalDSS";
}

///////////////////////////////////////////////////////////////////////////////
//                        Aliases                                            //
///////////////////////////////////////////////////////////////////////////////

//-----------------------------------------------------------------------------
template <typename TC, typename TI>
inline
DGtal::StandardDSS4<TC, TI>::
StandardDSS4(const typename Super::Coordinate& aA, const typename Super::Coordinate& aB, 
	     const typename Super::Point& aF, const typename Super::Point& aL,
	     const typename Super::Point& aUf, const typename Super::Point& aUl,
	     const typename Super::Point& aLf, const typename Super::Point& aLl)
  : Super(aA, aB, aF, aL, aUf, aUl, aLf, aLl) 
{}

//-----------------------------------------------------------------------------
template <typename TC, typename TI>
inline
DGtal::StandardDSS4<TC, TI>::
StandardDSS4(const typename Super::Point& aF, const typename Super::Point& aL, 
	     const bool& isOnTheUpperLine)
  : Super(aF, aL, isOnTheUpperLine) 
{}

//-----------------------------------------------------------------------------
template <typename TC, typename TI>
template<typename Iterator>
inline
DGtal::StandardDSS4<TC, TI>::
StandardDSS4(const Iterator& aItb, const Iterator& aIte) throw( InputException )
  : Super(aItb, aIte) 
{}

//-----------------------------------------------------------------------------
template <typename TC, typename TI>
inline
DGtal::StandardDSS4<TC, TI>::
StandardDSS4 ( const StandardDSS4 & aOther )
  : Super( aOther ) 
{} 

//-----------------------------------------------------------------------------
template <typename TC, typename TI>
inline
DGtal::StandardDSS4<TC, TI>& 
DGtal::StandardDSS4<TC, TI>::
operator= ( const StandardDSS4 & aOther )
{
  if (this != & aOther)
    Super::operator=( aOther );
  return *this;      
}

//-----------------------------------------------------------------------------
template <typename TC, typename TI>
inline
DGtal::NaiveDSS8<TC, TI>::
NaiveDSS8(const typename Super::Coordinate& aA, const typename Super::Coordinate& aB, 
	     const typename Super::Point& aF, const typename Super::Point& aL,
	     const typename Super::Point& aUf, const typename Super::Point& aUl,
	     const typename Super::Point& aLf, const typename Super::Point& aLl)
  : Super(aA, aB, aF, aL, aUf, aUl, aLf, aLl) 
{}

//-----------------------------------------------------------------------------
template <typename TC, typename TI>
inline
DGtal::NaiveDSS8<TC, TI>::
NaiveDSS8(const typename Super::Point& aF, const typename Super::Point& aL, 
	  const bool& isOnTheUpperLine)
  : Super(aF, aL, isOnTheUpperLine) 
{}

//-----------------------------------------------------------------------------
template <typename TC, typename TI>
template<typename Iterator>
inline
DGtal::NaiveDSS8<TC, TI>::
NaiveDSS8(const Iterator& aItb, const Iterator& aIte) throw( InputException )
  : Super(aItb, aIte) 
{}

//-----------------------------------------------------------------------------
template <typename TC, typename TI>
inline
DGtal::NaiveDSS8<TC, TI>::
NaiveDSS8 ( const NaiveDSS8 & aOther )
  : Super( aOther ) 
{} 

//-----------------------------------------------------------------------------
template <typename TC, typename TI>
inline
DGtal::NaiveDSS8<TC, TI>& 
DGtal::NaiveDSS8<TC, TI>::
operator= ( const NaiveDSS8 & aOther )
{
  if (this != & aOther)
    Super::operator=( aOther );
  return *this;      
}

///////////////////////////////////////////////////////////////////////////////
// Implementation of inline functions                                        //

template <typename TC, typename TI, unsigned short adj>
inline
std::ostream&
DGtal::operator<< ( std::ostream & out, 
		    const ArithmeticalDSS<TC, TI, adj> & object )
{
  object.selfDisplay( out );
  return out;
}

//                                                                           //
///////////////////////////////////////////////////////////////////////////////


