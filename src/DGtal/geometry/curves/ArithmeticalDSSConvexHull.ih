/**
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as
 *  published by the Free Software Foundation, either version 3 of the
 *  License, or  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 **/

/**
 * @file ArithmeticalDSSConvexHull.ih
 * @author Tristan Roussillon (\c tristan.roussillon@liris.cnrs.fr )
 * Laboratoire d'InfoRmatique en Image et Syst√®mes d'information - LIRIS (CNRS, UMR 5205), CNRS, France
 *
 * @date 2013/10/28
 *
 * Implementation of inline methods defined in ArithmeticalDSSConvexHull.h
 *
 * This file is part of the DGtal library.
 */


//////////////////////////////////////////////////////////////////////////////
#include <cstdlib>

#include "DGtal/geometry/curves/ArithmeticalDSSConvexHull.h"
//////////////////////////////////////////////////////////////////////////////

//----------------------------------------------------------------------------
template<typename DSL, typename OutputIterator>
inline
typename DSL::Vector 
DGtal::functions::
smartCH(const DSL& aDSL, 
	const typename DSL::Point& aFirstPoint, 
	const typename DSL::Position& aLength, 
	OutputIterator uIto, OutputIterator lIto)
{
  typedef typename DSL::Vector Vector; 
  typedef typename DSL::Position Position; 
  typedef typename DSL::Coordinate Coordinate; 

  //position functor
  functors::PositionFunctorFrom2DPoint<Vector,Position> position(aDSL.shift());     

  //steps
  Vector step = aDSL.steps().first; 
  Coordinate rStep = DSL::toCoordinate( aDSL.remainder(step) ); 
  Vector shift = -aDSL.shift(); 
  Coordinate rShift = DSL::toCoordinate( aDSL.remainder(shift) );
    
  //intercept 
  Coordinate intercept = DSL::toCoordinate( aDSL.mu() - aDSL.remainder(aFirstPoint) ); 

  return smartCH(aFirstPoint, intercept, aLength, step, rStep, shift, rShift, position, uIto, lIto); 
}


//----------------------------------------------------------------------------
template<typename PointVector, typename Coordinate, typename Position, 
	 typename PositionFunctor, typename OutputIterator>
inline
PointVector
DGtal::functions::
smartCH(const PointVector& aFirstPoint, 
	const Coordinate& aRemainderBound, 
	const Position& aPositionBound, 
	const PointVector& aStep,
	const Coordinate& aRStep, 
	const PointVector& aShift, 
	const Coordinate& aRShift,  
	const PositionFunctor& aPositionFunctor, 
	OutputIterator uIto, OutputIterator lIto)
{
  BOOST_STATIC_ASSERT(( ConceptUtils::SameType<Coordinate, typename PointVector::Coordinate>::value )); 
  BOOST_STATIC_ASSERT(( ConceptUtils::SameType<Position, typename PositionFunctor::Position>::value )); 
  BOOST_CONCEPT_ASSERT(( boost_concepts::IncrementableIteratorConcept<OutputIterator> ));
  BOOST_CONCEPT_ASSERT(( boost_concepts::WritableIteratorConcept<OutputIterator,PointVector> ));
  ASSERT( aPositionBound > NumberTraits<Position>::ZERO ); 

  //----------------- init --------------------//
  //functors
  functors::StrictTruncationFunctor<Coordinate> sTruncation; 
  functors::LargeTruncationFunctor<Coordinate> lTruncation; 

  PointVector L, U, V; //point/vectors
  Coordinate rL, rU, rV; //remainders of the above point/vectors
  Coordinate q; //quotient of the divisions

  U = aFirstPoint; 
  rU = NumberTraits<Coordinate>::ZERO;
  *uIto++ = U; 

  L = U + aShift; 
  rL = rU + aRShift;
  *lIto++ = L; 

  q = (aRemainderBound - (rU + aRStep)) / aRShift;
  V = aStep + aShift * q;  
  rV = aRStep + q * aRShift; 

  //----------------- main --------------------//
  bool stop = false; 
  while ( (rV != 0) && (!stop) )
    {

      if (rV > 0)
	{

	  stop = smartCHNextVertex(aPositionBound, 
				   aRemainderBound,  
				   L, rL, U, rU, V, rV, 
				   lIto, aPositionFunctor,  
				   sTruncation, lTruncation); 
	}
      else
	{ //if (rV < 0)

	  stop = smartCHNextVertex(aPositionBound, 
				   aRemainderBound,
				   U, rU, L, rL, V, rV, 
				   uIto, aPositionFunctor, 
				   lTruncation, sTruncation); 
	}

      ASSERT( (V[0]*(L-U)[1] - V[1]*(L-U)[0]) == 1 ); //eq. 6 
      ASSERT( (stop) || ((!stop)&&(rL + rV < aRemainderBound)) ); //eq. 5
      ASSERT( (stop) || ((!stop)&&(rU + rV >= aRemainderBound)) ); //eq. 5
      ASSERT( (stop) || ((!stop)&&(aPositionFunctor(L) < aPositionFunctor(V))) ); //eq. 10
      ASSERT( (stop) || ((!stop)&&(aPositionFunctor(U) < aPositionFunctor(V))) ); //eq. 10
    }

  return V; 
}


//----------------------------------------------------------------------------
template<typename Position, typename Coordinate, typename PointVector, 
	 typename OutputIterator,
	 typename PositionFunctor,
	 typename TruncationFunctor1, typename TruncationFunctor2>
inline
bool
DGtal::functions::
smartCHNextVertex(const Position& positionBound,
		  const Coordinate& remainderBound,
		  PointVector& X,
		  Coordinate& rX, 
		  const PointVector& Y,
		  const Coordinate& rY, 
		  PointVector& V, 
		  Coordinate& rV,
		  OutputIterator ito,
		  const PositionFunctor& pos, 
		  const TruncationFunctor1& f1, 
		  const TruncationFunctor2& f2)
{
  ASSERT( positionBound > NumberTraits<Position>::ZERO ); 
  ASSERT( rV != NumberTraits<Coordinate>::ZERO ); 
  ASSERT( ((V[0]*(X-Y)[1] - V[1]*(X-Y)[0]) == 1)||
	  ((V[0]*(X-Y)[1] - V[1]*(X-Y)[0]) == -1) ); 
  BOOST_CONCEPT_ASSERT(( boost_concepts::IncrementableIteratorConcept<OutputIterator> ));
  BOOST_CONCEPT_ASSERT(( boost_concepts::WritableIteratorConcept<OutputIterator,PointVector> ));

  bool stop = false; 
  Coordinate q = f1(remainderBound - rX, rV); //first ray casting
  X +=  V * q;
  if ( pos(X) <= positionBound )
    {
      rX += q * rV; 
      *ito++ = X; 

      ASSERT( pos(V) <= pos(X) ); //eq. 9

      q = f2( remainderBound - (rY + rV), (rX - rY) ); //second ray casting
      V += (X - Y) * q;
      if ( (pos(V) + pos(Y)) <= positionBound ) 
	{
	  rV += q * (rX - rY); 
	}
      else
	{
	  stop = true;
	  PointVector XY = (X - Y);
	  V -= (XY) * q;
	  q = ( (positionBound - (pos(Y) + pos(V))) / pos(XY) );
	  if (q > 0) 
	    V += XY * q; 
	}
    }
  else
    {
      stop = true;
      X -= V * q;
      q = ( (positionBound - pos(X)) / pos(V) );
      ASSERT(q >= 0); 
      if (q > 0)
	{
	  X += V * q;
	  *ito++ = X; 
	}
      PointVector XY = (X - Y);
      q = ( (positionBound - (pos(Y) + pos(V))) / pos(XY) );
      if (q > 0) 
	V += XY * q; 
    }

  return stop; 
}


//----------------------------------------------------------------------------
template<typename DSS, typename OutputIterator>
inline
typename DSS::Vector 
DGtal::functions::
reverseSmartCH(const DSS& aDSS, 
	       const typename DSS::Position& aPositionBound, 
	       OutputIterator uIto, OutputIterator lIto)
{
  ASSERT( aDSS.position(aDSS.back()) <= aPositionBound ); 

  typedef typename DSS::Vector Vector; 
  typedef typename DSS::Position Position; 
      
  //position functor
  functors::PositionFunctorFrom2DPoint<Vector,Position> position(aDSS.dsl().shift());     
  //direction vector
  Vector v(aDSS.b(), aDSS.a());
 
  return reverseSmartCH( aDSS.Uf(), aDSS.Lf()-aDSS.dsl().shift(), v, 
			 aPositionBound, 
			 uIto, lIto, position ); 
} 


//----------------------------------------------------------------------------
template<typename PointVector, typename Position, 
	 typename OutputIterator, typename PositionFunctor>
inline
PointVector 
DGtal::functions::
reverseSmartCH(PointVector U, PointVector L, PointVector V, 
	       Position aBound, 
	       OutputIterator uIto, OutputIterator lIto, 
	       PositionFunctor position)
{
  BOOST_STATIC_ASSERT(( ConceptUtils::SameType<Position, typename PositionFunctor::Position>::value )); 
  BOOST_CONCEPT_ASSERT(( boost_concepts::IncrementableIteratorConcept<OutputIterator> ));
  BOOST_CONCEPT_ASSERT(( boost_concepts::WritableIteratorConcept<OutputIterator,PointVector> ));
  typedef typename PointVector::Coordinate Coordinate; 
  BOOST_STATIC_ASSERT(( ConceptUtils::SameType<Coordinate, typename PointVector::Coordinate>::value )); 

  ASSERT( (V[0]*(L-U)[1] - V[1]*(L-U)[0]) == NumberTraits<Coordinate>::ONE ); //eq. 6 

  //functors
  functors::StrictTruncationFunctor<Coordinate> sTruncation; 
  functors::LargeTruncationFunctor<Coordinate> lTruncation; 

  //----------------- init --------------------//
  *lIto++ = L; 
  *uIto++ = U; 
  bool stop = false; 
  if (position(L) >= position(U))
    {
      if ((position(U)+position(V)) <= aBound)
	stop = true; 
    }
  else 
    {
      if ((position(L)+position(V)) <= aBound)
	stop = true; 	
    }	

  //----------------- main --------------------//
  while ( (position(L) != position(U)) && (!stop) )
    {  
      if (position(L) > position(U))
	{
	  stop = smartCHPreviousVertex(L, U, V, aBound, lIto, sTruncation, lTruncation, position); 
	}
      else
	{
	  stop = smartCHPreviousVertex(U, L, V, aBound, uIto, sTruncation, lTruncation, position); 
	}
    }

  return V; 
}

//----------------------------------------------------------------------------
template<typename PointVector, typename Position, 
	 typename OutputIterator, 
	 typename TruncationFunctor1, typename TruncationFunctor2, 
	 typename PositionFunctor>
inline
bool 
DGtal::functions::
smartCHPreviousVertex(PointVector& X, const PointVector& Y, PointVector& V, const Position& aBound, 
		      OutputIterator ito, 
		      const TruncationFunctor1& f1, 
		      const TruncationFunctor2& f2, 
		      const PositionFunctor& position)
{
  BOOST_CONCEPT_ASSERT(( boost_concepts::IncrementableIteratorConcept<OutputIterator> ));
  BOOST_CONCEPT_ASSERT(( boost_concepts::WritableIteratorConcept<OutputIterator,PointVector> ));
  typedef PointVector Vector; 

  //pre-conditions
  ASSERT(position(X) > position(Y)); 
  ASSERT(position(X) < position(V)); //eq 10
  ASSERT(position(Y) < position(V)); //eq 10

  bool stop = false; 

  //update V
  Vector XY = X-Y; 
  Position q = f1( (position(V)-position(Y)), position(XY) ); 
  ASSERT(q > 0); 
  V -= q * XY; 
  ASSERT(position(V) <= position(X)); //eq 9 (NB: equality at position 0)
  if (position(Y) + position(V) >= aBound)
    {
      //update X
      q = f2(position(X), position(V)); 
      ASSERT(q >= 0); 
      X -= q * V; 
      ASSERT(position(X) < position(V)); //eq 10
	
      if (position(X) + position(V) < aBound)
	{
	  stop = true; 
	  q = (aBound - (position(X) + position(V))) / position(V); 
	  X += q * V; 
	}
      *ito++ = X; 
    }
  else
    {
      stop = true;
      //update V
      q = ( aBound - (position(Y) + position(V)) ) / position(XY);  
      ASSERT(q >= 0); 
      V += q * XY;
      //update X
      q = f2( (position(X) - aBound), position(V) ); 
      if (q >= 0) 
	{
	  X -= (q+1) * V; 
	  *ito++ = X;
	}
      //there is nothing else to do
      ASSERT(position(X) <= aBound); 
      ASSERT(position(Y) <= aBound); 
      ASSERT(position(Y) + position(V) <= aBound); 
    }

  return stop; 
}
