/**
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as
 *  published by the Free Software Foundation, either version 3 of the
 *  License, or  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 **/

/**
 * @file ScaleProfile.ih
 * @author Bertrand Kerautret (\c kerautre@loria.fr )
 * LORIA (CNRS, UMR 7503), University of Nancy, France
 *
 * @Jacques-Olivier Lachaud
 * 
 * @date 2015/11/08
 *
 * Implementation of inline methods defined in ScaleProfile.h
 *
 * This file is part of the DGtal library.
 */

///////////////////////////////////////////////////////////////////////////////
// IMPLEMENTATION of inline methods.
///////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
#include <cstdlib>
#include "DGtal/math/SimpleLinearRegression.h"
//////////////////////////////////////////////////////////////////////////////



///////////////////////////////////////////////////////////////////////////////
// Implementation of inline methods                                          //


DGtal::ScaleProfile::~ScaleProfile()
{
  if ( m_scales != 0 ) delete m_scales;
  if ( m_stats != 0 ) delete m_stats; 
}

DGtal::ScaleProfile::ScaleProfile()
  : m_scales( 0 ), m_stats( 0 ), m_profileDef(MEAN), m_storeValInStats(false)
{
}



DGtal::ScaleProfile::ScaleProfile(ProfileComputingType type)
  : m_scales( 0 ), m_stats( 0 ), m_profileDef(type), m_storeValInStats(false)
{
}



void 
DGtal::ScaleProfile::clear()
{
  if ( m_scales != 0 ) 
    {
      delete m_scales;
      m_scales = 0;
    }
  if ( m_stats != 0 ) 
    {
      delete m_stats;
      m_stats = 0;
    }
  
}


void 
DGtal::ScaleProfile::init( uint nb, bool storeValsInStats )
{
  clear();
  m_scales = new std::vector<float>( nb );
  m_stats = new std::vector< Statistic<float> >;
  m_storeValInStats= storeValsInStats;
  for ( uint i = 0; i < nb; ++i ){
    (*m_scales)[ i ] = (float) ( i + 1 );
    m_stats->push_back(Statistic<float>(storeValsInStats));
  }
}



void
DGtal::ScaleProfile::addValue( uint idx_scale, float value )
{
  ASSERT( isValid() && ( idx_scale < m_scales->size() ) );
  (*m_stats)[ idx_scale ].addValue( value );

}


void
DGtal::ScaleProfile::addStatistic
( uint idx_scale, const Statistic<float> & stat )
{
  ASSERT( isValid() && ( idx_scale < m_scales->size() ) );
  (*m_stats)[ idx_scale ] += stat;
}



void
DGtal::ScaleProfile::getProfile
( std::vector<double> & x, std::vector<double> & y ) const
{
  ASSERT( isValid() );
  for ( uint i = 0; i < m_scales->size(); ++i) 
    {
      x.push_back( log( (*m_scales)[ i ] ) );
      switch (m_profileDef){
      case MAX:
	y.push_back( log( (*m_stats)[ i ].max() ) );
	break;
      case MIN:
	y.push_back( log( (*m_stats)[ i ].min() ) );
	break;
      case MEDIAN:
	y.push_back (log( (*m_stats)[ i ].median() ));
	break;
      case MEAN:
      default: 
        y.push_back( log( (*m_stats)[ i ].mean() ) );
	break;

      }
    }
}


void 
DGtal::ScaleProfile::meaningfulScales
( std::vector< std::pair< uint, uint > > & intervals,
  uint min_width,
  double max_slope,
  double min_slope ) const
{
  std::vector<double> x;
  std::vector<double> y;
  this->getProfile( x, y );
  uint l = 0;
  for ( uint k = 1; k < x.size(); ++k )
    {
      double slope = ( y[ k ] - y[ k - 1 ] ) / ( x[ k ] - x[ k - 1 ] );
      if ( ( slope > max_slope ) 
	   || ( slope < min_slope ) 
	   || ( (k+1) == x.size() ) )
	{
	  if ( ( k - 1 - l ) >= min_width )
	    intervals.push_back( std::make_pair( l+1, k ) );
	  l = k;
	}
    }
}



std::pair<bool, double> 
DGtal::ScaleProfile::getSlopeFromMeaningfulScales(double max_slope, double min_slope, uint min_size) const {
  std::pair<bool, double> resuSlope(false, 0.0);
  std::vector< std::pair< uint, uint > > vectIntervals;
  this->meaningfulScales(vectIntervals, min_size,max_slope, min_slope);
  std::vector<double> vx;
  std::vector<double> vy;

  this->getProfile( vx, vy );
  // no meaningfulScale interval: 
  
  if(vectIntervals.size()!=0 && vectIntervals.at(0).first<vectIntervals.at(0).second ){
    resuSlope.first=true;
  }else{
    std::pair<uint, uint> interAll(1, vx.size());
    vectIntervals.push_back(interAll); 
  }
  SimpleLinearRegression SLR;


  uint mfsBeg = vectIntervals.at(0).first-1;
  uint mfsEnd = vectIntervals.at(0).second-1;


// Only two sampled points
  if ( mfsEnd-mfsBeg == 1 ){
    Z2i::RealPoint pt1(vx.at(mfsBeg),vy.at(mfsBeg));
    Z2i::RealPoint pt2(vx.at(mfsEnd),vy.at(mfsEnd));
    double slope = (pt2[1] - pt1[1])/(pt2[0] -pt1[0]);
    resuSlope.second = slope;
    return resuSlope;
  }
  for(unsigned int i=mfsBeg; i<=mfsEnd; i++){
    SLR.addSample(vx.at(i), vy.at(i));
  }
  SLR.computeRegression();
  resuSlope.second = SLR.slope();

  return resuSlope;
}

uint
DGtal::ScaleProfile::noiseLevel
( uint min_width,
  double max_slope,
  double min_slope ) const
{
  std::vector< std::pair< uint, uint > > intervals;
  this->meaningfulScales( intervals, min_width, max_slope, min_slope );
  return ( intervals.size() != 0 )
    ? intervals[ 0 ].first
    : 0;
}


uint
DGtal::ScaleProfile::lowerBoundedNoiseLevel
( uint min_width,
  double max_slope,
  double min_slope,
  double lower_bound_at_scale_1,
  double lower_bound_slope ) const
{
  std::vector< std::pair< uint, uint > > intervals;
  this->meaningfulScales( intervals, min_width, max_slope, min_slope );
  std::vector<double> x;
  std::vector<double> y;
  this->getProfile( x, y );
  for ( uint i = 0; i < intervals.size(); ++i )
    {
      bool above = true;
      for ( uint k = intervals[ i ].first; ( k <= intervals[ i ].second ); ++k )
	{
	  if ( y[ k ] < ( lower_bound_at_scale_1 + lower_bound_slope*x[ k ] ) )
	    {
	      above = false;
	      break;
	    }
	}
      if ( above ) return intervals[ i ].first;
    }
  // Failure. No detected noise level.
  return 0;
}



void 
DGtal::ScaleProfile::stopStatsSaving()
{
  for ( uint i = 0; i < m_stats->size(); ++i ){
    ((*m_stats).at( i )).terminate();
  } 

}


inline
DGtal::ScaleProfile::ScaleProfile( const ScaleProfile & other ){
  if(other.m_stats!=0 && other.m_scales!=0){
    m_scales = new std::vector<float>( other.m_scales->size() );
    m_stats = new std::vector< Statistic<float> > ( other.m_scales->size());
    m_profileDef = other.m_profileDef;
    m_storeValInStats= other.m_storeValInStats;
    for ( uint i = 0; i < other.m_scales->size(); ++i ){
      (*m_scales)[ i ] = (*other.m_scales)[i];
      (*m_stats)[ i ] = (*other.m_stats)[i];
    }
  }else{
    m_stats=0;
    m_scales=0;
    m_profileDef = other.m_profileDef;
    m_storeValInStats = false;
  }
}


inline
DGtal::ScaleProfile & 
DGtal::ScaleProfile::operator=
( const DGtal::ScaleProfile & other )
{
  if ( this != &other ) {
  if(other.m_stats!=0 && other.m_scales!=0){
    m_scales = new std::vector<float>( other.m_scales->size() );
    m_stats = new std::vector< Statistic<float> > ( other.m_scales->size());
    m_profileDef = other.m_profileDef;
    m_storeValInStats= other.m_storeValInStats;
    for ( uint i = 0; i < other.m_scales->size(); ++i ){
      (*m_scales)[ i ] = (*other.m_scales)[i];
      (*m_stats)[ i ] = (*other.m_stats)[i];
    }
  }else{
    m_stats=0;
    m_scales=0;
    m_profileDef = other.m_profileDef;
    m_storeValInStats=false;
  }
  }
   
  return *this;
}




template <typename Iterator>
inline
void 
DGtal::ScaleProfile::init( Iterator begin_scale, Iterator end_scale, bool storeValsInStats )
{
  clear();
  m_storeValInStats= storeValsInStats;
  m_scales = new std::vector<float>;
  m_stats = new std::vector< Statistic<float> >;
  
  uint nb = 0;
  for ( ; begin_scale != end_scale; ++begin_scale, ++nb ){
    m_scales->push_back( *begin_scale );
    m_stats->push_back(Statistic<float>( m_storeValInStats));
  }
}



void 
DGtal::ScaleProfile::selfDisplay( std::ostream& that_stream ) const
{
  that_stream << "[ScaleProfile]";
}


bool
DGtal::ScaleProfile::isValid() const
{
  return m_scales != 0;
}



///////////////////////////////////////////////////////////////////////////////
// Implementation of inline functions and external operators                 //

/**
 * Overloads 'operator<<' for displaying objects of class 'ScaleProfile'.
 * @param out the output stream where the object is written.
 * @param object the object of class 'ScaleProfile' to write.
 * @return the output stream after the writing.
 */
inline
std::ostream&
DGtal::operator<< ( std::ostream & out,
                  const ScaleProfile & object )
{
    object.selfDisplay ( out );
    return out;
}

inline
void 
DGtal::ScaleProfile::setProfileDef(ProfileComputingType type){
  ASSERT(m_profileDef==MEAN || m_profileDef==MAX || m_profileDef==MIN || m_profileDef==MEDIAN);
  m_profileDef = type; 
}
    

//                                                                           //
///////////////////////////////////////////////////////////////////////////////


