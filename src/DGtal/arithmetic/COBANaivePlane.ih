/**
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as
 *  published by the Free Software Foundation, either version 3 of the
 *  License, or  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 **/

/**
 * @file COBANaivePlane.ih
 * @author Jacques-Olivier Lachaud (\c jacques-olivier.lachaud@univ-savoie.fr )
 * Laboratory of Mathematics (CNRS, UMR 5127), University of Savoie, France
 *
 * @date 2012/09/20
 *
 * Implementation of inline methods defined in COBANaivePlane.h
 *
 * This file is part of the DGtal library.
 */


//////////////////////////////////////////////////////////////////////////////
#include <cstdlib>
//////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// IMPLEMENTATION of inline methods.
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// ----------------------- Standard services ------------------------------

//-----------------------------------------------------------------------------
template <typename TSpace, typename TInternalInteger>
inline
DGtal::COBANaivePlane<TSpace, TInternalInteger>::
~COBANaivePlane()
{ // Nothing to do.
}
//-----------------------------------------------------------------------------
template <typename TSpace, typename TInternalInteger>
inline
DGtal::COBANaivePlane<TSpace, TInternalInteger>::
COBANaivePlane()
  : myG( NumberTraits<TInternalInteger>::ZERO )
{ // Object is invalid
}
//-----------------------------------------------------------------------------
template <typename TSpace, typename TInternalInteger>
inline
DGtal::COBANaivePlane<TSpace, TInternalInteger>::
COBANaivePlane( const COBANaivePlane & other )
  : myAxis( other.myAxis ),
    myG( other.myG ),
    myWidth( other.myWidth ),
    myState( other.myState ),
    myCst1( other.myCst1 ),
    myCst2( other.myCst2 )
{
}
//-----------------------------------------------------------------------------
template <typename TSpace, typename TInternalInteger>
inline
DGtal::COBANaivePlane<TSpace, TInternalInteger> &
DGtal::COBANaivePlane<TSpace, TInternalInteger>::
operator=( const COBANaivePlane & other )
{
  if ( this != &other )
    {
      myAxis = other.myAxis;
      myG = other.myG;
      myWidth = other.myWidth;
      myState = other.myState;
      myCst1 = other.myCst1;
      myCst2 = other.myCst2;
    }
  return *this;
}
//-----------------------------------------------------------------------------
template <typename TSpace, typename TInternalInteger>
inline
typename DGtal::COBANaivePlane<TSpace, TInternalInteger>::MyIntegerComputer &
DGtal::COBANaivePlane<TSpace, TInternalInteger>::
ic() const
{
  return myState.cip.ic();
}
//-----------------------------------------------------------------------------
template <typename TSpace, typename TInternalInteger>
inline
void
DGtal::COBANaivePlane<TSpace, TInternalInteger>::
clear()
{
  myG = NumberTraits< InternalInteger >::ZERO;
  myPointSet.clear();
  myState.cip.clear();
}
//-----------------------------------------------------------------------------
template <typename TSpace, typename TInternalInteger>
inline
void
DGtal::COBANaivePlane<TSpace, TInternalInteger>::
init( Dimension axis, InternalInteger diameter, 
      const Point & firstPoint,
      InternalInteger widthNumerator,
      InternalInteger widthDenominator )
{
  clear();
  myAxis = axis;
  myWidth[ 0 ] = widthNumerator;
  myWidth[ 1 ] = widthDenominator;
  // initialize the grid step.
  myG = 2*diameter;  myG *= diameter;  myG *= diameter;
  // initialize the search space as a square.
  myState.cip.pushBack( InternalPoint2( -myG, -myG ) ); 
  myState.cip.pushBack( InternalPoint2(  myG, -myG ) ); 
  myState.cip.pushBack( InternalPoint2(  myG,  myG ) ); 
  myState.cip.pushBack( InternalPoint2( -myG,  myG ) ); 
  computeCentroidAndNormal( myState );
  myPointSet.insert( firstPoint );
  ic().getDotProduct( myState.max, myState.N, firstPoint );
  myState.min = myState.max;
  myState.indMax = myState.indMin = myPointSet.begin();
  // Initializes some constants
  // _cst1 = ( (int) ceil( get_si( myG ) * myWidth ) + 1 );
  // _cst2 = ( (int) floor( get_si( myG ) * myWidth ) - 1 );
  myCst1 = ( ( myG * myWidth[ 0 ] - 1 ) / myWidth[ 1 ] ) + 2;
  myCst2 = ( ( myG * myWidth[ 0 ] )     / myWidth[ 1 ] ) - 1;
}
//-----------------------------------------------------------------------------
template <typename TSpace, typename TInternalInteger>
inline
typename DGtal::COBANaivePlane<TSpace, TInternalInteger>::Size
DGtal::COBANaivePlane<TSpace, TInternalInteger>::
size() const
{
  return myPointSet.size();
}
//-----------------------------------------------------------------------------
template <typename TSpace, typename TInternalInteger>
inline
typename DGtal::COBANaivePlane<TSpace, TInternalInteger>::Size
DGtal::COBANaivePlane<TSpace, TInternalInteger>::
complexity() const
{
  return myState.cip.size();
}
//-----------------------------------------------------------------------------
template <typename TSpace, typename TInternalInteger>
inline
bool
DGtal::COBANaivePlane<TSpace, TInternalInteger>::
operator()( const Point & p ) const
{
  ic().getDotProduct( _v, myState.N, p );
  return ( _v >= myState.min ) && ( _v <= myState.max );
}
//-----------------------------------------------------------------------------
template <typename TSpace, typename TInternalInteger>
inline
bool
DGtal::COBANaivePlane<TSpace, TInternalInteger>::
extendAsIs( const Point & p )
{ 
  bool ok = this->operator()( p );
  if ( ok ) myPointSet.insert( p );
  return ok;
}
//-----------------------------------------------------------------------------
template <typename TSpace, typename TInternalInteger>
inline
bool
DGtal::COBANaivePlane<TSpace, TInternalInteger>::
extend( const Point & p )
{
  // Check first if p is already a point of the plane.
  // Insert point into set (so as that iterators indMin and indMax are
  // correct).
  std::pair<Iterator,bool> itPair = myPointSet.insert( p );
  if ( ! itPair.second ) // already in set
    return true;
  // Check if p lies within the current bounds of the plane.
  _state.N = myState.N; 
  _state.min = myState.min; 
  _state.max = myState.max; 
  _state.indMin = myState.indMin; 
  _state.indMax = myState.indMax; 
  Iterator it2 = itPair.first; 
  ++it2; // go to next one.
  bool changed = updateMinMax( _state, itPair.first, it2 );
  // Check if point is already within bounds.
  if ( ! changed ) 
    {
      return true;
    }
  // Check if width is still ok
  if ( checkPlaneWidth( _state ) )
    {
      myState.min = _state.min;
      myState.max = _state.max;
      myState.indMin = _state.indMin;
      myState.indMax = _state.indMax;
      return true;
    }
  // We have to find a new normal. First, update gradient.
  computeGradient( _grad, _state );

  // Checks if we can change the normal so as to find another digital plane.
  if( ( ( _grad[ 0 ] == NumberTraits<InternalInteger>::ZERO )
	&& ( _grad[ 1 ] == NumberTraits<InternalInteger>::ZERO ) ) )
    {
      // Unable to update solution. Removes point from set.
      myPointSet.erase( itPair.first );
      return false;
    }

  // There is a gradient, tries to optimize.
  _state.cip = myState.cip;
  doubleCut( _grad, _state );

  // While at least 1 point left on the search space
  while ( ! _state.cip.empty() )
  {
    computeCentroidAndNormal( _state );
    // Calls oracle
    computeMinMax( _state, myPointSet.begin(), myPointSet.end() );
    // Check if width is now ok
    if ( checkPlaneWidth( _state ) )
      { // Found a plane.
        myState.min = _state.min;
        myState.max = _state.max;
        myState.indMin = _state.indMin;
        myState.indMax = _state.indMax;
        myState.cip.swap( _state.cip );
        myState.centroid = _state.centroid;
        myState.N = _state.N;
        return true;
      }

    // We have to find a new normal. First, update gradient.
    computeGradient( _grad, _state );

    // Checks if we can change the normal so as to find another digital plane.
    if ( ( ( _grad[ 0 ] == NumberTraits<InternalInteger>::ZERO )
           && ( _grad[ 1 ] == NumberTraits<InternalInteger>::ZERO ) ) )
      {
        // Unable to update solution. Removes point from set.
        break;
      }

    // There is a gradient, tries to optimize.
    doubleCut( _grad, _state );
  }
  // was unable to find a correct plane.
  myPointSet.erase( itPair.first );
  return false;
}



///////////////////////////////////////////////////////////////////////////////
// Interface - public :

/**
 * Writes/Displays the object on an output stream.
 * @param out the output stream where the object is written.
 */
template <typename TSpace, typename TInternalInteger>
inline
void
DGtal::COBANaivePlane<TSpace, TInternalInteger>::selfDisplay ( std::ostream & out ) const
{
  out << "[COBANaivePlane"
      << " axis=" << myAxis << " w=" << myWidth[ 0 ] << "/" << myWidth[ 1 ]
      << " size=" << size() << " complexity=" << complexity() << " N=" << myState.N << " ]";
}

/**
 * Checks the validity/consistency of the object.
 * @return 'true' if the object is valid, 'false' otherwise.
 */
template <typename TSpace, typename TInternalInteger>
inline
bool
DGtal::COBANaivePlane<TSpace, TInternalInteger>::isValid() const
{
  return myG != NumberTraits< InternalInteger >::ZERO;
}


///////////////////////////////////////////////////////////////////////////////
// Internals
///////////////////////////////////////////////////////////////////////////////
//-----------------------------------------------------------------------------
template <typename TSpace, typename TInternalInteger>
inline
void
DGtal::COBANaivePlane<TSpace, TInternalInteger>::
computeCentroidAndNormal( State & state )
{
  if ( state.cip.empty() ) return;
  state.centroid = state.cip.centroid();
  ic().reduce( state.centroid );
  switch( myAxis ){
  case 0 : 
    state.N[ 0 ] = state.centroid[ 2 ] * myG;
    state.N[ 1 ] = state.centroid[ 0 ];
    state.N[ 2 ] = state.centroid[ 1 ];
    break;
  case 1 : 
    state.N[ 0 ] = state.centroid[ 0 ];
    state.N[ 1 ] = state.centroid[ 2 ] * myG;
    state.N[ 2 ] = state.centroid[ 1 ];
    break;
  case 2 : 
    state.N[ 0 ] = state.centroid[ 0 ];
    state.N[ 1 ] = state.centroid[ 1 ];
    state.N[ 2 ] = state.centroid[ 2 ] * myG;
    break;
  }

}
//-----------------------------------------------------------------------------
template <typename TSpace, typename TInternalInteger>
inline
void
DGtal::COBANaivePlane<TSpace, TInternalInteger>::
doubleCut( InternalPoint2 & grad, State & state )
{
  // 2 cuts on the search space:
  //  Gradient.p <= cst1 - _v
  // -Gradient.p <= cst2 + _v
  _v = myG * ( (*state.indMin)[ myAxis ] 
               - (*state.indMax)[ myAxis ] );
  state.cip.cut( HalfSpace( grad, myCst1 - _v ) );
  grad.negate();
  state.cip.cut( HalfSpace( grad, myCst2 + _v ) );
  grad.negate();
}

//-----------------------------------------------------------------------------
template <typename TSpace, typename TInternalInteger>
template <typename TInputIterator>
void
DGtal::COBANaivePlane<TSpace, TInternalInteger>::
computeMinMax( State & state, TInputIterator itB, TInputIterator itE )
{
  BOOST_CONCEPT_ASSERT(( boost::InputIterator< TInputIterator > ));
  BOOST_STATIC_ASSERT(( ConceptUtils::SameType<typename TInputIterator::value_type,Point>::value ));

  ASSERT( itB != itE );
  ic().getDotProduct( state.min, state.N, *itB );
  state.max = state.min;
  state.indMax = state.indMin = itB;
  ++itB;
  // look for the points defining the min dot product and the max dot product
  for ( ; itB != itE; ++itB )
    {
      ic().getDotProduct( _v, state.N, *itB );
      if ( _v > state.max ) 
	{ 
	  state.max = _v;  
	  state.indMax = itB;
	}
      else if ( _v < state.min )
	{
	  state.min = _v;
	  state.indMin = itB;
	}
    }
}
//-----------------------------------------------------------------------------
template <typename TSpace, typename TInternalInteger>
template <typename TInputIterator>
bool
DGtal::COBANaivePlane<TSpace, TInternalInteger>::
updateMinMax( State & state, TInputIterator itB, TInputIterator itE )
{
  BOOST_CONCEPT_ASSERT(( boost::InputIterator< TInputIterator > ));
  BOOST_STATIC_ASSERT(( ConceptUtils::SameType<typename TInputIterator::value_type,Point>::value ));

  bool changed = false;
  // look for the points defining the min dot product and the max dot product
  for ( ; itB != itE; ++itB )
    {
      ic().getDotProduct( _v, state.N, *itB );
      if ( _v > state.max ) 
	{ 
	  state.max = _v;  
	  state.indMax = itB;
          changed = true;
	}
      else if ( _v < state.min )
	{
	  state.min = _v;
	  state.indMin = itB;
          changed = true;
	}
    }
  return changed;
}
//-----------------------------------------------------------------------------
template <typename TSpace, typename TInternalInteger>
bool
DGtal::COBANaivePlane<TSpace, TInternalInteger>::
checkPlaneWidth( const State & state ) const
{
  _v = ic().abs( state.N[ myAxis ] );
  return ( ( state.max - state.min ) 
           < ( _v * myWidth[ 0 ] / myWidth[ 1 ] ) );
}
//-----------------------------------------------------------------------------
template <typename TSpace, typename TInternalInteger>
void
DGtal::COBANaivePlane<TSpace, TInternalInteger>::
computeGradient( InternalPoint2 & grad, const State & state ) const
{
  // computation of the gradient
  switch( myAxis ){
  case 0 : 
    grad[ 0 ] = (*state.indMin)[ 1 ] - (*state.indMax)[ 1 ];
    grad[ 1 ] = (*state.indMin)[ 2 ] - (*state.indMax)[ 2 ];
    break;
  case 1:
    grad[ 0 ] = (*state.indMin)[ 0 ] - (*state.indMax)[ 0 ];
    grad[ 1 ] = (*state.indMin)[ 2 ] - (*state.indMax)[ 2 ];
    break;
  case 2:
    grad[ 0 ] = (*state.indMin)[ 0 ] - (*state.indMax)[ 0 ];
    grad[ 1 ] = (*state.indMin)[ 1 ] - (*state.indMax)[ 1 ];
    break;
  }
}


///////////////////////////////////////////////////////////////////////////////
// Implementation of inline functions                                        //

template <typename TSpace, typename TInternalInteger>
inline
std::ostream&
DGtal::operator<< ( std::ostream & out, 
		  const COBANaivePlane<TSpace, TInternalInteger> & object )
{
  object.selfDisplay( out );
  return out;
}

//                                                                           //
///////////////////////////////////////////////////////////////////////////////


