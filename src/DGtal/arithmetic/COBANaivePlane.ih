/**
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as
 *  published by the Free Software Foundation, either version 3 of the
 *  License, or  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 **/

/**
 * @file COBANaivePlane.ih
 * @author Jacques-Olivier Lachaud (\c jacques-olivier.lachaud@univ-savoie.fr )
 * Laboratory of Mathematics (CNRS, UMR 5127), University of Savoie, France
 *
 * @date 2012/09/20
 *
 * Implementation of inline methods defined in COBANaivePlane.h
 *
 * This file is part of the DGtal library.
 */


//////////////////////////////////////////////////////////////////////////////
#include <cstdlib>
//////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// IMPLEMENTATION of inline methods.
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// ----------------------- Standard services ------------------------------

//-----------------------------------------------------------------------------
template <typename TSpace, typename TInternalInteger>
inline
DGtal::COBANaivePlane<TSpace, TInternalInteger>::
~COBANaivePlane()
{ // Nothing to do.
}
//-----------------------------------------------------------------------------
template <typename TSpace, typename TInternalInteger>
inline
DGtal::COBANaivePlane<TSpace, TInternalInteger>::
COBANaivePlane()
  : myG( NumberTraits<TInternalInteger>::ZERO )
{ // Object is invalid
}
//-----------------------------------------------------------------------------
template <typename TSpace, typename TInternalInteger>
inline
DGtal::COBANaivePlane<TSpace, TInternalInteger>::
COBANaivePlane( const COBANaivePlane & other )
  : myAxis( other.myAxis ),
    myG( other.myG ),
    myWidth( other.myWidth ),
    myState( other.myState ),
    myCst1( other.myCst1 ),
    myCst2( other.myCst2 )
{
}
//-----------------------------------------------------------------------------
template <typename TSpace, typename TInternalInteger>
inline
DGtal::COBANaivePlane<TSpace, TInternalInteger> &
DGtal::COBANaivePlane<TSpace, TInternalInteger>::
operator=( const COBANaivePlane & other )
{
  if ( this != &other )
    {
      myAxis = other.myAxis;
      myG = other.myG;
      myWidth = other.myWidth;
      myState = other.myState;
      myCst1 = other.myCst1;
      myCst2 = other.myCst2;
    }
  return *this;
}
//-----------------------------------------------------------------------------
template <typename TSpace, typename TInternalInteger>
inline
void
DGtal::COBANaivePlane<TSpace, TInternalInteger>::
clear()
{
  myG = NumberTraits< InternalInteger >::ZERO;
  myState.pointSet.clear();
  myState.cip.clear();
}
//-----------------------------------------------------------------------------
template <typename TSpace, typename TInternalInteger>
inline
void
DGtal::COBANaivePlane<TSpace, TInternalInteger>::
init( Dimension axis, InternalInteger diameter, 
      const Point & firstPoint,
      InternalInteger widthNumerator,
      InternalInteger widthDenominator )
{
  clear();
  myAxis = axis;
  myWidth[ 0 ] = widthNumerator;
  myWidth[ 1 ] = widthDenominator;
  // initialize the grid step.
  myG = 2*diameter;  myG *= diameter;  myG *= diameter;
  // initialize the search space as a square.
  myState.cip.pushBack( InternalPoint2( -myG, -myG ) ); 
  myState.cip.pushBack( InternalPoint2(  myG, -myG ) ); 
  myState.cip.pushBack( InternalPoint2(  myG,  myG ) ); 
  myState.cip.pushBack( InternalPoint2( -myG,  myG ) ); 
  computeCentroidAndNormal();
  myState.pointSet.insert( firstPoint );
  myState.cip.ic().getDotProduct( myState.max, myState.N, firstPoint );
  myState.min = myState.max;
  myState.indMax = myState.indMin = myState.pointSet.begin();
  myState.grad = InternalPoint2( 0, 0 );
  // Initializes some constants
  // _cst1 = ( (int) ceil( get_si( myG ) * myWidth ) + 1 );
  // _cst2 = ( (int) floor( get_si( myG ) * myWidth ) - 1 );
  myCst1 = ( ( myG * myWidth[ 0 ] - 1 ) / myWidth[ 1 ] ) + 2;
  myCst2 = ( ( myG * myWidth[ 0 ] )     / myWidth[ 1 ] ) - 1;
}
//-----------------------------------------------------------------------------
template <typename TSpace, typename TInternalInteger>
inline
typename DGtal::COBANaivePlane<TSpace, TInternalInteger>::Size
DGtal::COBANaivePlane<TSpace, TInternalInteger>::
size() const
{
  return myState.pointSet.size();
}
//-----------------------------------------------------------------------------
template <typename TSpace, typename TInternalInteger>
inline
bool
DGtal::COBANaivePlane<TSpace, TInternalInteger>::
extend( const Point & p, bool allowNewNormal )
{
  // todo
  return false;
}


///////////////////////////////////////////////////////////////////////////////
// Interface - public :

/**
 * Writes/Displays the object on an output stream.
 * @param out the output stream where the object is written.
 */
template <typename TSpace, typename TInternalInteger>
inline
void
DGtal::COBANaivePlane<TSpace, TInternalInteger>::selfDisplay ( std::ostream & out ) const
{
  out << "[COBANaivePlane"
      << " axis=" << myAxis << " w=" << myWidth[ 0 ] << "/" << myWidth[ 1 ]
      << " size=" << size() << " N=" << myState.N << " ]";
}

/**
 * Checks the validity/consistency of the object.
 * @return 'true' if the object is valid, 'false' otherwise.
 */
template <typename TSpace, typename TInternalInteger>
inline
bool
DGtal::COBANaivePlane<TSpace, TInternalInteger>::isValid() const
{
  return myG != NumberTraits< InternalInteger >::ZERO;
}


///////////////////////////////////////////////////////////////////////////////
// Internals
///////////////////////////////////////////////////////////////////////////////
//-----------------------------------------------------------------------------
template <typename TSpace, typename TInternalInteger>
inline
void
DGtal::COBANaivePlane<TSpace, TInternalInteger>::
computeCentroidAndNormal()
{
  if ( myState.cip.empty() ) return;
  myState.centroid = myState.cip.centroid();
  myState.cip.ic().reduce( myState.centroid );
  switch( myAxis ){
  case 0 : 
    myState.N[ 0 ] = myState.centroid[ 2 ] * myG;
    myState.N[ 1 ] = myState.centroid[ 0 ];
    myState.N[ 2 ] = myState.centroid[ 1 ];
    break;
  case 1 : 
    myState.N[ 0 ] = myState.centroid[ 0 ];
    myState.N[ 1 ] = myState.centroid[ 2 ] * myG;
    myState.N[ 2 ] = myState.centroid[ 1 ];
    break;
  case 2 : 
    myState.N[ 0 ] = myState.centroid[ 0 ];
    myState.N[ 1 ] = myState.centroid[ 1 ];
    myState.N[ 2 ] = myState.centroid[ 2 ] * myG;
    break;
  }

}
//-----------------------------------------------------------------------------
template <typename TSpace, typename TInternalInteger>
inline
void
DGtal::COBANaivePlane<TSpace, TInternalInteger>::
doubleCut()
{
  // 2 cuts on the search space:
  //  Gradient.p <= cst1 - _v
  // -Gradient.p <= cst2 + _v
  _v = myG * ( (*myState.indmin)[ myAxis ] 
               - (*myState.indmax)[ myAxis ] );
  myState.cip.cut( HalfSpace( myState.grad, myCst1 - _v ) );
  myState.grad.negate();
  myState.cip.cut( HalfSpace( myState.grad, myCst2 + _v ) );
  myState.grad.negate();
  computeCentroidAndNormal();

}


///////////////////////////////////////////////////////////////////////////////
// Implementation of inline functions                                        //

template <typename TSpace, typename TInternalInteger>
inline
std::ostream&
DGtal::operator<< ( std::ostream & out, 
		  const COBANaivePlane<TSpace, TInternalInteger> & object )
{
  object.selfDisplay( out );
  return out;
}

//                                                                           //
///////////////////////////////////////////////////////////////////////////////


