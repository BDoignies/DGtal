/**
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as
 *  published by the Free Software Foundation, either version 3 of the
 *  License, or  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 **/

/**
 * @file HyperRectDomain.ih
 * @author David Coeurjolly (\c david.coeurjolly@liris.cnrs.fr )
 * @author Guillaume Damiand
 * Laboratoire d'InfoRmatique en Image et Syst√®mes d'information - LIRIS (CNRS, UMR 5205), CNRS, France
 *
 * @date 2010/05/25
 *
 * Implementation of inline methods defined in HyperRectDomain.h
 *
 * This file is part of the DGtal library.
 */

///////////////////////////////////////////////////////////////////////////////
// IMPLEMENTATION of inline methods.
///////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
#include <cstdlib>
//-----------------------------------------------------------------------------
template<typename TSpace>
inline
DGtal::HyperRectDomain<TSpace>::HyperRectDomain()
  : myLowerBound(Point::zero),
    myUpperBound(Point::zero),
    myPredicate( myLowerBound, myUpperBound ),
    myRange(*this)
{}
//-----------------------------------------------------------------------------
template<typename TSpace>
inline
DGtal::HyperRectDomain<TSpace>::HyperRectDomain ( const Point &aPointA,
    const Point &aPointB ) :
    myLowerBound(std::min(aPointA, aPointB)),
    myUpperBound(std::max(aPointA, aPointB)),
    myPredicate( myLowerBound, myUpperBound ),
    myRange(*this)
{}
//-----------------------------------------------------------------------------
template<typename TSpace>
inline
DGtal::HyperRectDomain<TSpace>::HyperRectDomain
( const typename DGtal::HyperRectDomain<TSpace> &aDomain) :
    myLowerBound(aDomain.lowerBound()),
    myUpperBound(aDomain.upperBound()),
    myPredicate( myLowerBound, myUpperBound ),
    myRange(*this)
{}
//-----------------------------------------------------------------------------
template<typename TSpace>
inline
DGtal::HyperRectDomain<TSpace>::~HyperRectDomain()
{}
//-----------------------------------------------------------------------------
template<typename TSpace>
inline
DGtal::HyperRectDomain<TSpace> &
DGtal::HyperRectDomain<TSpace>::operator=
( const typename DGtal::HyperRectDomain<TSpace> & other )
{
  if ( this != &other )
  {
    myLowerBound = other.myLowerBound;
    myUpperBound = other.myUpperBound;
    myPredicate = other.myPredicate;
  }
  return *this;
}
//-----------------------------------------------------------------------------
/*
template<typename TSpace>
inline
std::size_t
DGtal::HyperRectDomain<TSpace>::extent() const
{
  return extent(myLowerBound, myUpperBound);
  }*/
//-----------------------------------------------------------------------------
template<typename TSpace>
inline
const typename DGtal::HyperRectDomain<TSpace>::Point &
DGtal::HyperRectDomain<TSpace>::lowerBound() const
{
  return myLowerBound;
}
//-----------------------------------------------------------------------------
template<typename TSpace>
inline
bool
DGtal::HyperRectDomain<TSpace>::isInside( const Point & p ) const
{
  return myPredicate( p );
  //LowerBound.isLower( p ) && myUpperBound.isUpper( p );
}
//-----------------------------------------------------------------------------
template<typename TSpace>
inline
const typename DGtal::HyperRectDomain<TSpace>::Predicate &
DGtal::HyperRectDomain<TSpace>::predicate() const
{
  return myPredicate;
}
//-----------------------------------------------------------------------------
template<typename TSpace>
inline
const typename DGtal::HyperRectDomain<TSpace>::Point &
DGtal::HyperRectDomain<TSpace>::upperBound() const
{
  return myUpperBound;
}
//-----------------------------------------------------------------------------
template<typename TSpace>
inline
void
DGtal::HyperRectDomain<TSpace>::selfDisplay ( std::ostream & out ) const
{
  out << "[HyperRectDomain] = [" << myLowerBound << "]x["
  << myUpperBound << "]";
}
//-----------------------------------------------------------------------------
template<typename TSpace>
inline
bool
DGtal::HyperRectDomain<TSpace>::isValid() const
{
  return true;
}
//-----------------------------------------------------------------------------
template<typename TSpace>
inline
DGtal::DrawableWithDGtalBoard*
DGtal::HyperRectDomain<TSpace>::defaultStyle( std::string mode ) const
{
  if ( ( mode == "" ) || ( mode == "Both" ) || ( mode == "Grid" ) ) 
    return new DefaultDrawStyleGrid;
  else // mode == "Paving"
    return new DefaultDrawStylePaving;
}
//-----------------------------------------------------------------------------
template<typename TSpace>
inline
std::string
DGtal::HyperRectDomain<TSpace>::styleName() const
{
  return "HyperRectDomain";
}
//-----------------------------------------------------------------------------
template<typename TSpace>
inline
void
DGtal::HyperRectDomain<TSpace>::selfDraw( DGtalBoard & board ) const
{
  std::string mode = board.getMode( this->styleName() );
  ASSERT((mode=="" || mode=="Grid" || mode=="Paving") &&
	 ("DGtal::HyperRectDomain<TSpace>::selfDraw: Unknown mode "+mode)=="");
  
  if ( ( mode == "" ) || ( mode == "Grid" ) )
    selfDrawAsGrid( board );
  else if ( mode == "Paving" )
    selfDrawAsPaving( board );
  // selfDrawAsGrid( board );
}
//-----------------------------------------------------------------------------
template<typename TSpace>
inline
void
DGtal::HyperRectDomain<TSpace>::selfDrawAsGrid( DGtalBoard & aboard) const
{
  ASSERT(TSpace::staticDimension == 2 && "selfDraw-NOT-YET-IMPLEMENTED-in-ND");

  if (TSpace::staticDimension == 2)
  {
    for (int64_t x = IntegerTraits<Integer>::castToInt64_t(myLowerBound[0]); 
	 x <=  IntegerTraits<Integer>::castToInt64_t(myUpperBound[0]); x++)
      aboard.drawLine(x,
		      IntegerTraits<Integer>::castToInt64_t(myLowerBound[1]) -
		      0.5,
		      x, 
		      IntegerTraits<Integer>::castToInt64_t(myUpperBound[1]) +
		      0.5);

    for (int64_t y =  IntegerTraits<Integer>::castToInt64_t(myLowerBound[1]);
	 y <=  IntegerTraits<Integer>::castToInt64_t(myUpperBound[1]); y++)
      aboard.drawLine(IntegerTraits<Integer>::castToInt64_t(myLowerBound[0]) -
		      0.5,
		      y, 
		      IntegerTraits<Integer>::castToInt64_t(myUpperBound[0]) +
		      0.5,
		      y);

    for (int64_t x =  IntegerTraits<Integer>::castToInt64_t(myLowerBound[0]); 
	 x <=  IntegerTraits<Integer>::castToInt64_t(myUpperBound[0]); x++)
      for (int64_t y =  IntegerTraits<Integer>::castToInt64_t(myLowerBound[1]);
	   y <=  IntegerTraits<Integer>::castToInt64_t(myUpperBound[1]); y++)
        aboard.fillCircle(x, y, 0.1);
  }
}
//-----------------------------------------------------------------------------
template<typename TSpace>
inline
void
DGtal::HyperRectDomain<TSpace>::selfDrawAsPaving( DGtalBoard & aboard) const
{
  ASSERT(TSpace::staticDimension==2 && "selfDraw-NOT-YET-IMPLEMENTED-in-ND" );
  
  if (TSpace::staticDimension == 2)
  {
    for (int64_t x = IntegerTraits<Integer>::castToInt64_t(myLowerBound[0]); 
	 x <= IntegerTraits<Integer>::castToInt64_t(myUpperBound[0]); x++)
      for (int64_t y = IntegerTraits<Integer>::castToInt64_t(myLowerBound[1]); 
	   y <= IntegerTraits<Integer>::castToInt64_t(myUpperBound[1]); y++)
        aboard.drawRectangle(x - 0.5, y + 0.5, 1, 1);
  }
}
//-----------------------------------------------------------------------------
template<typename TSpace>
inline
std::ostream&
DGtal::operator<< ( std::ostream & out,
    const HyperRectDomain<TSpace> & object )
{
  object.selfDisplay ( out );
  return out;
}
///////////////////////////////////////////////////////////////////////////////


