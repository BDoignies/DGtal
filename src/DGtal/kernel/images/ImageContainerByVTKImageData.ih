/**
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as
 *  published by the Free Software Foundation, either version 3 of the
 *  License, or  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 **/

/**
 * @file ImageContainerByVTKImageData.ih
 * @author David Coeurjolly (\c david.coeurjolly@liris.cnrs.fr )
 * Laboratoire d'InfoRmatique en Image et Syst√®mes d'information - LIRIS (CNRS, UMR 5205), CNRS, France
 *
 * @date 2010/12/08
 *
 * Implementation of inline methods defined in ImageContainerByVTKImageData.h
 *
 * This file is part of the DGtal library.
 */


//////////////////////////////////////////////////////////////////////////////
#include <cstdlib>
//////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// IMPLEMENTATION of inline methods.
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// ----------------------- Standard services ------------------------------
namespace DGtal{
  namespace experimental{
    /**
     * Destructor.
     */
    template <typename TDomain, typename TValueType>
    inline
    ImageContainerByVTKImageData<TDomain,TValueType>::~ImageContainerByVTKImageData()
    {
      myVTKImage->Delete();
    }

    /**
     * Constructor.
     */
    template <typename TDomain, typename TValueType>
    inline
    ImageContainerByVTKImageData<TDomain,TValueType>::ImageContainerByVTKImageData(const Point &aPointA, 
										   const Point &aPointB)
    {
      myVTKImage = vtkImageData::New();
      if (aPointA < aPointB)
	{
	  myLowerBound = aPointA;
	  myUpperBound = aPointB;
	}
      else
	{
	  myLowerBound = aPointB;
	  myUpperBound = aPointA;
	}
      Point dec = myUpperBound - myLowerBound;
    
      myVTKImage->SetDimensions(dec[0],dec[1],dec[2]);
      myVTKImage->SetNumberOfScalarComponents(1);
    
      //Scalar Type
      myVTKImage->SetScalarTypeToInt();
      myVTKImage->AllocateScalars();
    }



    ///////////////////////////////////////////////////////////////////////////////
    // Interface - public :


    /**
     * Get the value of an image at a given position.
     *
     * @param aPoint  position in the image.
     * @return the value at aPoint.
     */
    template <typename TDomain, typename TValueType>
    inline
    TValueType
    ImageContainerByVTKImageData<TDomain,TValueType>::operator()(const Point &aPoint) const
    {
      return (int)myVTKImage->GetScalarComponentAsDouble((int)aPoint[0],(int)aPoint[1],(int)aPoint[2],0);
    }
    

    template <typename Domain, typename T>
    inline
    void
    ImageContainerByVTKImageData<Domain, T>::setValue(const Point &aPoint, const T &V)
    {
      myVTKImage->SetScalarComponentFromDouble((int)aPoint[0],(int)aPoint[1],(int)aPoint[2],0,V);    
    }
  
    /**
     * Writes/Displays the object on an output stream.
     * @param out the output stream where the object is written.
     */
    template <typename TDomain, typename TValueType>
    inline
    void
    ImageContainerByVTKImageData<TDomain,TValueType>::selfDisplay ( std::ostream & out ) const
    {
      out << "[ImageContainerByVTKImageData]";
    }

    /**
     * Checks the validity/consistency of the object.
     * @return 'true' if the object is valid, 'false' otherwise.
     */
    template <typename TDomain, typename TValueType>
    inline
    bool
    ImageContainerByVTKImageData<TDomain,TValueType>::isValid() const
    {
      return true;
    }
  }
}

///////////////////////////////////////////////////////////////////////////////
// Implementation of inline functions                                        //

template <typename TDomain, typename TValueType>
inline
std::ostream&
DGtal::operator<< ( std::ostream & out, 
		    const DGtal::experimental::ImageContainerByVTKImageData<TDomain,TValueType> & object )
{
  object.selfDisplay( out );
  return out;
}

//                                                                           //
///////////////////////////////////////////////////////////////////////////////


