/**
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as
 *  published by the Free Software Foundation, either version 3 of the
 *  License, or  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 **/

/**
 * @file PointVector.ih
 * @author David Coeurjolly (\c david.coeurjolly@liris.cnrs.fr )
 * @author Guillaume Damiand
 * Laboratoire d'InfoRmatique en Image et Syst√®mes d'information - LIRIS (CNRS, UMR 5205), CNRS, France
 *
 * @date 2010/05/14
 *
 * Implementation of inline methods defined in PointVector.h
 *
 * This file is part of the DGtal library.
 */

///////////////////////////////////////////////////////////////////////////////
// IMPLEMENTATION of inline methods.
///////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
#include <cstdlib>
#include <cmath>
#include <DGtal/base/BasicFunctors.h>
//////////////////////////////////////////////////////////////////////////////
template<std::size_t N, typename TContainer>
inline
std::bitset<N> DGtal::setDimensionsIn( const TContainer &dimensions )
{
  std::bitset<N> t1; 
  for ( typename TContainer::const_iterator it=dimensions.begin(); 
	it!=dimensions.end(); ++it )
    {
      ASSERT( *it<N );
      t1.set(*it);
    }
  return t1;
}
//------------------------------------------------------------------------------
template<std::size_t N, typename TContainer>
inline
std::bitset<N> DGtal::setDimensionsNotIn( const TContainer &dimensions )
{
  std::bitset<N> t1; t1.set();
  for ( typename TContainer::const_iterator it=dimensions.begin(); 
	it!=dimensions.end(); ++it )
    {
      ASSERT( *it<N );
      t1.reset(*it);
    }
  return t1;
}
//------------------------------------------------------------------------------
template<std::size_t N, typename T, typename TDimension>
inline
DGtal::PointVector<N, T, TDimension>::PointVector()
{
  for ( std::size_t i = 0; i < N; ++i )
    myArray[ i ] = 0;
}
//------------------------------------------------------------------------------
template<std::size_t N, typename T, typename TDimension>
template<typename Functor>
inline
DGtal::PointVector<N, T, TDimension>::PointVector(const Self& apoint1,
						  const Self& apoint2,
						  const Functor& f)
{
  for ( std::size_t i = 0; i < N; ++i )
    myArray[ i ] = f.operator() (apoint1[i], apoint2[i]);
}
//------------------------------------------------------------------------------
template<std::size_t N, typename T, typename TDimension>
inline
DGtal::PointVector<N, T, TDimension>::~PointVector()
{}
//------------------------------------------------------------------------------
template<std::size_t N, typename T, typename TDimension>
inline
DGtal::PointVector<N, T, TDimension>::PointVector( const T * ptrValues )
{
  // The problem here is that we have no guaranty on the size of init !!
  for ( std::size_t i = 0; i < N; ++i )
    myArray[ i ] = ptrValues[ i ];
}

//------------------------------------------------------------------------------
template<std::size_t N, typename T, typename TDimension>
inline
DGtal::PointVector<N, T, TDimension>::PointVector( const T & x, const T & y )
{
  ASSERT( N >= 2 );
  myArray[ 0 ] = x;
  myArray[ 1 ] = y;
  for ( std::size_t i = 2; i < N; ++i )
    myArray[ i ] = 0;
}
//------------------------------------------------------------------------------
template<std::size_t N, typename T, typename TDimension>
inline
DGtal::PointVector<N, T, TDimension>::PointVector( const T & x, const T & y, const T & z )
{
  ASSERT( N >= 3 );
  myArray[ 0 ] = x;
  myArray[ 1 ] = y;
  myArray[ 2 ] = z;
  for ( std::size_t i = 3; i < N; ++i )
    myArray[ i ] = 0;
}
//------------------------------------------------------------------------------
template<std::size_t N, typename T, typename TDimension>
inline
DGtal::PointVector<N, T, TDimension>::PointVector( const T & x, const T & y,
    const T & z, const T & t )
{
  ASSERT( N >= 4 );
  myArray[ 0 ] = x;
  myArray[ 1 ] = y;
  myArray[ 2 ] = z;
  myArray[ 3 ] = t;
  for ( std::size_t i = 4; i < N; ++i )
    myArray[ i ] = 0;
}
//------------------------------------------------------------------------------
#ifdef CPP0X_INITIALIZER_LIST
template<std::size_t N, typename T, typename TDimension>
inline
DGtal::PointVector<N, T, TDimension>::PointVector(std::initializer_list<T> init)
{
  unsigned int i = 0;
  for (const T *p = init.begin (); p != init.end () && i < N; ++p, ++i)
    myArray[ i ] = *p;
  for ( ; i < N; ++i)
    myArray[i] = 0;
}
#endif // CPP0X_INITIALIZER_LIST
//------------------------------------------------------------------------------
template<std::size_t N, typename T, typename TDimension>
inline
DGtal::PointVector<N, T, TDimension>::PointVector( const Self & other )
    : myArray( other.myArray )
{}
//------------------------------------------------------------------------------
template<std::size_t N, typename T, typename TDimension>
inline
typename DGtal::PointVector<N, T, TDimension>::Iterator
DGtal::PointVector<N, T, TDimension>::begin()
{
  return myArray.begin();
}
//------------------------------------------------------------------------------
template<std::size_t N, typename T, typename TDimension>
inline
typename DGtal::PointVector<N, T, TDimension>::Iterator
DGtal::PointVector<N, T, TDimension>::end()
{
  return myArray.end();
}
//------------------------------------------------------------------------------
template<std::size_t N, typename T, typename TDimension>
inline
typename DGtal::PointVector<N, T, TDimension>::ConstIterator
DGtal::PointVector<N, T, TDimension>::begin() const
{
  return myArray.begin();
}
//------------------------------------------------------------------------------
template<std::size_t N, typename T, typename TDimension>
inline
typename DGtal::PointVector<N, T, TDimension>::ConstIterator
DGtal::PointVector<N, T, TDimension>::end() const
{
  return myArray.end();
}
//------------------------------------------------------------------------------
template<std::size_t N, typename T, typename TDimension>
inline
std::size_t
DGtal::PointVector<N, T, TDimension>::size()
{
  return N;
}
//------------------------------------------------------------------------------
template<std::size_t N, typename T, typename TDimension>
inline
std::size_t
DGtal::PointVector<N, T, TDimension>::dimension()
{
  return N;
}
//------------------------------------------------------------------------------
template<std::size_t N, typename T, typename TDimension>
inline
const T&
DGtal::PointVector<N, T, TDimension>::at ( std::size_t i ) const
{
  ASSERT ( i < N );
  return myArray.at( i );
}
//------------------------------------------------------------------------------
template<std::size_t N, typename T, typename TDimension>
inline T& DGtal::PointVector<N, T, TDimension>::at( std::size_t i )
{
  ASSERT ( i < N );
  return myArray.at( i );
}
//------------------------------------------------------------------------------
template<std::size_t N, typename T, typename TDimension>
inline
const T&
DGtal::PointVector<N, T, TDimension>::operator[]( std::size_t i ) const
{
  ASSERT ( i < N );
  return myArray[i];
}
//------------------------------------------------------------------------------
template<std::size_t N, typename T, typename TDimension>
inline T& DGtal::PointVector<N, T, TDimension>::operator[]( std::size_t i )
{
  ASSERT ( i < N );
  return myArray[i];
}
//------------------------------------------------------------------------------
template<std::size_t N, typename T, typename TDimension>
DGtal::PointVector<N, T, TDimension>&
DGtal::PointVector<N, T, TDimension>::operator*= ( T coeff )
{
  for ( std::size_t i = 0; i < myArray.size(); ++i )
    myArray[ i ] *= coeff;
  return *this;
}
//------------------------------------------------------------------------------
template<std::size_t N, typename T, typename TDimension>
DGtal::PointVector<N, T, TDimension>
DGtal::PointVector<N, T, TDimension>::operator* ( T coeff )
{
  Self v = *this;
  v *= coeff;
  return v;
}
//------------------------------------------------------------------------------
template<std::size_t N, typename T, typename TDimension>
inline
DGtal::PointVector<N, T, TDimension>&
DGtal::PointVector<N, T, TDimension>::operator=( const Self & pv )
{
  myArray = pv.myArray;
  return *this;
}
//------------------------------------------------------------------------------
#ifdef CPP0X_INITIALIZER_LIST
template<std::size_t N, typename T, typename TDimension>
inline
DGtal::PointVector<N, T, TDimension>&
DGtal::PointVector<N, T, TDimension>::partialCopy
( const Self & pv,
  std::initializer_list<TDimension> dimensions )
{
  std::vector<TDimension> dims;
  dims.reserve(dimensions.size());
  for (const TDimension *c = dimensions.begin (); c != dimensions.end (); ++c)
    dims.push_back(*c);
  return partialCopy(pv, dims);
}
//------------------------------------------------------------------------------
template<std::size_t N, typename T, typename TDimension>
inline
DGtal::PointVector<N, T, TDimension>&
DGtal::PointVector<N, T, TDimension>::partialCopyInv
( const Self & pv,
  std::initializer_list<TDimension> dimensions )
{
  std::vector<TDimension> dims;
  dims.reserve(dimensions.size());
  for (const TDimension *c = dimensions.begin (); c != dimensions.end (); ++c)
    dims.push_back(*c);
  return partialCopyInv(pv, dims);
}
#endif
//------------------------------------------------------------------------------
template<std::size_t N, typename T, typename TDimension>
inline
DGtal::PointVector<N, T, TDimension>&
DGtal::PointVector<N, T, TDimension>::partialCopy
( const Self & pv,
  const std::vector<TDimension> &dimensions)
{
  std::bitset<N> dims = ::setDimensionsIn<N>(dimensions);
  for ( TDimension i = 0; i < N; ++i )
  {
    if ( dims.test(i) ) myArray[i] = pv.myArray[i];
  }
  return *this;
}
//------------------------------------------------------------------------------
template<std::size_t N, typename T, typename TDimension>
inline
DGtal::PointVector<N, T, TDimension>&
DGtal::PointVector<N, T, TDimension>::partialCopyInv
( const Self & pv,
  const std::vector<TDimension> &dimensions)
{
  std::bitset<N> dims = ::setDimensionsIn<N>(dimensions);
  for ( TDimension i = 0; i < N; ++i )
  {
    if ( !dims.test(i) ) myArray[i] = pv.myArray[i];
  }
  return *this;
}
//------------------------------------------------------------------------------
template<std::size_t N, typename T, typename TDimension>
inline
bool
DGtal::PointVector<N, T, TDimension>::partialEqual
( const Self & pv,
  const std::vector<TDimension> &dimensions) const
{
  std::bitset<N> dims = setDimensionsIn<N>(dimensions);
  for ( TDimension i = 0; i < N; ++i )
  {
    if ( dims.test(i) && myArray[i] != pv.myArray[i]) return false;
  }
  return true;
}
//------------------------------------------------------------------------------
template<std::size_t N, typename T, typename TDimension>
inline
bool
DGtal::PointVector<N, T, TDimension>::partialEqualInv
( const Self & pv,
  const std::vector<TDimension> &dimensions) const
{
  std::bitset<N> dims = setDimensionsIn<N>(dimensions);
  for ( TDimension i = 0; i < N; ++i )
  {
    if ( !dims.test(i) && myArray[i] != pv.myArray[i]) return false;
  }
  return true;
}
//------------------------------------------------------------------------------
template<std::size_t N, typename T, typename TDimension>
inline
bool
DGtal::PointVector<N, T, TDimension>::operator==( const Self & pv ) const
{
  return (myArray == pv.myArray);
}
//------------------------------------------------------------------------------
template<std::size_t N, typename T, typename TDimension>
inline
bool
DGtal::PointVector<N, T, TDimension>::operator!=( const Self & pv ) const
{
  return (myArray != pv.myArray);
}
//------------------------------------------------------------------------------
template<std::size_t N, typename T, typename TDimension>
inline
bool
DGtal::PointVector<N, T, TDimension>::operator<( const Self & pv ) const
{
  return (myArray < pv.myArray);
}
//------------------------------------------------------------------------------
template<std::size_t N, typename T, typename TDimension>
inline
bool
DGtal::PointVector<N, T, TDimension>::operator<=( const Self & pv ) const
{
  return (myArray <= pv.myArray);
}
//------------------------------------------------------------------------------
template<std::size_t N, typename T, typename TDimension>
inline
bool
DGtal::PointVector<N, T, TDimension>::operator>( const Self & pv ) const
{
  return (myArray > pv.myArray);
}
//------------------------------------------------------------------------------
template<std::size_t N, typename T, typename TDimension>
inline
bool
DGtal::PointVector<N, T, TDimension>::operator>=( const Self & pv ) const
{
  return (myArray >= pv.myArray);
}
//------------------------------------------------------------------------------
template<std::size_t N, typename T, typename TDimension>
inline
DGtal::PointVector<N, T, TDimension>&
DGtal::PointVector<N, T, TDimension>::operator+=( const Self& v )
{
  for ( std::size_t i = 0; i < N; ++i )
    this->myArray[ i ] += v.at ( i );
  return *this;
}
//------------------------------------------------------------------------------
template<std::size_t N, typename T, typename TDimension>
inline
DGtal::PointVector<N, T, TDimension>
DGtal::PointVector<N, T, TDimension>::operator+( const Self& v ) const
{
  return Self(*this, v, std::plus<T>());
}
//------------------------------------------------------------------------------
template<std::size_t N, typename T, typename TDimension>
inline
DGtal::PointVector<N, T, TDimension>&
DGtal::PointVector<N, T, TDimension>::operator-=( const Self& v )
{
  for ( std::size_t i = 0; i < N; ++i )
    this->myArray[ i ] -= v.at ( i );
  return *this;
}
//------------------------------------------------------------------------------
template<std::size_t N, typename T, typename TDimension>
inline
DGtal::PointVector<N, T, TDimension>
DGtal::PointVector<N, T, TDimension>::operator-( const Self& v ) const
{
  return Self(*this, v, MinusFunctor<T>());
}
//------------------------------------------------------------------------------
template<std::size_t N, typename T, typename TDimension>
inline
void
DGtal::PointVector<N, T, TDimension>::reset()
{
  for ( std::size_t i = 0; i < myArray.size(); ++i )
    myArray[ i ] = 0;
}
//------------------------------------------------------------------------------
template<std::size_t N, typename T, typename TDimension>
inline
DGtal::PointVector<N, T, TDimension>
DGtal::PointVector<N, T, TDimension>::inf( const Self& apoint ) const
{
  return Self(*this, apoint, MinFunctor<T>());
}
//------------------------------------------------------------------------------
template<std::size_t N, typename T, typename TDimension>
inline
DGtal::PointVector<N, T, TDimension>
DGtal::PointVector<N, T, TDimension>::sup( const Self& apoint ) const
{
  return Self(*this, apoint, MaxFunctor<T>());
}
//------------------------------------------------------------------------------
template<std::size_t N, typename T, typename TDimension>
inline
bool
DGtal::PointVector<N, T, TDimension>::isLower( const Self& p ) const
{
  for ( std::size_t i = 0; i < myArray.size(); ++i )
    if ( p[ i ] < myArray[ i ] )
      return false;
  return true;
}
//------------------------------------------------------------------------------
template<std::size_t N, typename T, typename TDimension>
inline
bool
DGtal::PointVector<N, T, TDimension>::isUpper( const Self& p ) const
{
  for ( std::size_t i = 0; i < myArray.size(); ++i )
    if ( p[ i ] > myArray[ i ] )
      return false;
  return true;
}
//------------------------------------------------------------------------------
template<std::size_t N, typename T, typename TDimension>
inline
double
DGtal::PointVector<N, T, TDimension>::norm
(const typename Self::NormType aType ) const
{
  double tmp = 0.0;

  ASSERT ( dimension() > 0 );

  switch ( aType )
  {
    case L_2:
      for ( unsigned int i = 0; i < dimension(); i++ )
        tmp += IntegerTraits<T>::castToDouble(at ( i )) *
	  IntegerTraits<T>::castToDouble(at ( i ));
      tmp = ( double ) sqrt ( tmp );
      break;
    case L_1:
      for ( unsigned int i = 0; i < dimension(); i++ )
        tmp += fabs (  IntegerTraits<T>::castToDouble(at( i ) ));
      break;
    case L_infty:
      tmp = at( 0 );
      for ( unsigned int i = 1; i < dimension(); i++ )
        if ( tmp < fabs ( IntegerTraits<T>::castToDouble(at ( i ) ) ))
          tmp = fabs ( IntegerTraits<T>::castToDouble(at ( i ) ));
      break;
  }
  return tmp;
}
//------------------------------------------------------------------------------
template<std::size_t N, typename T, typename TDimension>
inline
typename DGtal::PointVector<N, T, TDimension>::UnsignedComponent
DGtal::PointVector<N, T, TDimension>::norm1() const
{
  ASSERT ( dimension() > 0 );
  UnsignedComponent val( ( myArray[ 0 ] >= 0 ) ? myArray[ 0 ] : -myArray[ 0 ] );
  for ( unsigned int i = 1; i < dimension(); ++i )
    val += ( myArray[ i ] >= 0 ) ? myArray[ i ] : -myArray[ i ];
  return val;
}
//------------------------------------------------------------------------------
template<std::size_t N, typename T, typename TDimension>
inline
typename DGtal::PointVector<N, T, TDimension>::UnsignedComponent
DGtal::PointVector<N, T, TDimension>::normInfinity() const
{
  ASSERT ( dimension() > 0 );
  UnsignedComponent val( ( myArray[ 0 ] >= 0 ) ? myArray[ 0 ] : -myArray[ 0 ] );
  for ( unsigned int i = 1; i < dimension(); ++i )
    {
      UnsignedComponent tmp( ( myArray[ i ] >= 0 )
			     ? myArray[ i ] : -myArray[ i ] );
      if ( tmp > val )
	val = tmp;
    }
  return val;
}
//------------------------------------------------------------------------------
template<std::size_t N, typename T, typename TDimension>
inline
DGtal::PointVector<N, T, TDimension>
DGtal::PointVector<N, T, TDimension>::diagonal( Component val )
{
  Self p;
  for ( std::size_t i = 0; i < N; ++i )
    p.myArray[ i ] = val;
  return p;
}
//------------------------------------------------------------------------------
template<std::size_t N, typename T, typename TDimension>
inline
DGtal::PointVector<N, T, TDimension>
DGtal::PointVector<N, T, TDimension>::base( TDimension k, Component val )
{
  Self p;
  p.myArray[ k ] = val;
  return p;
}
//------------------------------------------------------------------------------
template<std::size_t N, typename T, typename TDimension>
inline
void 
DGtal::PointVector<N, T, TDimension>::selfDisplay( std::ostream & out ) const
{
  out << "[PointVector] {";
  for (unsigned int i = 0; i < dimension() ; ++i)
    out << at( i ) << (i == dimension() - 1 ? "" : ", ");
  out << "}";
}
//------------------------------------------------------------------------------
template<std::size_t N, typename T, typename TDimension>
inline
DGtal::DrawableWithDGtalBoard*
DGtal::PointVector<N, T, TDimension>::defaultStyle( std::string mode) const
{
  if ( ( mode == "" ) || ( mode == "Paving" ) ) 
    return new DefaultDrawStylePaving;
  else // mode == "Grid"
    return new DefaultDrawStyleGrid;  
}
//------------------------------------------------------------------------------
template<std::size_t N, typename T, typename TDimension>
inline
std::string
DGtal::PointVector<N, T, TDimension>::styleName() const
{
  return "PointVector";
}
//------------------------------------------------------------------------------
template<std::size_t N, typename T, typename TDimension>
inline
void
DGtal::PointVector<N, T, TDimension>::selfDrawAsPaving( DGtalBoard & board ) const
{
  ASSERT(N == 2);
  board.drawRectangle( (float) IntegerTraits<T>::castToInt64_t(myArray[0]) - 0.5f, 
 		       (float) IntegerTraits<T>::castToInt64_t(myArray[1]) + 0.5f, 1, 1 );     
}
//------------------------------------------------------------------------------
template<std::size_t N, typename T, typename TDimension>
inline
void
DGtal::PointVector<N, T, TDimension>::selfDrawAsGrid( DGtalBoard & board ) const
{
  ASSERT(N == 2);
  board.setPenColor(LibBoard::Color::Black);
  board.fillCircle((float) IntegerTraits<T>::castToInt64_t(myArray[0]), 
		   (float) IntegerTraits<T>::castToInt64_t(myArray[1]),0.1);
}
//------------------------------------------------------------------------------
template<std::size_t N, typename T, typename TDimension>
inline
void
DGtal::PointVector<N, T, TDimension>::selfDraw( DGtalBoard & board ) const
{
  std::string mode = board.getMode( this->styleName() );
  ASSERT( (mode=="Paving" || mode=="Grid" || mode=="Both" || mode=="") ||
	  ("DGtal::ArithmeticalDSS<TDSS>::selfDraw: Unknown mode "+mode)==""  );

  if ( mode == "Paving" )
    selfDrawAsPaving( board );
  else if ( mode == "Grid" )
    selfDrawAsGrid( board );
  else if ( ( mode == "Both" ) || ( mode == "" ) )
    {
      selfDrawAsPaving( board );
      selfDrawAsGrid( board );
    }
}
//------------------------------------------------------------------------------
template<std::size_t N, typename T, typename TDimension>
inline
void
DGtal::PointVector<N, T, TDimension>::selfDraw(DGtalBoard & board,
					       const Self &apoint) const
{
  ASSERT(N == 2);

  board.drawArrow((float)apoint[0], (float) apoint[1],
		  (float) apoint[0] + myArray[0], (float)apoint[1] + myArray[1],
		  true);
}
//------------------------------------------------------------------------------
template<std::size_t N, typename T, typename TDimension>
inline
std::ostream&
DGtal::operator<<( std::ostream & out,
		   const PointVector<N, T, TDimension> & object )
{
  object.selfDisplay( out );
  return out;
}
//------------------------------------------------------------------------------
template<std::size_t N, typename T, typename TDimension>
inline
bool
DGtal::PointVector<N, T, TDimension>::isValid() const
{
  return true;
}
//------------------------------------------------------------------------------
