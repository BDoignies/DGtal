/**
 * @file PointVector.ih
 * @author David Coeurjolly (\c david.coeurjolly@liris.cnrs.fr )
 * Laboratoire d'InfoRmatique en Image et Syst√®mes d'information - LIRIS (CNRS, UMR 5205), CNRS, France
 *
 * @date 2010/05/14
 *
 * Implementation of inline methods defined in PointVector.h
 *
 * This file is part of the DGtal library.
 */

///////////////////////////////////////////////////////////////////////////////
// IMPLEMENTATION of inline methods.
///////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
#include <cstdlib>
#include <cmath>
#include <DGtal/base/BasicFunctors.h>
//////////////////////////////////////////////////////////////////////////////
template<typename T,std::size_t N>
inline
DGtal::PointVector<T,N>::PointVector()
{  
  for ( std::size_t i = 0; i < N; ++i )
    myArray[ i ] = 0;
}
//------------------------------------------------------------------------------
template<typename T,std::size_t N>
template<typename Functor>
inline
DGtal::PointVector<T,N>::PointVector(const PointVector& apoint1, 
				     const PointVector& apoint2,
				     const Functor& f)
{  
  for ( std::size_t i = 0; i < N; ++i )
    myArray[ i ] = f.operator() (apoint1[i],apoint2[i]);
}
//------------------------------------------------------------------------------

template<typename T,std::size_t N>
inline
DGtal::PointVector<T,N>::~PointVector()
{}
//------------------------------------------------------------------------------
template<typename T,std::size_t N>
inline
DGtal::PointVector<T,N>::PointVector( const T * ptrValues )
{
  // The problem here is that we have no guaranty on the size of init !!
  for ( std::size_t i = 0; i < N; ++i )
    myArray[ i ] = ptrValues[ i ];
}
//------------------------------------------------------------------------------
template<typename T,std::size_t N>
inline
DGtal::PointVector<T,N>::PointVector( const T & x )
{
  ASSERT( N >= 1 );
  myArray[ 0 ] = x;
  for ( std::size_t i = 1; i < N; ++i )
    myArray[ i ] = 0;
}
//------------------------------------------------------------------------------
template<typename T,std::size_t N>
inline
DGtal::PointVector<T,N>::PointVector( const T & x, const T & y )
{
  ASSERT( N >= 2 );
  myArray[ 0 ] = x;
  myArray[ 1 ] = y;
  for ( std::size_t i = 2; i < N; ++i )
    myArray[ i ] = 0;
}
//------------------------------------------------------------------------------
template<typename T,std::size_t N>
inline
DGtal::PointVector<T,N>::PointVector( const T & x, const T & y, const T & z )
{
  ASSERT( N >= 3 );
  myArray[ 0 ] = x;
  myArray[ 1 ] = y;
  myArray[ 2 ] = z;
  for ( std::size_t i = 3; i < N; ++i )
    myArray[ i ] = 0;
}
//------------------------------------------------------------------------------
template<typename T,std::size_t N>
inline
DGtal::PointVector<T,N>::PointVector( const T & x, const T & y, 
				      const T & z, const T & t )
{
  ASSERT( N >= 4 );
  myArray[ 0 ] = x;
  myArray[ 1 ] = y;
  myArray[ 2 ] = z;
  myArray[ 3 ] = t;
  for ( std::size_t i = 4; i < N; ++i )
    myArray[ i ] = 0;
}
//------------------------------------------------------------------------------
#ifdef CPP0X_INITIALIZER_LIST
template<typename T,std::size_t N>
inline
DGtal::PointVector<T,N>::PointVector(std::initializer_list<T> init)
{ 
  unsigned int i=0;
  for (const T *p = init.begin (); p != init.end () && i<N; ++p, ++i)
    myArray[ i ] = *p;
  for ( ; i<N; ++i)
    myArray[i]=0;
}
#endif // CPP0X_INITIALIZER_LIST
//------------------------------------------------------------------------------
template<typename T,std::size_t N>
inline
DGtal::PointVector<T,N>::PointVector ( const PointVector<T,N> & other )
  : myArray( other.myArray )
{}
//------------------------------------------------------------------------------
template<typename T,std::size_t N>
inline
typename DGtal::PointVector<T,N>::Iterator 
DGtal::PointVector<T,N>::begin() 
{
  return myArray.begin();
}
//------------------------------------------------------------------------------
template<typename T,std::size_t N>
inline
typename DGtal::PointVector<T,N>::Iterator 
DGtal::PointVector<T,N>::end()
{
  return myArray.end();
}
//------------------------------------------------------------------------------
template<typename T,std::size_t N>
inline
typename DGtal::PointVector<T,N>::ConstIterator
DGtal::PointVector<T,N>::begin() const
{
  return myArray.begin();
}
//------------------------------------------------------------------------------
template<typename T,std::size_t N>
inline
typename DGtal::PointVector<T,N>::ConstIterator
DGtal::PointVector<T,N>::end() const
{
  return myArray.end();
}
//------------------------------------------------------------------------------
template<typename T,std::size_t N>
inline
std::size_t
DGtal::PointVector<T,N>::size()
{
  return N;
}
//------------------------------------------------------------------------------
template<typename T,std::size_t N>
inline
std::size_t
DGtal::PointVector<T,N>::dimension()
{
  return N;
}
//------------------------------------------------------------------------------
template<typename T,std::size_t N>
inline
const T&
DGtal::PointVector<T,N>::at ( std::size_t i ) const
{
  ASSERT ( i < N );
  return myArray.at( i );
}
//------------------------------------------------------------------------------
template<typename T,std::size_t N>
inline T& DGtal::PointVector<T,N>::at( std::size_t i )
{
  ASSERT ( i < N );
  return myArray.at( i );
}
//------------------------------------------------------------------------------
template<typename T,std::size_t N>
inline
const T&
DGtal::PointVector<T,N>::operator[]( std::size_t i ) const
{
  ASSERT ( i < N );
  return myArray[i];
}
//------------------------------------------------------------------------------
template<typename T,std::size_t N>
inline T& DGtal::PointVector<T,N>::operator[]( std::size_t i )
{
  ASSERT ( i < N );
  return myArray[i];
}
//------------------------------------------------------------------------------
template<typename T, std::size_t N>
DGtal::PointVector<T,N>&
DGtal::PointVector<T,N>::operator*= ( T coeff )
{
  for ( std::size_t i = 0; i < myArray.size(); ++i )
    myArray[ i ] *= coeff;
  return *this;
}
//------------------------------------------------------------------------------
template<typename T, std::size_t N>
inline
DGtal::PointVector<T,N>&
DGtal::PointVector<T,N>::operator= ( const PointVector<T,N> & pv )
{
  myArray = pv.myArray;
  return *this;
}
//------------------------------------------------------------------------------
template<typename T, std::size_t N>
inline
bool
DGtal::PointVector<T,N>::operator== ( const PointVector<T,N> & pv ) const
{
  return (myArray == pv.myArray);
}
//------------------------------------------------------------------------------
template<typename T, std::size_t N>
inline
bool
DGtal::PointVector<T,N>::operator!= ( const PointVector<T,N> & pv ) const
{
  return (myArray != pv.myArray);
}
//------------------------------------------------------------------------------
template<typename T, std::size_t N>
inline
bool
DGtal::PointVector<T,N>::operator< ( const PointVector<T,N> & pv ) const
{
  return (myArray < pv.myArray);
}
//------------------------------------------------------------------------------
template<typename T, std::size_t N>
inline
bool
DGtal::PointVector<T,N>::operator<= ( const PointVector<T,N> & pv ) const
{
  return (myArray <= pv.myArray);
}
//------------------------------------------------------------------------------
template<typename T, std::size_t N>
inline
bool
DGtal::PointVector<T,N>::operator> ( const PointVector<T,N> & pv ) const
{
  return (myArray > pv.myArray);
}
//------------------------------------------------------------------------------
template<typename T, std::size_t N>
inline
bool
DGtal::PointVector<T,N>::operator>= ( const PointVector<T,N> & pv ) const
{
  return (myArray >= pv.myArray);
}
//------------------------------------------------------------------------------
template<typename T,std::size_t N>
inline 
DGtal::PointVector<T,N>&
DGtal::PointVector<T,N>::operator+= ( const PointVector<T,N>& v )
{
  for ( std::size_t i = 0; i < N; ++i )
    this->myArray[ i ] += v.at ( i );
  return *this;
}
//------------------------------------------------------------------------------
template<typename T,std::size_t N>
inline 
DGtal::PointVector<T,N>
DGtal::PointVector<T,N>::operator+ ( const PointVector<T,N>& v ) const
{ return PointVector(*this,v,std::plus<T>()); }
//------------------------------------------------------------------------------
template<typename T,std::size_t N>
inline 
DGtal::PointVector<T,N>&
DGtal::PointVector<T,N>::operator-= ( const PointVector<T,N>& v )
{
  for ( std::size_t i = 0; i < N; ++i )
    this->myArray[ i ] -= v.at ( i );
  return *this;
}
//------------------------------------------------------------------------------
template<typename T,std::size_t N>
inline 
DGtal::PointVector<T,N>
DGtal::PointVector<T,N>::operator- ( const PointVector<T,N>& v ) const
{ return PointVector(*this,v,MinusFunctor<T>()); }
//------------------------------------------------------------------------------
template<typename T, std::size_t N>
inline
void
DGtal::PointVector<T,N>::reset()
{
  for ( std::size_t i = 0; i < myArray.size(); ++i )
    myArray[ i ] = 0;
}
//------------------------------------------------------------------------------
template<typename T, std::size_t N>
inline
DGtal::PointVector<T,N> 
DGtal::PointVector<T,N>::inf( const PointVector& apoint ) const
{ return PointVector(*this,apoint,MinFunctor<T>()); }
//------------------------------------------------------------------------------
template<typename T, std::size_t N>
inline
DGtal::PointVector<T,N>
DGtal::PointVector<T,N>::sup( const PointVector& apoint ) const
{ return PointVector(*this,apoint,MaxFunctor<T>()); }
//------------------------------------------------------------------------------
template<typename T, std::size_t N>
inline
bool
DGtal::PointVector<T,N>::isLower( const PointVector& p ) const
{
  for ( std::size_t i = 0; i < myArray.size(); ++i )
    if ( p[ i ] < myArray[ i ] ) return false;
  return true;
}
//------------------------------------------------------------------------------
template<typename T, std::size_t N>
inline
bool
DGtal::PointVector<T,N>::isUpper( const PointVector& p ) const
{
  for ( std::size_t i = 0; i < myArray.size(); ++i )
    if ( p[ i ] > myArray[ i ] ) return false;
  return true;
}
//------------------------------------------------------------------------------
template<typename T, std::size_t N>
inline
double
DGtal::PointVector<T,N>::norm (const typename PointVector<T,N>::NormType aType ) const
{
  double tmp= 0.0;

  ASSERT ( dimension() > 0 );

  switch ( aType ) 
    {
    case L_2:
      for ( unsigned int i=0; i < dimension(); i++ )
	tmp += at ( i ) *at ( i );
      tmp = ( double ) sqrt ( tmp );
      break;
    case L_1:
      for ( unsigned int i=0; i < dimension(); i++ )
	tmp += fabs ( (double) at( i ) );
      break;
    case L_infty:
      tmp = at( 0 );
      for ( unsigned int i=1; i < dimension(); i++ )
	if ( tmp < fabs ( (double) at ( i ) ) )
	  tmp = fabs ( (double) at ( i ) );
      break;
    }
  return tmp;
}
//------------------------------------------------------------------------------
template<typename T, std::size_t N>
inline
typename DGtal::PointVector<T,N>::UnsignedComponent
DGtal::PointVector<T,N>::norm1() const
{
  ASSERT ( dimension() > 0 );
  UnsignedComponent val( ( myArray[ 0 ] >= 0 ) ? myArray[ 0 ] : -myArray[ 0 ] );
  for ( unsigned int i=1; i < dimension(); ++i )
    val += ( myArray[ i ] >= 0 ) ? myArray[ i ] : -myArray[ i ];
  return val;
}
//------------------------------------------------------------------------------
template<typename T, std::size_t N>
inline
typename DGtal::PointVector<T,N>::UnsignedComponent
DGtal::PointVector<T,N>::normInfinity() const
{
  ASSERT ( dimension() > 0 );
  UnsignedComponent val( ( myArray[ 0 ] >= 0 ) ? myArray[ 0 ] : -myArray[ 0 ] );
  for ( unsigned int i=1; i < dimension(); ++i )
    {
      UnsignedComponent tmp( ( myArray[ i ] >= 0 ) 
			     ? myArray[ i ] : -myArray[ i ] );
      if ( tmp > val ) val = tmp;
    }
  return val;
}
//------------------------------------------------------------------------------
template<typename T,std::size_t N>
inline
void 
DGtal::PointVector<T,N>::selfDisplay( std::ostream & out ) const
{
  out << "[PointVector] {";
  for(unsigned int i=0; i < dimension() ; ++i)
    out << at( i ) <<(i==dimension()-1?"":", ");
  out << "}";  
}

//------------------------------------------------------------------------------
template<typename T,std::size_t N>
template<typename Functor>
inline
void 
DGtal::PointVector<T,N>::selfDraw(LibBoard::Board & board) const
{
  ASSERT(N==2);
  Functor applystyle(board);
  board.drawDot((float) myArray[0], (float) myArray[1]);
  
}
//------------------------------------------------------------------------------
template<typename T,std::size_t N>
template<typename Functor>
inline
void 
DGtal::PointVector<T,N>::selfDraw(LibBoard::Board & board, 
				  const PointVector &apoint) const
{
  ASSERT(N==2); 
  Functor applystyle(board);

  board.drawArrow((float)apoint[0], (float) apoint[1], 
		  (float) apoint[0]+myArray[0],(float)apoint[1]+ myArray[1],
		  true);
     
}
//------------------------------------------------------------------------------
template<typename T, std::size_t N>
inline
std::ostream&
DGtal::operator<<( std::ostream & out, const PointVector<T,N> & object )
{
  object.selfDisplay( out );
  return out;
}
//------------------------------------------------------------------------------
template<typename T,std::size_t N>
inline
bool 
DGtal::PointVector<T,N>::isValid() const
{
  return true;
}
//------------------------------------------------------------------------------
