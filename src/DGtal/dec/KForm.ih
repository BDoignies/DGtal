
template <typename Calculus, Order order, Duality duality>
KForm<Calculus, order, duality>::KForm(const Calculus& _calculus)
    : calculus(_calculus), container(_calculus.kFormLength(order, duality))
{
		container.clear();
}

template <typename Calculus, Order order, Duality duality>
KForm<Calculus, order, duality>::KForm(const Calculus& _calculus, const Container& _container)
    : calculus(_calculus), container(_container)
{
    ASSERT( calculus.kFormLength(order, duality) == size() );
}

template <typename Calculus, Order order, Duality duality>
typename KForm<Calculus, order, duality>::Index
KForm<Calculus, order, duality>::size() const
{
    return container.rows();
}

template <typename Calculus, Order order, Duality duality>
template <typename SCellMap>
void
KForm<Calculus, order, duality>::applyToSCellMap(SCellMap& scell_map) const
{
    Order primal_order = order;
    if (duality == DUAL)
        primal_order = Calculus::dimension-order;

    for (int index=0; index<size(); index++)
        scell_map[calculus.index_cells[primal_order][index]] = container(index);
}

template <typename Calculus, Order order, Duality duality>
typename KForm<Calculus, order, duality>::SCell
KForm<Calculus, order, duality>::getSCell(const KForm<Calculus, order, duality>::Index& index) const
{
    const Order& actual_order = calculus.actualOrder(order, duality);
    const SCell& cell = calculus.index_cells[actual_order][index];
    ASSERT( calculus.kspace.sDim(cell) == actual_order );
    return cell;
}

template <typename Calculus, Order order, Duality duality>
std::ostream&
operator<<(std::ostream& os, const KForm<Calculus, order, duality>& form)
{
    return os << duality << " " << order << "-form (" << form.size() << ")";
}

template <typename Calculus, Order order, Duality duality>
KForm<Calculus, order, duality>
operator+(const KForm<Calculus, order, duality>& form_a, const KForm<Calculus, order, duality>& form_b)
{
    return KForm<Calculus, order, duality>(form_a.calculus, form_a.container + form_b.container);
}

template <typename Calculus, Order order, Duality duality>
KForm<Calculus, order, duality>
operator*(const typename Calculus::Scalar& scalar, const KForm<Calculus, order, duality>& form)
{
    return KForm<Calculus, order, duality>(form.calculus, scalar * form.container);
}

