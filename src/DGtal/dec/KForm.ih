/**
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as
 *  published by the Free Software Foundation, either version 3 of the
 *  License, or  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 **/

/**
 * @file KForm.ih
 * @author Pierre Gueth (\c pierre.gueth@liris.cnrs.fr )
 * Laboratoire d'InfoRmatique en Image et Systemes d'information - LIRIS (CNRS, UMR 5205), CNRS, France
 *
 * @date 2014/03/26
 *
 * Implementation of inline methods defined in KForm.h
 *
 * This file is part of the DGtal library.
 */

///////////////////////////////////////////////////////////////////////////////
// IMPLEMENTATION of inline methods.
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// ----------------------- Standard services ------------------------------

template <typename Calculus, DGtal::Order order, DGtal::Duality duality>
DGtal::KForm<Calculus, order, duality>::KForm(const Calculus& _calculus)
    : calculus(_calculus), container(_calculus.kFormLength(order, duality))
{
    clear();
}

template <typename Calculus, DGtal::Order order, DGtal::Duality duality>
DGtal::KForm<Calculus, order, duality>::KForm(const Calculus& _calculus, const Container& _container)
    : calculus(_calculus), container(_container)
{
    ASSERT( calculus.kFormLength(order, duality) == container.rows() );
}

template <typename Calculus, DGtal::Order order, DGtal::Duality duality>
DGtal::KForm<Calculus, order, duality>&
DGtal::KForm<Calculus, order, duality>::operator=(const KForm& _form)
{
    container = _form.container;
    const_cast<Calculus&>(calculus) = _form.calculus;
    return *this;
}

///////////////////////////////////////////////////////////////////////////////
// Interface - public :

template <typename Calculus, DGtal::Order order, DGtal::Duality duality>
void
DGtal::KForm<Calculus, order, duality>::selfDisplay(std::ostream& out) const
{
    out << duality << " " << order << "-form (" << container.rows() << ")";
}

template <typename Calculus, DGtal::Order order, DGtal::Duality duality>
template <typename Accum>
void
DGtal::KForm<Calculus, order, duality>::applyToAccum(Accum& scell_map) const
{
    Order primal_order = order;
    if (duality == DUAL)
        primal_order = Calculus::dimension-order;

    for (int index=0; index<container.rows(); index++)
        scell_map[calculus.index_cells[primal_order][index]] = container(index);
}

template <typename Calculus, DGtal::Order order, DGtal::Duality duality>
typename Calculus::SCell
DGtal::KForm<Calculus, order, duality>::getSCell(const typename Calculus::Index& index) const
{
    const Order& actual_order = calculus.actualOrder(order, duality);
    const typename Calculus::SCell& cell = calculus.index_cells[actual_order][index];
    ASSERT( calculus.kspace.sDim(cell) == actual_order );
    return cell;
}

template <typename Calculus, DGtal::Order order, DGtal::Duality duality>
void
DGtal::KForm<Calculus, order, duality>::clear()
{
    container.clear();
}

template <typename Calculus, DGtal::Order order, DGtal::Duality duality>
bool
DGtal::KForm<Calculus, order, duality>::isValid() const
{
    return true;
}

///////////////////////////////////////////////////////////////////////////////
// Implementation of inline functions                                        //

template <typename Calculus, DGtal::Order order, DGtal::Duality duality>
std::ostream&
//FIXME DGtal::
operator<<(std::ostream& out, const DGtal::KForm<Calculus, duality, order>& object)
{
    object.selfDisplay(out);
    return out;
}

template <typename Calculus, DGtal::Order order, DGtal::Duality duality>
DGtal::KForm<Calculus, order, duality>
DGtal::operator+(const DGtal::KForm<Calculus, order, duality>& form_a, const DGtal::KForm<Calculus, order, duality>& form_b)
{
    return KForm<Calculus, order, duality>(form_a.calculus, form_a.container + form_b.container);
}

template <typename Calculus, DGtal::Order order, DGtal::Duality duality>
DGtal::KForm<Calculus, order, duality>
DGtal::operator-(const DGtal::KForm<Calculus, order, duality>& form_a, const DGtal::KForm<Calculus, order, duality>& form_b)
{
    return DGtal::KForm<Calculus, order, duality>(form_a.calculus, form_a.container - form_b.container);
}

template <typename Calculus, DGtal::Order order, DGtal::Duality duality>
DGtal::KForm<Calculus, order, duality>
DGtal::operator*(const typename Calculus::Scalar& scalar, const DGtal::KForm<Calculus, order, duality>& form)
{
    return DGtal::KForm<Calculus, order, duality>(form.calculus, scalar * form.container);
}


//                                                                           //
///////////////////////////////////////////////////////////////////////////////
