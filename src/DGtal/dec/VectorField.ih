/**
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as
 *  published by the Free Software Foundation, either version 3 of the
 *  License, or  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 **/

/**
 * @file VectorField.ih
 * @author Pierre Gueth (\c pierre.gueth@liris.cnrs.fr )
 * Laboratoire d'InfoRmatique en Image et Systemes d'information - LIRIS (CNRS, UMR 5205), CNRS, France
 *
 * @date 2014/03/26
 *
 * Implementation of inline methods defined in VectorField.h
 *
 * This file is part of the DGtal library.
 */

///////////////////////////////////////////////////////////////////////////////
// IMPLEMENTATION of inline methods.
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// ----------------------- Standard services ------------------------------

template <typename Calculus, DGtal::Duality duality>
DGtal::VectorField<Calculus, duality>::VectorField(ConstAlias<Calculus> _calculus)
    : myCalculus(&_calculus)
{
    for (typename Calculus::Dimension dim=0; dim<Calculus::dimension; dim++)
        myCoordinates[dim] = typename Calculus::Vector(myCalculus->kFormLength(0, duality));
    clear();
}

template <typename Calculus, DGtal::Duality duality>
DGtal::VectorField<Calculus, duality>::VectorField(ConstAlias<Calculus> _calculus, const Coordinates& _coordinates)
    : myCoordinates(_coordinates), myCalculus(&_calculus)
{
}

template <typename Calculus, DGtal::Duality duality>
DGtal::VectorField<Calculus, duality>&
DGtal::VectorField<Calculus, duality>::operator=(const VectorField& _vector_field)
{
    myCoordinates = _vector_field.myCoordinates;
    myCalculus = _vector_field.myCalculus;
    return *this;
}

///////////////////////////////////////////////////////////////////////////////
// Interface - public :

template <typename Calculus, DGtal::Duality duality>
void
DGtal::VectorField<Calculus, duality>::selfDisplay(std::ostream& out) const
{
    out << "[" << duality << " vector field (" << myCoordinates.size() << "x" << myCoordinates[0].rows() << ")]";
}

template <typename Calculus, DGtal::Duality duality>
void
DGtal::VectorField<Calculus, duality>::clear()
{
    for (typename Calculus::Dimension dim=0; dim<Calculus::dimension; dim++)
        myCoordinates[dim].clear();
}

template <typename Calculus, DGtal::Duality duality>
bool
DGtal::VectorField<Calculus, duality>::isValid() const
{
    return myCalculus != NULL;
}

template <typename Calculus, DGtal::Duality duality>
DGtal::VectorField<Calculus, duality>
DGtal::VectorField<Calculus, duality>::normalized(const typename Calculus::Scalar& epsilon) const
{
    VectorField normalized_vector_field(*myCalculus);
    Coordinates& normalized_coordinates = normalized_vector_field.myCoordinates;

    typedef typename DGtal::PointVector<Calculus::dimension, typename Calculus::Scalar> Point;

    for (typename Calculus::Index index=0; index<myCalculus->kFormLength(0, duality); index++)
    {
        Point arrow;
        for (typename Calculus::Dimension dim=0; dim<Calculus::dimension; dim++)
            arrow[dim] = myCoordinates[dim](index);

        const typename Calculus::Scalar& norm = arrow.norm();
        if (norm <= epsilon) continue;
        arrow /= norm;

        for (typename Calculus::Dimension dim=0; dim<Calculus::dimension; dim++)
            normalized_coordinates[dim](index) = arrow[dim];
    }

    return normalized_vector_field;
}

template <typename Calculus, DGtal::Duality duality>
template <typename Board>
void
DGtal::VectorField<Calculus, duality>::display2D(Board& board, const typename Calculus::Scalar& scale, const typename Calculus::Scalar& epsilon) const
{
    BOOST_STATIC_ASSERT(( Calculus::dimension == 2 ));

    for (typename Calculus::Index index=0; index<myCalculus->kFormLength(0, duality); index++)
    {
        const typename Calculus::SCell& cell = myCalculus->getSCell(0, duality, index);
        Z2i::RealPoint origin = cell.myCoordinates/2.;
        if (duality == PRIMAL)
            origin -= Z2i::RealPoint(.5,.5);

        Z2i::RealPoint arrow;
        for (typename Calculus::Dimension dim=0; dim<Calculus::dimension; dim++)
            arrow[dim] = myCoordinates[dim](index);

        arrow *= scale;
        if (!finite(arrow[0]) || !finite(arrow[1])) continue;
        const typename Calculus::Scalar& norm = arrow.norm();
        if (norm <= epsilon) continue;

        board.drawArrow(origin[0],origin[1],origin[0]+arrow[0],origin[1]+arrow[1]);
    }

}

template <typename Calculus, DGtal::Duality duality>
template <typename Viewer>
void
DGtal::VectorField<Calculus, duality>::display3D(Viewer& viewer, const typename Calculus::Scalar& scale, const typename Calculus::Scalar& epsilon) const
{
    BOOST_STATIC_ASSERT(( Calculus::dimension == 3 ));

#if defined(WITH_VISU3D_QGLVIEWER)
    viewer << DGtal::CustomColors3D(DGtal::Color::Black, DGtal::Color::White);

    for (typename Calculus::Index index=0; index<myCalculus->kFormLength(0, duality); index++)
    {
        const typename Calculus::SCell& cell = myCalculus->getSCell(0, duality, index);
        Z3i::RealPoint origin = cell.myCoordinates/2.;
        if (duality == PRIMAL)
            origin -= Z3i::RealPoint(.5,.5,.5);

        Z3i::RealPoint arrow;
        for (typename Calculus::Dimension dim=0; dim<Calculus::dimension; dim++)
            arrow[dim] = myCoordinates[dim](index);

        arrow *= scale;
        if (!finite(arrow[0]) || !finite(arrow[1]) || !finite(arrow[2])) continue;
        const typename Calculus::Scalar& norm = arrow.norm();
        if (norm <= epsilon) continue;

        viewer.addCone(origin, origin+arrow);
    }
#endif

}

template <typename Calculus, DGtal::Duality duality>
DGtal::KForm<Calculus, 0, duality>
DGtal::VectorField<Calculus, duality>::extractZeroForm(const Dimension& dim) const
{
    ASSERT( dim < Calculus::dimension );

    typedef KForm<Calculus, 0, duality> ZeroForm;
    ZeroForm zero_form(*myCalculus);
    ASSERT( zero_form.myContainer.rows() == myCoordinates[dim].rows() );

    zero_form.myContainer = myCoordinates[dim];

    return zero_form;
}

///////////////////////////////////////////////////////////////////////////////
// Implementation of inline functions                                        //

template <typename Calculus, DGtal::Duality duality>
std::ostream&
DGtal::operator<<(std::ostream & out, const DGtal::VectorField<Calculus, duality>& object)
{
    object.selfDisplay(out);
    return out;
}

template <typename Calculus, DGtal::Duality duality>
DGtal::VectorField<Calculus, duality>
DGtal::operator+(const DGtal::VectorField<Calculus, duality>& _vector_field_a, const DGtal::VectorField<Calculus, duality>& _vector_field_b)
{
    ASSERT( _vector_field_a.myCalculus == _vector_field_b.myCalculus );
    typedef typename DGtal::VectorField<Calculus, duality>::Coordinates Coordinates;
    Coordinates myCoordinates;
    for (typename Calculus::Dimension dim=0; dim<Calculus::dimension; dim++)
        myCoordinates[dim] = _vector_field_a.myCoordinates[dim] + _vector_field_b.myCoordinates[dim];
    return DGtal::VectorField<Calculus, duality>(*_vector_field_a.myCalculus, myCoordinates);
}

template <typename Calculus, DGtal::Duality duality>
DGtal::VectorField<Calculus, duality>
DGtal::operator-(const DGtal::VectorField<Calculus, duality>& _vector_field_a, const DGtal::VectorField<Calculus, duality>& _vector_field_b)
{
    ASSERT( _vector_field_a.myCalculus == _vector_field_b.myCalculus );
    typedef typename DGtal::VectorField<Calculus, duality>::Coordinates Coordinates;
    Coordinates myCoordinates;
    for (typename Calculus::Dimension dim=0; dim<Calculus::dimension; dim++)
        myCoordinates[dim] = _vector_field_a.myCoordinates[dim] - _vector_field_b.myCoordinates[dim];
    return DGtal::VectorField<Calculus, duality>(*_vector_field_a.myCalculus, myCoordinates);
}

template <typename Calculus, DGtal::Duality duality>
DGtal::VectorField<Calculus, duality>
DGtal::operator*(const typename Calculus::Scalar& _scalar, const DGtal::VectorField<Calculus, duality>& _vector_field)
{
    typedef typename DGtal::VectorField<Calculus, duality>::Coordinates Coordinates;
    Coordinates myCoordinates;
    for (typename Calculus::Dimension dim=0; dim<Calculus::dimension; dim++)
        myCoordinates[dim] = _scalar * _vector_field.myCoordinates[dim];
    return DGtal::VectorField<Calculus, duality>(*_vector_field.myCalculus, myCoordinates);
}

//                                                                           //
///////////////////////////////////////////////////////////////////////////////


