/**
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as
 *  published by the Free Software Foundation, either version 3 of the
 *  License, or  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 **/

/**
 * @file VectorField.ih
 * @author Pierre Gueth (\c pierre.gueth@liris.cnrs.fr )
 * Laboratoire d'InfoRmatique en Image et Systemes d'information - LIRIS (CNRS, UMR 5205), CNRS, France
 *
 * @date 2014/03/26
 *
 * Implementation of inline methods defined in VectorField.h
 *
 * This file is part of the DGtal library.
 */

///////////////////////////////////////////////////////////////////////////////
// IMPLEMENTATION of inline methods.
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// ----------------------- Standard services ------------------------------

template <typename Calculus, DGtal::Duality duality>
DGtal::VectorField<Calculus, duality>::VectorField(const Calculus& _calculus)
    : calculus(_calculus)
{
    for (typename Calculus::Dimension dim=0; dim<Calculus::dimension; dim++)
        coordinates[dim] = typename Calculus::Vector(calculus.kFormLength(0, duality));
    clear();
}

template <typename Calculus, DGtal::Duality duality>
DGtal::VectorField<Calculus, duality>::VectorField(const Calculus& _calculus, const Coordinates& _coordinates)
    : calculus(_calculus), coordinates(_coordinates)
{
}

template <typename Calculus, DGtal::Duality duality>
DGtal::VectorField<Calculus, duality>&
DGtal::VectorField<Calculus, duality>::operator=(const VectorField& _vector_field)
{
    coordinates = _vector_field.coordinates;
    const_cast<Calculus&>(calculus) = _vector_field.calculus;
    return *this;
}

///////////////////////////////////////////////////////////////////////////////
// Interface - public :

template <typename Calculus, DGtal::Duality duality>
void
DGtal::VectorField<Calculus, duality>::selfDisplay(std::ostream& out) const
{
    out << duality << " vector field (" << coordinates.size() << "x" << coordinates[0].rows() << ")";
}

template <typename Calculus, DGtal::Duality duality>
void
DGtal::VectorField<Calculus, duality>::clear()
{
    for (typename Calculus::Dimension dim=0; dim<Calculus::dimension; dim++)
        coordinates[dim].clear();
}

template <typename Calculus, DGtal::Duality duality>
bool
DGtal::VectorField<Calculus, duality>::isValid() const
{
    return true;
}

template <typename Calculus, DGtal::Duality duality>
template <typename Board>
void
DGtal::VectorField<Calculus, duality>::display2D(Board& board, const double& scale) const
{
    BOOST_STATIC_ASSERT(( Calculus::dimension == 2 ));

    typedef boost::array<double, Calculus::dimension> PointF;

    ASSERT( calculus.index_cells[calculus.actualOrder(0, duality)].size() == calculus.kFormLength(0, duality) );
    for (typename Calculus::Index index=0; index<calculus.kFormLength(0, duality); index++)
    {
        const typename Calculus::SCell& cell = calculus.getSCell(0, duality, index);
        PointF origin;
        PointF arrow;
        for (typename Calculus::Dimension dim=0; dim<Calculus::dimension; dim++)
        {
            origin[dim] = cell.myCoordinates[dim]/2.;
            arrow[dim] = coordinates[dim](index);
        }

        if (!arrow[0] && !arrow[1])
            continue;

        board.drawArrow(-.5+origin[0],-.5+origin[1],-.5+origin[0]+scale*arrow[0],-.5+origin[1]+scale*arrow[1]);
    }

}

template <typename Calculus, DGtal::Duality duality>
DGtal::KForm<Calculus, 0, duality>
DGtal::VectorField<Calculus, duality>::extractZeroForm(const Dimension& dim) const
{
    ASSERT( dim < Calculus::dimension );

    typedef KForm<Calculus, 0, duality> ZeroForm;
    ZeroForm zero_form(calculus);
    ASSERT( zero_form.container.rows() == coordinates[dim].rows() );

    zero_form.container = coordinates[dim];

    return zero_form;
}

///////////////////////////////////////////////////////////////////////////////
// Implementation of inline functions                                        //

template <typename Calculus, DGtal::Duality duality>
std::ostream&
DGtal::operator<<(std::ostream & out, const DGtal::VectorField<Calculus, duality>& object)
{
    object.selfDisplay(out);
    return out;
}

template <typename Calculus, DGtal::Duality duality>
DGtal::VectorField<Calculus, duality>
DGtal::operator+(const DGtal::VectorField<Calculus, duality>& _vector_field_a, const DGtal::VectorField<Calculus, duality>& _vector_field_b)
{
    typedef typename DGtal::VectorField<Calculus, duality>::Coordinates Coordinates;
    Coordinates coordinates;
    for (typename Calculus::Dimension dim=0; dim<Calculus::dimension; dim++)
        coordinates[dim] = _vector_field_a.coordinates[dim] + _vector_field_b.coordinates[dim];
    return DGtal::VectorField<Calculus, duality>(_vector_field_a.calculus, coordinates);
}

template <typename Calculus, DGtal::Duality duality>
DGtal::VectorField<Calculus, duality>
DGtal::operator-(const DGtal::VectorField<Calculus, duality>& _vector_field_a, const DGtal::VectorField<Calculus, duality>& _vector_field_b)
{
    typedef typename DGtal::VectorField<Calculus, duality>::Coordinates Coordinates;
    Coordinates coordinates;
    for (typename Calculus::Dimension dim=0; dim<Calculus::dimension; dim++)
        coordinates[dim] = _vector_field_a.coordinates[dim] - _vector_field_b.coordinates[dim];
    return DGtal::VectorField<Calculus, duality>(_vector_field_a.calculus, coordinates);
}

template <typename Calculus, DGtal::Duality duality>
DGtal::VectorField<Calculus, duality>
DGtal::operator*(const typename Calculus::Scalar& _scalar, const DGtal::VectorField<Calculus, duality>& _vector_field)
{
    typedef typename DGtal::VectorField<Calculus, duality>::Coordinates Coordinates;
    Coordinates coordinates;
    for (typename Calculus::Dimension dim=0; dim<Calculus::dimension; dim++)
        coordinates[dim] = _scalar * _vector_field.coordinates[dim];
    return DGtal::VectorField<Calculus, duality>(_vector_field.calculus, coordinates);
}

//                                                                           //
///////////////////////////////////////////////////////////////////////////////


