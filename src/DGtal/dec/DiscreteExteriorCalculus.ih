/**
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as
 *  published by the Free Software Foundation, either version 3 of the
 *  License, or  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 **/

/**
 * @file DiscreteExteriorCalculus.ih
 * @author Pierre Gueth (\c pierre.gueth@liris.cnrs.fr )
 * Laboratoire d'InfoRmatique en Image et Systemes d'information - LIRIS (CNRS, UMR 5205), CNRS, France
 *
 * @date 2014/03/27
 *
 * Implementation of inline methods defined in DiscreteExteriorCalculus.h
 *
 * This file is part of the DGtal library.
 */

///////////////////////////////////////////////////////////////////////////////
// IMPLEMENTATION of inline methods.
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// ----------------------- Standard services ------------------------------

template <typename D, typename LAB>
template <typename DigitalSet>
DGtal::DiscreteExteriorCalculus<D, LAB>::DiscreteExteriorCalculus(const DigitalSet& _set)
    : domain(_set.domain()), kspace(), cell_size_ratio(*this), cell_indexes(*this)
{
    BOOST_STATIC_ASSERT(( boost::is_same<typename DigitalSet::Domain, Domain>::value ));

    // init khalimsky space
    // FIXME borders are removed from set => better not initialize kspace
    // FIXME should be open or closed?
    //bool kspace_init_ok = const_cast<KSpace&>(kspace).init(domain.lowerBound(), domain.upperBound(), false);
    //ASSERT(kspace_init_ok);

    // compute raw cell size
    for (typename DigitalSet::ConstIterator ri=_set.begin(), rie=_set.end(); ri!=rie; ri++)
    {
        const Point& point = *ri;
        const SCell cell_point = kspace.sSpel(point, KSpace::POS);

        Points neighborhood;
        neighborhoodRecurseSizeMask(dimension-1, cell_point.myCoordinates, neighborhood);
        for (typename Points::const_iterator pi=neighborhood.begin(), pie=neighborhood.end(); pi!=pie; pi++)
        {
            const SCell cell = kspace.sCell(*pi, KSpace::POS);
            cell_size_ratio[cell] += 1;
        }
    }

    // normalize cell size
    for (typename SizeRatio::ConstIterator csi=cell_size_ratio.begin(), csie=cell_size_ratio.end(); csie!=csi; csi++)
    {
        const SCell& cell = csi->first;
        const Dimension dual_dim = dimension-kspace.sDim(cell);
        const Scalar factor = 1/pow(2, dual_dim);

        typename SizeRatio::Value size = csi->second;
        ASSERT(size);
        size *= factor;

        cell_size_ratio[cell] = size;
    }

    // compute cell index
    for (typename SizeRatio::ConstIterator csi=cell_size_ratio.begin(), csie=cell_size_ratio.end(); csie!=csi; csi++)
    {
        const SCell& cell = csi->first;
        const Dimension dim = kspace.sDim(cell);
        ASSERT( kspace.sSign(cell) == KSpace::POS );
        ASSERT( cell.myPositive == true );

        cell_indexes[cell] = index_cells[dim].size();
        index_cells[dim].push_back(cell);
    }
}

template <typename D, typename LAB>
DGtal::DiscreteExteriorCalculus<D, LAB>::DiscreteExteriorCalculus(const D& _domain)
    : domain(_domain), kspace(), cell_size_ratio(*this), cell_indexes(*this)
{
}

///////////////////////////////////////////////////////////////////////////////
// Interface - public :

template <typename D, typename LAB>
bool
DGtal::DiscreteExteriorCalculus<D, LAB>::insertSCell(const SCell& _cell, const Scalar& _primal_size)
{
    SCell abs_cell = _cell;
    Scalar abs_primal_size = _primal_size;

    if (!abs_cell.myPositive)
    {
        abs_cell = kspace.sOpp(abs_cell);
        abs_primal_size = -abs_primal_size;
    }

    const bool need_insert = (cell_indexes.find(abs_cell) == cell_indexes.end());
    const Dimension dim = kspace.sDim(abs_cell);

    if (need_insert)
    {
        cell_indexes[abs_cell] = index_cells[dim].size();
        index_cells[dim].push_back(abs_cell);
    }

    cell_size_ratio[abs_cell] = abs_primal_size;

    return need_insert;
}

template <typename D, typename LAB>
void
DGtal::DiscreteExteriorCalculus<D, LAB>::selfDisplay(std::ostream & os) const
{
    typedef DiscreteExteriorCalculus<D, LAB> Calculus;

    os << "[DiscreteExteriorCalculus ";
    os << domain;
    for (DGtal::Order order=0; order<=Calculus::dimension; order++)
        os << " | primal " << order << "-cells <-> dual " << Calculus::dimension-order << "-cells (" << kFormLength(order, PRIMAL) << ")";
    os << "]";
}

template <typename D, typename LAB>
void
DGtal::DiscreteExteriorCalculus<D, LAB>::neighborhoodRecurseSizeMask(const Dimension& dimension, const Point& current_point, Points& neighborhood)
{
    typedef typename Point::Coordinate Coordinate;

    for (Coordinate delta=-1; delta<2; delta++)
    {
        Point point = current_point;
        point[dimension] += delta;

        if (dimension==0)
        {
            neighborhood.push_back(point);
            continue;
        }

        neighborhoodRecurseSizeMask(dimension-1, point, neighborhood);
    }
}

template <typename D, typename LAB>
template <DGtal::Order order, DGtal::Duality duality>
DGtal::LinearOperator<DGtal::DiscreteExteriorCalculus<D, LAB>, order, duality, order, duality>
DGtal::DiscreteExteriorCalculus<D, LAB>::identity() const
{

    typedef LinearOperator<DiscreteExteriorCalculus<D, LAB>, order, duality, order, duality> Operator;
    Operator id(*this);
    id.myContainer.setIdentity();
    return id;
}

template <typename D, typename LAB>
template <DGtal::Order order, DGtal::Duality duality>
DGtal::LinearOperator<DGtal::DiscreteExteriorCalculus<D, LAB>, order, duality, order+1, duality>
DGtal::DiscreteExteriorCalculus<D, LAB>::derivative() const
{
    BOOST_STATIC_ASSERT(( order >= 0 ));
    BOOST_STATIC_ASSERT(( order < dimension ));

    typedef LinearOperator<DiscreteExteriorCalculus<D, LAB>, order, duality, order+1, duality> Derivative;
    Derivative derivative(*this);
    ASSERT( derivative.myContainer.rows() == kFormLength(order+1, duality) );
    ASSERT( derivative.myContainer.cols() == kFormLength(order, duality) );

    // iterate over output form values
    for (Index index_output=0; index_output<derivative.myContainer.rows(); index_output++)
    {
        const SCell& cell = index_cells[actualOrder(order+1, duality)][index_output];
        ASSERT( kspace.sSign(cell) == KSpace::POS );
        ASSERT( cell.myPositive == true );

        // find hodge sign
        const Scalar sign = derivativeSign(cell, duality);

        // find cell border
        typedef typename KSpace::SCells Border;
        Border border;
        if (duality == PRIMAL) border = kspace.sLowerIncident(cell);
        else border = kspace.sUpperIncident(cell);

        // iterate over cell border
        for (typename Border::const_iterator bi=border.begin(), bie=border.end(); bi!=bie; bi++)
        {
            const SCell& cell_border = *bi;
            ASSERT( kspace.sDim(cell_border) == actualOrder(order, duality) );

            const typename Indexes::ConstIterator cell_index_iter = cell_indexes.find(absoluteCell(cell_border));
            if ( cell_index_iter == cell_indexes.end() )
                continue;

            const Index index_input = cell_index_iter->second;
            ASSERT( index_input < derivative.myContainer.cols() );

            // fill container with cell sign
            derivative.myContainer(index_output, index_input) = sign * derivativeSign(cell_border, duality);
        }
    }

    return derivative;
}

template <typename D, typename LAB>
template <DGtal::Order order>
DGtal::LinearOperator<DGtal::DiscreteExteriorCalculus<D, LAB>, order, DGtal::PRIMAL, DGtal::DiscreteExteriorCalculus<D, LAB>::dimension-order, DGtal::DUAL>
DGtal::DiscreteExteriorCalculus<D, LAB>::primalHodge() const
{
    BOOST_STATIC_ASSERT(( order >= 0 ));
    BOOST_STATIC_ASSERT(( order <= dimension ));

    typedef LinearOperator<DiscreteExteriorCalculus<D, LAB>, order, PRIMAL, dimension-order, DUAL> PrimalHodge;
    PrimalHodge primal_hodge(*this);
    ASSERT( primal_hodge.myContainer.rows() == primal_hodge.myContainer.cols() );
    ASSERT( primal_hodge.myContainer.rows() == kFormLength(order, PRIMAL) );

    // iterate over output form values
    for (Index index=0; index<primal_hodge.myContainer.rows(); index++)
    {
        const SCell& cell = index_cells[order][index];
        const typename SizeRatio::ConstIterator iter_size = cell_size_ratio.find(cell);
        ASSERT(iter_size != cell_size_ratio.end());

        primal_hodge.myContainer(index, index) = hodgeSign(cell, PRIMAL)/iter_size->second;
    }

    return primal_hodge;
}

template <typename D, typename LAB>
template <DGtal::Order order>
DGtal::LinearOperator<DGtal::DiscreteExteriorCalculus<D, LAB>, order, DGtal::DUAL, DGtal::DiscreteExteriorCalculus<D, LAB>::dimension-order, DGtal::PRIMAL>
DGtal::DiscreteExteriorCalculus<D, LAB>::dualHodge() const
{
    BOOST_STATIC_ASSERT(( order >= 0 ));
    BOOST_STATIC_ASSERT(( order <= dimension ));

    typedef LinearOperator<DiscreteExteriorCalculus<D, LAB>, order, DUAL, DiscreteExteriorCalculus<D, LAB>::dimension-order, PRIMAL> DualHodge;
    DualHodge dual_hodge(*this);
    ASSERT( dual_hodge.myContainer.rows() == dual_hodge.myContainer.cols() );
    ASSERT( dual_hodge.myContainer.rows() == kFormLength(order, DUAL) );

    // iterate over output form values
    for (Index index=0; index<dual_hodge.myContainer.rows(); index++)
    {
        const SCell& cell = index_cells[dimension-order][index];
        const typename SizeRatio::ConstIterator iter_size = cell_size_ratio.find(cell);
        ASSERT(iter_size != cell_size_ratio.end());

        dual_hodge.myContainer(index, index) = hodgeSign(cell, DUAL)*iter_size->second;
    }

    return dual_hodge;
}

template <typename D, typename LAB>
template <DGtal::Duality duality>
DGtal::VectorField<DGtal::DiscreteExteriorCalculus<D, LAB>, duality>
DGtal::DiscreteExteriorCalculus<D, LAB>::sharp(const DGtal::KForm<DGtal::DiscreteExteriorCalculus<D, LAB>, 1, duality>& one_form) const
{
    typedef VectorField<DiscreteExteriorCalculus, duality> Field;
    Field field(*this);

    ASSERT( field.myCoordinates.size() == dimension);
    for (Dimension dim=0; dim<dimension; dim++)
        ASSERT( field.myCoordinates[dim].rows() == kFormLength(0, duality) );

    // iterate over points
    for (int kk=0; kk<kFormLength(0, duality); kk++)
    {
        const SCell& cell = index_cells[actualOrder(0, duality)][kk];
        ASSERT( kspace.sSign(cell) == KSpace::POS );
        ASSERT( cell.myPositive == true );

        typedef typename KSpace::SCells Edges;
        Edges edges;
        if (duality == PRIMAL) edges = kspace.sUpperIncident(cell);
        else edges = kspace.sLowerIncident(cell);

        // collect 1-form values over neighboring edges
        typedef boost::array<Scalar, dimension> Normalize;
        Normalize normalize;
        normalize.assign(0);
        for (typename Edges::const_iterator ei=edges.begin(), eie=edges.end(); ei!=eie; ei++)
        {
            const SCell& cell_border = absoluteCell(*ei);
            ASSERT( kspace.sDim(cell_border) == actualOrder(1, duality) );
            ASSERT( kspace.sSign(cell_border) == KSpace::POS );

            const typename Indexes::ConstIterator cell_border_index_iter = cell_indexes.find(cell_border);
            if (cell_border_index_iter == cell_indexes.end())
                continue;

            const Index& cell_border_index = cell_border_index_iter->second;
            ASSERT( cell_border_index < index_cells[actualOrder(1, duality)].size());
            ASSERT( cell_border_index < one_form.myContainer.rows() );

            const Dimension direction = edgeDirection(cell_border, duality);

            normalize[direction]++;
            field.myCoordinates[direction](kk) += one_form.myContainer(cell_border_index);
        }

        // normalize vector field
        for (Dimension dim=0; dim<dimension; dim++)
            if (normalize[dim])
                field.myCoordinates[dim](kk) /= normalize[dim];
    }

    return field;
}

template <typename D, typename LAB>
template <DGtal::Duality duality>
DGtal::KForm<DGtal::DiscreteExteriorCalculus<D, LAB>, 1, duality>
DGtal::DiscreteExteriorCalculus<D, LAB>::flat(const DGtal::VectorField<DGtal::DiscreteExteriorCalculus<D, LAB>, duality>& vector_field) const
{
    typedef KForm<DiscreteExteriorCalculus, 1, duality> OneForm;
    OneForm one_form(*this);

    // iterate over edges
    for (int kk=0; kk<kFormLength(1, duality); kk++)
    {
        const SCell& cell = index_cells[actualOrder(1, duality)][kk];
        ASSERT( kspace.sSign(cell) == KSpace::POS );
        ASSERT( cell.myPositive == true );

        const Dimension& direction = edgeDirection(cell, duality);

        typedef typename KSpace::SCells Points;
        Points points;
        if (duality == PRIMAL) points = kspace.sLowerIncident(cell);
        else points = kspace.sUpperIncident(cell);

        // project vector field along edge from neighboring points
        ASSERT( points.size() == 2 );
        Scalar normalize = 0;
        for (typename Points::const_iterator pi=points.begin(), pie=points.end(); pi!=pie; pi++)
        {
            const SCell cell_border = absoluteCell(*pi);
            ASSERT( kspace.sDim(cell_border) == actualOrder(0, duality) );
            ASSERT( kspace.sSign(cell_border) == KSpace::POS );

            const typename Indexes::ConstIterator cell_border_index_iter = cell_indexes.find(cell_border);
            if (cell_border_index_iter == cell_indexes.end())
                continue;

            const Index& cell_border_index = cell_border_index_iter->second;
            ASSERT( cell_border_index < index_cells[actualOrder(0, duality)].size());
            ASSERT( cell_border_index < kFormLength(0, duality) );

            normalize++;
            one_form.myContainer(kk) += vector_field.myCoordinates[direction](cell_border_index);
        }

        // normalize one-form
        if (normalize)
            one_form.myContainer(kk) /= normalize;
    }

    return one_form;
}

template <typename D, typename LAB>
typename DGtal::DiscreteExteriorCalculus<D, LAB>::SizeRatio
DGtal::DiscreteExteriorCalculus<D, LAB>::getSizeRatio() const
{
    return cell_size_ratio;
}

template <typename D, typename LAB>
typename DGtal::DiscreteExteriorCalculus<D, LAB>::Indexes
DGtal::DiscreteExteriorCalculus<D, LAB>::getIndexes() const
{
    return cell_indexes;
}

template <typename D, typename LAB>
typename DGtal::DiscreteExteriorCalculus<D, LAB>::SCell
DGtal::DiscreteExteriorCalculus<D, LAB>::getSCell(const Order& order, const Duality& duality, const Index& index) const
{
    const Order& actual_order = actualOrder(order, duality);
    const SCell& cell = index_cells[actual_order][index];
    ASSERT( kspace.sDim(cell) == actual_order );
    return cell;
}

template <typename D, typename LAB>
typename DGtal::DiscreteExteriorCalculus<D, LAB>::Index
DGtal::DiscreteExteriorCalculus<D, LAB>::getIndex(const SCell& cell) const
{
    typedef typename Indexes::ConstIterator IndexesConstIterator;
    IndexesConstIterator iter = cell_indexes.find(absoluteCell(cell));
    ASSERT( iter != cell_indexes.end() );
    return iter->second;
}

template <typename D, typename LAB>
typename DGtal::DiscreteExteriorCalculus<D, LAB>::ConstIterator
DGtal::DiscreteExteriorCalculus<D, LAB>::begin() const
{
    return cell_size_ratio.begin();
}

template <typename D, typename LAB>
typename DGtal::DiscreteExteriorCalculus<D, LAB>::ConstIterator
DGtal::DiscreteExteriorCalculus<D, LAB>::end() const
{
    return cell_size_ratio.end();
}

template <typename D, typename LAB>
typename DGtal::DiscreteExteriorCalculus<D, LAB>::Index
DGtal::DiscreteExteriorCalculus<D, LAB>::kFormLength(const DGtal::Order& order, const DGtal::Duality& duality) const
{
    return index_cells[actualOrder(order, duality)].size();
}

template <typename D, typename LAB>
DGtal::Order
DGtal::DiscreteExteriorCalculus<D, LAB>::actualOrder(const DGtal::Order& order, const DGtal::Duality& duality) const
{
    return (duality == PRIMAL) ? order : dimension-order;
}

template <typename D, typename LAB>
typename DGtal::DiscreteExteriorCalculus<D, LAB>::Scalar
DGtal::DiscreteExteriorCalculus<D, LAB>::hodgeSign(const SCell& cell, const DGtal::Duality& duality) const
{
    const Dimension& primal_dim = kspace.sDim(cell);
    const bool apply_sign = ((dimension-primal_dim)*primal_dim % 2 == 1);
    if (!apply_sign) return cell.myPositive ? 1 : -1;

    typename KSpace::DirIterator di = kspace.sDirs(cell);

    Dimension span_count = 0;
    Dimension iter_count = 0;
    while (di!=0)
    {
        span_count += *di;
        iter_count ++;
        ++di;
    }
    ASSERT( iter_count == primal_dim );
    if (duality == DUAL) span_count++;

    const Scalar sign = pow(-1, span_count);
    return cell.myPositive ? sign : -sign;
}

template <typename D, typename LAB>
typename DGtal::DiscreteExteriorCalculus<D, LAB>::Scalar
DGtal::DiscreteExteriorCalculus<D, LAB>::derivativeSign(const SCell& cell, const DGtal::Duality& duality) const
{
    if (duality == PRIMAL) return cell.myPositive ? 1 : -1;
    return hodgeSign(cell, PRIMAL);
}

template <typename D, typename LAB>
typename DGtal::DiscreteExteriorCalculus<D, LAB>::SCell
DGtal::DiscreteExteriorCalculus<D, LAB>::absoluteCell(const SCell& cell) const
{
    if (cell.myPositive) return cell;
    return kspace.sOpp(cell);
}

template <typename D, typename LAB>
typename DGtal::DiscreteExteriorCalculus<D, LAB>::Dimension
DGtal::DiscreteExteriorCalculus<D, LAB>::edgeDirection(const SCell& cell, const DGtal::Duality& duality) const
{
    ASSERT( kspace.sDim(cell) == actualOrder(1, duality) );

    typename KSpace::DirIterator di = kspace.sDirs(cell);
    if (duality == DUAL) di = kspace.sOrthDirs(cell);

    ASSERT( di != 0 );
    const Dimension direction = *di;
    ++di;
    ASSERT( !(di != 0) );
    ASSERT( direction < dimension );

    return direction;
}

template <typename D, typename LAB>
bool
DGtal::DiscreteExteriorCalculus<D, LAB>::isValid() const
{
    return true;
}

///////////////////////////////////////////////////////////////////////////////
// Implementation of inline functions                                        //

template <typename D, typename LAB>
std::ostream&
DGtal::operator<<(std::ostream & out, const DiscreteExteriorCalculus<D, LAB>& object)
{
  object.selfDisplay(out);
  return out;
}

//                                                                           //
///////////////////////////////////////////////////////////////////////////////
