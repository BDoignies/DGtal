/**
 * @file ColorMapInverter.ih
 * @author Sebastien Fourey (\c Sebastien.Fourey@greyc.ensicaen.fr )
 * Groupe de Recherche en Informatique, Image, Automatique et Instrumentation de Caen - GREYC (CNRS, UMR 6072), ENSICAEN, France
 *
 * @date 2010/07/19
 *
 * Implementation of inline methods defined in ColorMapInverter.h
 *
 * This file is part of the DGtal library.
 */


//////////////////////////////////////////////////////////////////////////////
#include <cstdlib>
//////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// IMPLEMENTATION of inline methods.
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// ----------------------- Standard services ------------------------------


template <typename PColorMap>
inline
DGtal::ColorMapInverter<PColorMap>
::ColorMapInverter( const PColorMap & aColorMap )
  : myColorMap( aColorMap )
{ }

template <typename PColorMap>
inline
DGtal::ColorMapInverter<PColorMap>
::ColorMapInverter( const ColorMapInverter<PColorMap> & other )
  : myColorMap( other.myColorMap )
{ 
}

template <typename PColorMap>
inline
DGtal::ColorMapInverter<PColorMap>::~ColorMapInverter()
{
}

template <typename PColorMap>
ColorMapInverter<PColorMap> &
ColorMapInverter<PColorMap>
::operator= ( const ColorMapInverter<PColorMap> & other )
{
  if ( &other != this ) {
    myColorMap = other.myColorMap;
  }
  return *this;
}

///////////////////////////////////////////////////////////////////////////////
// Interface - public :


template<typename PColorMap>
inline
const typename DGtal::ColorMapInverter<PColorMap>::ValueType &
DGtal::ColorMapInverter<PColorMap>::min() const
{
  return myColorMap.min();
}

template<typename PColorMap>
inline
const typename DGtal::ColorMapInverter<PColorMap>::ValueType &
DGtal::ColorMapInverter<PColorMap>::max() const
{
  return myColorMap.max();
}

template<typename PColorMap>
inline
LibBoard::Color
DGtal::ColorMapInverter<PColorMap>::operator()( const ValueType & value ) const
{
  return ColorMapInverter<PColorMap>::getColor( myColorMap, value );
}

/**
 * Writes/Displays the object on an output stream.
 * @param out the output stream where the object is written.
 */
template <typename PColorMap>
inline
void
DGtal::ColorMapInverter<PColorMap>::selfDisplay ( std::ostream & out ) const
{
  out << "[ColorMapInverter " 
      << " min=" << min()
      << " max=" << max()
      << " colormap=" << myColorMap
      << " ]";
}

/**
 * Checks the validity/consistency of the object.
 * @return 'true' if the object is valid, 'false' otherwise.
 */
template <typename PColorMap>
inline
bool
DGtal::ColorMapInverter<PColorMap>::isValid() const
{
    return true;
}


template <typename PColorMap>
inline
LibBoard::Color
DGtal::ColorMapInverter<PColorMap>::getColor
( const PColorMap & aColorMap, const ValueType & value )
{
  return aColorMap( aColorMap.max() - value );
}

///////////////////////////////////////////////////////////////////////////////
// Implementation of inline functions                                        //

template <typename PColorMap>
inline
std::ostream&
DGtal::operator<< ( std::ostream & out, 
		    const ColorMapInverter<PColorMap> & object )
{
  object.selfDisplay( out );
  return out;
}

//                                                                           //
///////////////////////////////////////////////////////////////////////////////


