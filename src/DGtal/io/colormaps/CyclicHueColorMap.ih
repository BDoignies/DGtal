/**
 * @file CyclicHueColorMap.ih
 * @author Sebastien Fourey (\c Sebastien.Fourey@greyc.ensicaen.fr )
 * Groupe de Recherche en Informatique, Image, Automatique et Instrumentation de Caen - GREYC (CNRS, UMR 6072), ENSICAEN, France
 *
 * @date 2010/07/19
 *
 * Implementation of inline methods defined in CyclicHueColorMap.h
 *
 * This file is part of the DGtal library.
 */


//////////////////////////////////////////////////////////////////////////////
#include <cstdlib>
//////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// IMPLEMENTATION of inline methods.
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// ----------------------- Standard services ------------------------------


template <typename ValueType>
inline
DGtal::CyclicHueColorMap<ValueType>::CyclicHueColorMap
( const ValueType & min,
  const ValueType & max,
  const unsigned int cycles)
  : myMin( min ), myMax( max ), myCycles( cycles )
{ }


template <typename ValueType>
inline
DGtal::CyclicHueColorMap<ValueType>::CyclicHueColorMap
( const CyclicHueColorMap<ValueType> & other )
  : myMin( other.myMin ), myMax( other.myMax ), myCycles( other.myCycles )
{ 
}

template <typename ValueType>
inline
DGtal::CyclicHueColorMap<ValueType>::~CyclicHueColorMap()
{
}

template <typename ValueType>
CyclicHueColorMap<ValueType> &
CyclicHueColorMap<ValueType>::operator=
( const CyclicHueColorMap<ValueType> & other )
{
  if ( &other != this ) {
    myMin = other.myMin;
    myMax = other.myMax;
    myCycles = other.myCycles;
  }
  return *this;
}

///////////////////////////////////////////////////////////////////////////////
// Interface - public :

template<typename ValueType>
inline
const ValueType &
DGtal::CyclicHueColorMap<ValueType>::min() const
{
  return myMin;
}

template<typename ValueType>
inline
const ValueType &
DGtal::CyclicHueColorMap<ValueType>::max() const
{
  return myMax;
}

template<typename ValueType>
inline
LibBoard::Color
DGtal::CyclicHueColorMap<ValueType>::operator()( const ValueType & value ) const
{
  return CyclicHueColorMap<ValueType>::getColor( myCycles,
						 myMin,
						 myMax,
						 value );
}

/**
 * Writes/Displays the object on an output stream.
 * @param out the output stream where the object is written.
 */
template <typename ValueType>
inline
void
DGtal::CyclicHueColorMap<ValueType>::selfDisplay ( std::ostream & out ) const
{
  out << "[CyclicHueColorMap " 
      << " min=" << myMin
      << " max=" << myMax
      << " cycles=" << myCycles
      << " ]";
}

/**
 * Checks the validity/consistency of the object.
 * @return 'true' if the object is valid, 'false' otherwise.
 */
template <typename ValueType>
inline
bool
DGtal::CyclicHueColorMap<ValueType>::isValid() const
{
    return true;
}

template <typename ValueType>
inline
LibBoard::Color
DGtal::CyclicHueColorMap<ValueType>::getColor( const unsigned int cycles,
					       const ValueType & min,
					       const ValueType & max,
					       const ValueType & value )
{
  const double range = static_cast<double>( max - min );
  const double scale = static_cast<double>( value - min ) / range;
  const double hue = std::floor( static_cast<int>( cycles * scale * 360 )
				 % 360 );
  double red, green, blue;
  CyclicHueColorMap<ValueType>::HSVtoRGB( red, green, blue, hue, 0.9, 1.0 );
  return LibBoard::Color( static_cast<int>( red * 255), 
			  static_cast<int>( green * 255),
			  static_cast<int>( blue * 255) );
}

///////////////////////////////////////////////////////////////////////////////
// Implementation of inline functions                                        //

template <typename ValueType>
inline
std::ostream&
DGtal::operator<< ( std::ostream & out, 
		  const CyclicHueColorMap<ValueType> & object )
{
  object.selfDisplay( out );
  return out;
}

//                                                                           //
///////////////////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////////////////
// Interface - private :

template <typename ValueType>
inline
void
DGtal::CyclicHueColorMap<ValueType>::HSVtoRGB
( double & r, double & g, double & b,
  const double h, const double s, const double v)
{
  int i;
  float f, p, q, t;
  if( s == 0 ) {                     // achromatic (gray)
    r = g = b = v;
    return;
  }
  i = static_cast<int>( floor( h / 60 ) );
  f = ( h / 60 ) - i;                        // factorial part of h
  p = v * ( 1 - s );
  q = v * ( 1 - s * f );
  t = v * ( 1 - s * ( 1 - f ) );
  switch( i ) {
  case 0:
    r = v; g = t; b = p;
    break;
  case 1:
    r = q; g = v; b = p;
    break;
  case 2:
    r = p; g = v; b = t;
    break;
   case 3:
     r = p; g = q; b = v;
     break;
  case 4:
    r = t;  g = p; b = v;
    break;
  default:		// case 5:
    r = v; g = p; b = q;
    break;
  }
}


