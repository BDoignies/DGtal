/**
 * @file GrayscaleColorMap.ih
 * @author Sebastien Fourey (\c Sebastien.Fourey@greyc.ensicaen.fr )
 * Groupe de Recherche en Informatique, Image, Automatique et Instrumentation de Caen - GREYC (CNRS, UMR 6072), ENSICAEN, France
 *
 * @date 2010/07/19
 *
 * Implementation of inline methods defined in GrayscaleColorMap.h
 *
 * This file is part of the DGtal library.
 */


//////////////////////////////////////////////////////////////////////////////
#include <cstdlib>
//////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// IMPLEMENTATION of inline methods.
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// ----------------------- Standard services ------------------------------

template <typename ValueType>
inline
DGtal::GrayscaleColorMap<ValueType>::GrayscaleColorMap( const ValueType & min,
							const ValueType & max )
  : myMin( min ), myMax( max )
{ }

template <typename ValueType>
inline
DGtal::GrayscaleColorMap<ValueType>::GrayscaleColorMap
( const GrayscaleColorMap<ValueType> & other )
  : myMin( other.myMin ), myMax( other.myMax )
{ 
}

template <typename ValueType>
inline
DGtal::GrayscaleColorMap<ValueType>::~GrayscaleColorMap()
{
}

template <typename ValueType>
GrayscaleColorMap<ValueType> &
GrayscaleColorMap<ValueType>::operator=
( const GrayscaleColorMap<ValueType> & other )
{
  if ( &other != this ) {
    myMin = other.myMin;
    myMax = other.myMax;
  }
  return *this;
}

///////////////////////////////////////////////////////////////////////////////
// Interface - public :


template<typename ValueType>
inline
const ValueType &
DGtal::GrayscaleColorMap<ValueType>::min() const
{
  return myMin;
}

template<typename ValueType>
inline
const ValueType &
DGtal::GrayscaleColorMap<ValueType>::max() const
{
  return myMax;
}

template<typename ValueType>
inline
LibBoard::Color
DGtal::GrayscaleColorMap<ValueType>::operator()( const ValueType & value ) const
{
  return GrayscaleColorMap<ValueType>::getColor( myMin, myMax, value );
}

/**
 * Writes/Displays the object on an output stream.
 * @param out the output stream where the object is written.
 */
template <typename ValueType>
inline
void
DGtal::GrayscaleColorMap<ValueType>::selfDisplay ( std::ostream & out ) const
{
  out << "[GrayscaleColorMap " 
      << " min=" << myMin
      << " max=" << myMax
      << " ]";
}

/**
 * Checks the validity/consistency of the object.
 * @return 'true' if the object is valid, 'false' otherwise.
 */
template <typename ValueType>
inline
bool
DGtal::GrayscaleColorMap<ValueType>::isValid() const
{
    return true;
}


template <typename ValueType>
inline
LibBoard::Color
DGtal::GrayscaleColorMap<ValueType>::getColor( const ValueType & min,
					       const ValueType & max,
					       const ValueType & value )
{
  double range = static_cast<double>( max - min );
  double scale = static_cast<double>( value - min );
  unsigned char gray = static_cast<unsigned char>( 255.0 * ( scale / range  ) );
  return LibBoard::Color( gray );
}

///////////////////////////////////////////////////////////////////////////////
// Implementation of inline functions                                        //

template <typename ValueType>
inline
std::ostream&
DGtal::operator<< ( std::ostream & out, 
		  const GrayscaleColorMap<ValueType> & object )
{
  object.selfDisplay( out );
  return out;
}

//                                                                           //
///////////////////////////////////////////////////////////////////////////////


