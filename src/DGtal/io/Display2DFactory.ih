/**
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as
 *  published by the Free Software Foundation, either version 3 of the
 *  License, or  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 **/

/**
 * @file   Display2DFactory.ih
 * @author Martial Tola <http://liris.cnrs.fr/martial.tola/>
 * @date   mercredi 28 septembre 2011
 * 
 * @brief
 *
 * Implementation of inline methods defined in Display2DFactory.h
 *
 * This file is part of the DGtal library.
 */

///////////////////////////////////////////////////////////////////////////////
// Implementation of inline methods                                          //


///////////////////////////////////////////////////////////////////////////////
// Implementation of inline functions and external operators                 //


// ArithmeticalDSS3d
template <typename TIterator, typename TInteger, int connectivity>
inline
void DGtal::Display2DFactory::draw( Board2D & board, 
				    const DGtal::ArithmeticalDSS<TIterator,TInteger,connectivity> & a )
{
}
// ArithmeticalDSS3d


// FreemanChain
/*template <typename TInteger>
inline
void DGtal::Display2DFactory::draw( Board2D & board,
				    const DGtal::FreemanChain<TInteger> & f )
{
}*/
// FreemanChain


// PointVector
template<Dimension dim, typename TComponent>
inline
void DGtal::Display2DFactory::draw( Board2D & board, const DGtal::PointVector<dim,TComponent> & p )
{
}
// PointVector


// HyperRectDomain
template<typename TSpace>
inline
void DGtal::Display2DFactory::draw( Board2D & board, const DGtal::HyperRectDomain<TSpace> & h )
{
}
// HyperRectDomain


// DigitalSetBySTLSet
template<typename Domain>
inline
void DGtal::Display2DFactory::draw( Board2D & board, 
				    const DGtal::DigitalSetBySTLSet<Domain> & s )
{
}
// DigitalSetBySTLSet


// DigitalSetBySTLVector
template<typename Domain>
inline
void DGtal::Display2DFactory::draw( Board2D & board, 
				    const DGtal::DigitalSetBySTLVector<Domain> & v )
{
}
// DigitalSetBySTLVector


// Object
template <typename TDigitalTopology, typename TDigitalSet>
inline
void DGtal::Display2DFactory::draw( Board2D & board, 
				    const DGtal::Object<TDigitalTopology, TDigitalSet> & o )
{
}
// Object


// KhalimskyCell

// KhalimskyCell

// SignedKhalimskyCell

// SignedKhalimskyCell

//

inline
void DGtal::Display2DFactory::draw( Board2D & board, 
				    const DGtal::SetMode & sm )
{
  board.myModes[ sm.myClassname ] = sm.myMode;
}

inline
void DGtal::Display2DFactory::draw( Board2D & board,
				    const DGtal::CustomStyle & cs )
{
  board.myStyles[ cs.myClassname ] = cs.myStyle;
}

/*inline
void DGtal::Display2DFactory::draw( Display3D & display, const DGtal::CustomColors3D & cc3d )
{
  display.setFillColor(cc3d.myFillColor);
  display.setLineColor(cc3d.myPenColor);
}*/

//                                                                           //
///////////////////////////////////////////////////////////////////////////////


