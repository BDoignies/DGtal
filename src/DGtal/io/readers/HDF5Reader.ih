/**
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as
 *  published by the Free Software Foundation, either version 3 of the
 *  License, or  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 **/

/**
 * @file HDF5Reader.ih
 * @author Martial Tola (\c martial.tola@liris.cnrs.fr )
 *
 * @date 2013/04/16
 *
 * Implementation of inline methods defined in HDF5Reader.h
 *
 * This file is part of the DGtal library.
 */

///////////////////////////////////////////////////////////////////////////////
// IMPLEMENTATION of inline methods.
///////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
#include <cstdlib>
#include <iostream>
#include <fstream>
#include <sstream>

#include <hdf5.h>
//////////////////////////////////////////////////////////////////////////////



///////////////////////////////////////////////////////////////////////////////
// Implementation of inline methods                                          //


///////////////////////////////////////////////////////////////////////////////
// Implementation of inline functions and external operators                 //

template <typename TImageContainer>
inline
TImageContainer 
DGtal::HDF5Reader<TImageContainer>::importHDF5(const std::string & aFilename, bool topbotomOrder ) throw(DGtal::IOException)
{
  unsigned int h, w;
  h=400; w=300;
  
  hid_t         file_id, dataset_id;    // identifiers
  herr_t        status;
  unsigned char dset_data[h][w];

  // Open an existing file
  file_id = H5Fopen(aFilename.c_str(), H5F_ACC_RDWR, H5P_DEFAULT);

  // Open an existing dataset
  dataset_id = H5Dopen(file_id, "/image8bit", H5P_DEFAULT);

  // Read the dataset
  status = H5Dread(dataset_id, /*H5T_NATIVE_INT*/H5T_NATIVE_UCHAR, H5S_ALL, H5S_ALL, H5P_DEFAULT, dset_data);

  // Close the dataset
  status = H5Dclose(dataset_id);

  // Close the file
  status = H5Fclose(file_id);
  
  // --
  
  typename TImageContainer::Point firstPoint;
  typename TImageContainer::Point lastPoint;
      
  firstPoint = TImageContainer::Point::zero;
  lastPoint[0] = w-1;
  lastPoint[1] = h-1;
  
  typename TImageContainer::Domain domain(firstPoint,lastPoint);
  TImageContainer image(domain);
  
  unsigned int nb_read = 0;
  
  for(unsigned int y=0; y <h; y++)
    for(unsigned int x=0; x <w; x++)
      {
          typename TImageContainer::Point pt;
          if (topbotomOrder){
            pt[0]=x; pt[1]=h-1-y;
          }else{
            pt[0]=x; pt[1]=y;
          }
          
          ++nb_read;
          image.setValue(pt, dset_data[y][x]);
      }
      
  trace.info() << "# nbread=" << nb_read << std::endl;
  
  return image;
}

//                                                                           //
///////////////////////////////////////////////////////////////////////////////


