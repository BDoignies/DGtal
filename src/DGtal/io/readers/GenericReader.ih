/**
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as
 *  published by the Free Software Foundation, either version 3 of the
 *  License, or  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 **/

/**
 * @file GenericReader.ih
 * @author Bertrand Kerautret (\c kerautre@loria.fr )
 * LORIA (CNRS, UMR 7503), University of Nancy, France
 *
 * @date 2013/05/01
 *
 * Implementation of inline methods defined in GenericReader.h
 *
 * This file is part of the DGtal library.
 */


//////////////////////////////////////////////////////////////////////////////
#include <cstdlib>
#include "DGtal/io/readers/VolReader.h"
#include "DGtal/io/readers/PNMReader.h"
#include "DGtal/io/readers/RawReader.h"
#ifdef WITH_HDF5
#include "DGtal/io/readers/HDF5Reader.h"
#endif
#ifdef WITH_MAGICK
#include "DGtal/io/readers/MagickReader.h"
#endif

//////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// IMPLEMENTATION of inline methods.
///////////////////////////////////////////////////////////////////////////////

// template <typename TImageContainer, int d>
// inline
// TImageContainer 
// DGtal::GenericReader<TImageContainer, d>::import(const std::string &filename, 
// 						   unsigned int x, unsigned int y, unsigned int z)  throw(DGtal::IOException){


// }


template <typename TContainer, typename TPoint, int TDim>
inline
TContainer 
DGtal::GenericReader<TContainer, TPoint, TDim>::import(const std::string &filename)  throw(DGtal::IOException){


}

template <typename TContainer, typename TPoint>
inline
TContainer 
DGtal::GenericReader<TContainer, TPoint, 3>::import(const std::string &filename,
					    unsigned int x, unsigned int y, unsigned int z)  throw(DGtal::IOException){
  //Getting image extension
  std::string extension = filename.substr(filename.find_last_of(".") + 1);
  
  if(extension=="vol"){
    return  VolReader<TContainer>::importVol( filename );
  }else  if(extension=="pgm3d"|| extension=="pgm3D" ||extension=="p3d"){
    return PNMReader<TContainer>::importPGM3D(filename);
  } else  if(extension=="raw" && TContainer::Domain::dimension==3){
    ASSERT(x!=0 && y!=0 && z!=0); 
    typename TContainer::Point pt (x,y,z);
    return RawReader< TContainer >::importRaw8 ( filename, pt  );
  }
  
}


template <typename TContainer, typename TPoint>
inline
TContainer 
DGtal::GenericReader<TContainer, TPoint, 2>::import(const std::string &filename, const std::string & datasetName)  throw(DGtal::IOException){
    DGtal::IOException dgtalio;
  //Getting image extension
  std::string extension = filename.substr(filename.find_last_of(".") + 1);

  if(extension=="pgm"){
    return PNMReader<TContainer>::importPGM(filename);
  }
#ifdef WITH_HDF5
 else if (extension=="h5"){
    return HDF5Reader::importHDF5(filename, datasetName); 
}
#endif
 else if( extension=="gif" || extension=="jpg" || extension=="png" || extension=="jpeg" || extension=="bmp"){
#ifdef WITH_MAGICK
    MagickReader<TContainer> reader;
    Image img = reader.importImage( filename );  
#else 
    trace.error() << "Extension " << extension<< " not yet implemented in DGtal but you can add Magick option to deal with this image type." << std::endl;
    throw dgtalio;
#endif

  }else{
    trace.error() << "Extension " << extension<< " not yet implemented in DGtal." << std::endl;
    throw dgtalio;
  }

}




// @todo when a MeshFromPoints(Mesh) will contain a type Point
/**   
template<typename TPoint>
  inline
  DGtal::MeshFromPoints<TPoint>
  DGtal::GenericReader<DGtal::MeshFromPoints<TPoint>, TPoint, 2>::import(const std::string &filename)  throw(DGtal::IOException){
   DGtal::IOException dgtalio;
     
   MeshFromPoints<TPoint> a3DMesh;
   bool importOK = a3DMesh << filename;
   if(!importOK){
       trace.error() << "Generic reader error." << std::endl;
       throw dgtalio;
   }
   return a3DMesh;
}
**/


//                                                                           //
///////////////////////////////////////////////////////////////////////////////


