/**
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as
 *  published by the Free Software Foundation, either version 3 of the
 *  License, or  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 **/

/**
 * @file MagickReader.ih
 * @author David Coeurjolly (\c david.coeurjolly@liris.cnrs.fr )
 * Laboratoire d'InfoRmatique en Image et Syst√®mes d'information - LIRIS (CNRS, UMR 5205), CNRS, France
 *
 * @date 2010/07/25
 *
 * Implementation of inline methods defined in MagickReader.h
 *
 * This file is part of the DGtal library.
 */


//////////////////////////////////////////////////////////////////////////////
#include <cstdlib>

//#include <Magick++.h>

//////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// Interface - public :

template <typename TImageContainer>
inline
TImageContainer 
DGtal::MagickReader<TImageContainer>::importImage(const std::string & filename ) throw(DGtal::IOException)
{
  int w,h;
  const Magick::PixelPacket *cacheRead;
  DGtal::IOException dgtalio;


  Magick::InitializeMagick(NULL);
  
  Magick::Image img = Magick::Image ( filename );

  w = img.size().width();
  h = img.size().height();

  //@todo Check Magick::Types according to ValueType
  img.type ( Magick::TrueColorType );
  img.modifyImage();
  cacheRead = img.getConstPixels ( 0, 0, w, h );
  
  //@todo check ImageMagick errors.
  //trace.error() << "MagickReader : can't open "<< filename<<endl;
  
  typename TImageContainer::Point firstPoint;
  typename TImageContainer::Point lastPoint;
      
  firstPoint = TImageContainer::Point::zero;
  lastPoint[0] = w-1;
  lastPoint[1] = h-1;

  typename TImageContainer::Domain domain(firstPoint,lastPoint);
  TImageContainer image(firstPoint,lastPoint);
  typename TImageContainer::ValueType val;

  //We scan the Raw file
  typename TImageContainer::Domain::ConstIterator it = domain.range().begin(),itend=domain.range().end();
  
  for(; it != itend; ++it)
    {
      // const Magick::PixelPacket *pixel = cacheRead + w * ( h - 1 - j ) + i;
      const Magick::PixelPacket *pixel = cacheRead + w * ( h - 1 );
      ///@todo create converters RGB->ValueType
      val = (pixel->red + pixel->green + pixel->blue) % 256;
      image.setValue( (*it), val  );
    }

  return image;
}

