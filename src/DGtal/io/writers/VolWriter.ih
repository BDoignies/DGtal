/**
 * @file VolWriter.ih
 * @author David Coeurjolly (\c david.coeurjolly@liris.cnrs.fr )
 * Laboratoire d'InfoRmatique en Image et Syst√®mes d'information - LIRIS (CNRS, UMR 5205), CNRS, France
 *
 * @date 2010/07/22
 *
 * Implementation of inline methods defined in VolWriter.h
 *
 * This file is part of the DGtal library.
 */


//////////////////////////////////////////////////////////////////////////////
#include <cstdlib>
#include <fstream>
#include "Board/Color.h"
//////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// IMPLEMENTATION of inline methods.
///////////////////////////////////////////////////////////////////////////////


namespace DGtal {
template<typename I,typename C>
bool
VolWriter<I,C>::exportVol(const std::string & filename, const I & aImage,
			  const ValueType & minV, const ValueType & maxV)
{
  ///@todo  the ValueType of I should match with the one in C

  ofstream out;
  typename I::Domain::Vector ext = aImage.extent();
  typename I::Domain domain(aImage.lowerBound(), aImage.upperBound());
  typename I::ValueType val;
  C colormap(minV,maxV);
  LibBoard::Color col;
  
  out.open(filename.c_str());

  //Vol format
  out << "X: "<< ext[0]<<endl;
  out << "Y: "<< ext[1]<<endl;
  out << "Z: "<< ext[2]<<endl;
  out << "Voxel-Size: 1"<<endl;
  out << "Alpha-Color: 0"<<endl;
  out << "Voxel-Endian: 0"<<endl;
  out << "Int-Endian: 0123"<<endl;
  out << "Version: 2"<<endl;
  out << "."<<endl;

  //We scan the domain instead of the image because we cannot
  //trust the image container Iterator
  for(typename I::Domain::ConstIterator it = domain.begin(), itend=domain.end();
      it!=itend;
      ++it)
    {

      val = aImage( (*it) );
      col = colormap( val );
      out.put((unsigned char) (((int)col.red()+(int)col.green() + (int)col.blue())/3));
    }
  
  out.close(); 

  ///@todo catch IOerror excpetion
  return true;
}

}//namespace
