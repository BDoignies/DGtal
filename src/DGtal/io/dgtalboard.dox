
/* 
 * Useful to avoid writing DGtal:: in front of every class.
 */
namespace DGtal {

  /**
   * @page dgtal_dgtalboard DGtalBoard: a stream mechanism for displaying digital objects
   *
   * This part of the manual describes how to export DGtal objects
   * into graphics files (and later buffers). For now, it is limited
   * to 2D DGtal objects like CDomain, Object, CDigitalSet, Point,
   * ImageContainer. The current supported export formats are SVG,
   * EPS, and XFIG. It is currently based on LibBoard, but may evolve
   * later (it will probably move to Cairo).
   * This document is dedicated both to DGtal users and developers.

   *
   *
   * Table of contents:
   *  -# \ref dgtal_dgtalboard_sec1
   *    -# \ref dgtal_dgtalboard_sec11
   *  -# \ref dgtal_dgtalboard_sec2
   *    -# \ref dgtal_dgtalboard_sec21
   *
   * \section dgtal_dgtalboard_sec1 User guide to DGtalBoard
   *
   * \subsection dgtal_dgtalboard_sec11 Elementary usage: displaying a domain and a few points
   *
   * The class DGtalBoard is designed so as to make easy the
   * visualization of digital objects, also it is for now limited to
   * 2D discrete geometry. For the user, it is very simple to
   * visualize digital sets, objects and others. To do so, the user
   * has just to instantiate a DGtalBoard object. This object is then
   * an output stream, and if you wish to visualize some object, you
   * use the stream \c operator \c << to output the object on the
   * board. When you are finished, there is a command to export your
   * graphics in SVG, XFIG or EPS format.
   *
   * The following code snippet defines three points and a rectangular
   * domain in Z2. It then displays them in a DGtalBoard object. The
   * two last commands export the graphics in SVG and EPS format. The
   * full code is in <a href="dgtalboard-1-points_8cpp-example.html">dgtalboard-1-points.cpp</a>.
   *
   \code
   using namespace DGtal;
   using namespace DGtal::Z2i;

   Point p1( -3, -2 );
   Point p2( 7, 3 );
   Point p3( 0, 0 );
   Domain domain( p1, p2 );
   
   DGtalBoard board;
   board << domain << p1 << p2 << p3;
   board.saveSVG("dgtalboard-1-points.svg");
   board.saveEPS("dgtalboard-1-points.eps");
   \endcode
   *
   * This program outputs this image.
   *
   * \image html dgtalboard-1-points.png
   *
   * It is clear that the order in which you display elements has an
   * influence on the exported graphics.
   *
   * \subsection dgtal_dgtalboard_sec12 Displaying sets and digital objects
   *
   *
   *
   * \section dgtal_dgtalboard_sec2 Developer guide to DGtalBoard
   *
   * \subsection dgtal_dgtalboard_sec21 Short overview of the LibBoard library
   *
   *  LibBoard is a  C++ library for simple Postscript, SVG, and XFig drawings.
   *
   * @image html logo_Board.png 
   * (Copyleft, LGPL) 2007 S&eacute;bastien Fourey - GREYC ENSICAEN 
   *
   * It allows simple drawings in:
   * <ul>
   *  <li>Encapsulated Postcript files (EPS) ;
   *  <li>XFig files (FIG) ;
   *  <li>Scalable Vector Graphics files (SVG).
   * </ul>
   *
   * The main class of the library is the #LibBoard#Board class. It is
   * intended to be as simple as possible so that it can be used
   * quickly in programs to generate the kind of figure one would
   * rather not draw by hand, but which can be easily drawn by a
   * computer (C++) program.
   *
   * A clone of the LibBoard source code (release: 0.8.8-3) has been
   * included in DGtal. Its classes are grouped into the namespace Board.

   */

  /**
   * \example dgtalboard-1-points.cpp
   *
   * This simple example shows the basic usage of a DGtalBoard to
   * export graphical representations of dgtal objects (here, a
   * HyperRectDomain and three points exported as SVG and EPS).
   */

}
