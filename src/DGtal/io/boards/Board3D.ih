/**
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as
 *  published by the Free Software Foundation, either version 3 of the
 *  License, or  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 **/

/**
 * @file   Board3D.ih
 * @author Martial Tola <http://liris.cnrs.fr/martial.tola/>
 * @date   mercredi 22 juin 2011
 *
 * @brief
 *
 * Implementation of inline methods defined in Board3D.h
 *
 * This file is part of the DGtal library.
 */

///////////////////////////////////////////////////////////////////////////////
// IMPLEMENTATION of inline methods.
///////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
#include <cstdlib>
#include "DGtal/io/CDrawableWithDisplay3D.h"
#include "DGtal/io/Color.h"

#include <limits>
//////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// Implementation of inline methods                                          //

/**
 * Set the default color for future drawing.
 *
 * @param aColor a DGtal::Color (allow to set a trasnparency value).
 *
 **/
template < typename Space, typename KSpace>
inline
DGtal::Board3D<Space, KSpace> &
DGtal::Board3D<Space, KSpace>::operator<<(const DGtal::Color & aColor)
{
  myDefaultColor=aColor;
  return *this;
}


/**
 * Draws the drawable [object] in this board. It should satisfy
 * the concept CDrawableWithBoard3D, which requires for instance a
 * method setStyle( Board3D & ).
 *
 * @param object any drawable object.
 * @return a reference on 'this'.
 */
template < typename Space, typename KSpace>
template <typename TDrawableWithDisplay3D>
inline
DGtal::Board3D<Space, KSpace> &
DGtal::Board3D<Space, KSpace>::operator<<( const TDrawableWithDisplay3D & object )
{
  BOOST_CONCEPT_ASSERT((concepts::CDrawableWithDisplay3D< TDrawableWithDisplay3D, Space, KSpace>));
  
  DGtal::Display3DFactory<Space,KSpace>::draw(*this, object);
  return *this;
}



///////////////////////////////////////////////////////////////////////////////
// Standard services - public :

/*!
 * \brief Constructor.
 */
template < typename Space, typename KSpace>
inline
DGtal::Board3D<Space, KSpace>::Board3D() : Display3D<Space,KSpace>()
{
  init();
}

///////////////////////////////////////////////////////////////////////////////
// Interface - public :

/**
 * Writes/Displays the object on an output stream.
 * @param outOBJ the output stream where the object is written.
 */
template < typename Space, typename KSpace>
inline
void
DGtal::Board3D<Space, KSpace>::selfDisplay ( std::ostream & outOBJ ) const
{
  outOBJ << "[Board3D]";
}

/**
 * Checks the validity/consistency of the object.
 * @return 'true' if the object is valid, 'false' otherwise.
 */
template < typename Space, typename KSpace>
bool
DGtal::Board3D<Space, KSpace>::isValid() const
{
  return true;
}


/**
 * Save a OBJ image.
 * @param filename filename of the image to save.
 */
template < typename Space, typename KSpace>
inline
void DGtal::Board3D<Space, KSpace>::saveOBJ(const std::string & filename, const bool normalization)
{
  
  size_t k, j; //id of each elements and sub elements of a list for the .OBJ identification
  std::ofstream outOBJ; //OBJ file where to write
  std::ofstream outMTL; //MTL file where to write

  //the filename without OBJ any extention
  std::string noExt;
  size_t lastdot = filename.find_last_of(".");
  if (lastdot != std::string::npos)
    noExt = filename.substr(0, lastdot);
  else
    noExt = filename;
    
  std::stringstream nameOBJ;
  std::stringstream nameMTL;
  nameOBJ << noExt << ".obj";
  nameMTL << noExt << ".mtl";
  
  outOBJ.open(nameOBJ.str().c_str());
  outOBJ << "#  OBJ format"<< "\n";
  outOBJ << "# generated from Board3D from the DGtal library"<< "\n";
  outOBJ << "mtllib " <<  nameMTL.str() << "\n";
  outOBJ << "\n";
  
  outMTL.open(nameMTL.str().c_str());
  outMTL << "#  MTL format"<< "\n";
  outMTL << "# generated from Board3D from the DGtal library"<< "\n";
  
  
  //myClippingPlaneList++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  //std::vector< clippingPlaneD3D >::const_iterator
  {
    if(Board3D<Space, KSpace>::myClippingPlaneList.size()> 0)
    {
      trace.info() << "number of clipping plane : "
      << Board3D<Space, KSpace>::myClippingPlaneList.size() << std::endl;
    }
  }
  
  // normalization -----------------------------------------------------------------------
  double scale = 1.0;
  typename Space::RealPoint shift(0.0,0.0,0.0);
  if (normalization)
  {
    //We center  the shape W.r.t. its bounding box
    for(unsigned int i=0; i < 3; i++)
      shift[i] = (this->myBoundingPtUp[i] + this->myBoundingPtLow[i])/2.0;
    
    //We compute the scale of the largest direction so that it fits
    //in [-1/2,1/2] interval
    double tmpwidth;
    
    int i =0;
    while ((i<3) && (this->myBoundingPtUp[i]  - this->myBoundingPtLow[i] == 0))
      i++;
    ASSERT_MSG(i < 3, "Error when computing the scale from the bounding box. The Bbox seems to be empty.");
    
    scale = 1.0/(this->myBoundingPtUp[i]  - this->myBoundingPtLow[i]);
    for( ; i < 3; i++)
    {
      tmpwidth =  (this->myBoundingPtUp[i]  - this->myBoundingPtLow[i]);
      if ((tmpwidth != 0.0) && (scale  > 1.0/tmpwidth))
        scale = 1.0/tmpwidth;
    }
    outOBJ << "# Normalization was used. Scale= "<< scale << " and Shift= "<<shift<< "\n";
  }
  
  // Draw the shapes -----------------------------------------------------------------------
  
  ///Temporary variables
  typename Space::RealPoint apoint, apoint1, apoint2, apoint3, apoint4;
  
  // myBallSetList++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  {
    k=0;//id of each BallSetList for the .OBJ identification
    for (auto it = this->myBallSetList.groups.begin(); it != this->myBallSetList.groups.end(); it++)
    {
      std::ostringstream tmpStream; // checking that points exist before creating an object
      for (size_t i = 0; i < it->second.vertices.size(); i++)
      {
        auto s_it = it->second.vertices[i];
        //test if a clipping plane do not cut it
        bool notCut =true;
        auto itClip = this->myClippingPlaneList.begin();
        while (itClip != this->myClippingPlaneList.end() && notCut )
        {
          double d2 = ( itClip->a * (s_it)[0]) + (itClip->b * (s_it)[1]) + ( itClip->c * (s_it)[2] ) + itClip->d;
          notCut = ( d2 >= 0);
          
          itClip ++;
        }
        if (notCut)
        {
          static constexpr unsigned int ballResolution = 128;

          double thetaResolution = ballResolution; 
          double thetaStep= (2.0*M_PI)/thetaResolution;
          double phiResolution = ballResolution;
          double phiStep= M_PI/phiResolution;
          
          double radius = it->second.style.width*scale;
          double xCenter = (s_it[0]-shift[0])*scale;
          double yCenter = (s_it[1]-shift[1])*scale;
          double zCenter = (s_it[2]-shift[2])*scale;
          
          for(unsigned int jj =0; jj < phiResolution; jj++)
          {
            double phi0 = M_PI/2.0-jj*phiStep;
            double phi1 = M_PI/2.0-(jj+1)*phiStep;
            for(unsigned int i =0; i < thetaResolution; i++)
            {
              double theta0 =  i * thetaStep;
              double theta1 =  (i+1) * thetaStep;
              tmpStream << "v " << xCenter+cos(phi0)*cos(theta0)*radius
              << " "  << yCenter+ cos(phi0)*sin(theta0)*radius << " " << zCenter+ sin(phi0)*radius << "\n";
              tmpStream << "v " << xCenter+cos(phi0)*cos(theta1)*radius
              << " " << yCenter+ cos(phi0)*sin(theta1)*radius << " " << zCenter+ sin(phi0)*radius << "\n";
              tmpStream << "v " << xCenter+cos(phi1)*cos(theta0)*radius << " "
              << yCenter+ cos(phi1)*sin(theta0)*radius << " " <<zCenter+ sin(phi1)*radius << "\n";
              tmpStream << "f " << "-1" << " " << "-2" << " " << "-3"<< "\n";
              
              tmpStream << "v " << xCenter+cos(phi0)*cos(theta1)*radius
              << " " << yCenter+ cos(phi0)*sin(theta1)*radius << " " << zCenter+ sin(phi0)*radius << "\n";
              tmpStream << "v " << xCenter+cos(phi1)*cos(theta0)*radius << " "
              << yCenter+ cos(phi1)*sin(theta0)*radius << " " <<zCenter+ sin(phi1)*radius << "\n";
              tmpStream << "v " << xCenter+cos(phi1)*cos(theta1)*radius << " "
              << yCenter+ cos(phi1)*sin(theta1)*radius << " " <<zCenter+ sin(phi1)*radius << "\n";
              tmpStream << "f " << "-3" << " " << "-2" << " " << "-1"<< "\n";
            }
          }
        }
      }
      
      if (tmpStream.str().size() > 0)
      {
        std::stringstream name;
        name << it->first;
        if ( name.str() == "")
        {
          name << "myBallSetList_" << k ;
        }

        unsigned int matid = getMaterialIndex(*it->second.style.color);
        std::stringstream matName;
        matName <<  "Mat_" << matid;
        outOBJ << "o  " << name.str() << "\n";
        outOBJ << "usemtl " << matName.str() << "\n";
        outOBJ << tmpStream.str();
      }
      k++;
    }
  }
  
  // myLineSetList+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  {
    j =0;
    k=0;//id of each LineSetList for the .OBJ identification
    for(auto it = this->myLineSetList.groups.begin(); it != this->myLineSetList.groups.end(); it++)
    {
      const auto& data = it->second.vertices;
      std::ostringstream tmpStream;
      for (size_t i = 0; i < data.size(); i += 2)
      {
        auto point1 = data[i + 0];
        auto point2 = data[i + 1];
        //test if a clipping plane do not cut it
        bool notCut =true;
        double width = it->second.style.width;
        auto itClip = this->myClippingPlaneList.begin(); 
        while (itClip != this->myClippingPlaneList.end() && notCut )
        {
          double a = itClip->a;
          double b = itClip->b;
          double c = itClip->c;
          double d = itClip->d;
          double d2 ;
          d2 = ( a * point1[0]) + (b * (point1[1] -width)) + ( c * point1[2] ) + d;
          notCut = ( d2 >= 0);
          d2 = ( a * point1[0]) + (b * (point1[1] +width)) + ( c * point1[2] ) + d;
          notCut = ( notCut  && ( d2 >= 0) );
          d2 = ( a * point2[0]) + (b * (point2[1] +width)) + ( c * point2[2] ) + d;
          notCut = ( notCut  && ( d2 >= 0) );
          d2 = ( a * point2[0]) + (b * (point2[1] -width)) + ( c * point2[2] ) + d;
          notCut = ( notCut  && ( d2 >= 0) );
          d2 = ( a * point1[0]) + (b * point1[1]) + ( c * (point1[2] -width )) + d;
          notCut = ( notCut  && ( d2 >= 0) );
          d2 = ( a * point1[0]) + (b * point1[1]) + ( c * (point1[2] +width )) + d;
          notCut = ( notCut  && ( d2 >= 0) );
          d2 = ( a * point2[0]) + (b * point2[1]) + ( c * (point2[2] +width )) + d;
          notCut = ( notCut  && ( d2 >= 0) );
          d2 = ( a * point2[0]) + (b * point2[1]) + ( c * (point2[2] -width )) + d;
          notCut = ( notCut  && ( d2 >= 0) );
          
          itClip ++;
        }
        
        if (notCut)
        {
          // OBJ dont know how to draw lines, have to make a
          // cuboid with a depth and height of a pixel width
          
          apoint1 = ((point1) - shift)*scale;
          apoint2 = ((point2) - shift)*scale;
          tmpStream << "v " << apoint1[0]     << " " << apoint1[1] -width << " " << apoint1[2] -width << "\n";
          tmpStream << "v " << apoint1[0]     << " " << apoint1[1] -width << " " << apoint1[2] +width << "\n";
          tmpStream << "v " << apoint1[0]     << " " << apoint1[1] +width << " " << apoint1[2] -width << "\n";
          tmpStream << "v " << apoint1[0]     << " " << apoint1[1] +width << " " << apoint1[2] +width<< "\n";

          tmpStream << "v " << apoint2[0]     << " " << apoint2[1] -width << " " << apoint2[2] -width << "\n";
          tmpStream << "v " << apoint2[0]     << " " << apoint2[1] -width << " " << apoint2[2] +width << "\n";
          tmpStream << "v " << apoint2[0]     << " " << apoint2[1] +width << " " << apoint2[2] -width << "\n";
          tmpStream << "v " << apoint2[0]     << " " << apoint2[1] +width << " " << apoint2[2] +width<< "\n";
         
          tmpStream  << "vn " <<  "0"  << " " << "0" << " " << "1" << "\n";//up
          tmpStream  << "vn " <<  "0"  << " " << "0" << " " << "-1" << "\n";//back
   
          tmpStream  << "f " << "-7//" << " " << "-8//" << " " << "-4//"<< " " << "-3//" << "\n";//left
          tmpStream << "f " << "-5//" << " " << "-7//" << " " << "-3//"<< " " << "-1//"<< "\n";//front
          tmpStream << "f " << "-3//-2" << " " << "-4//-2" << " " << "-2//-2"<< " " << "-1//-2"<< "\n";//up
          tmpStream << "f " << "-8//-1" << " " << "-7//-1" << " " << "-5//-1"<< " " << "-6//-1"<< "\n";//back
          tmpStream << "f " << "-2//" << " " << "-4//" << " " << "-8//"<< " " << "-6//"<< "\n";//down
          tmpStream << "f " << "-1//" << " " << "-2//" << " " << "-6//"<< " " << "-5//"<< "\n";//right
          
          j++;
        }
      }
      if (tmpStream.str() != "")
      {
        std::stringstream name;
        name << it->first;
        if ( name.str()== "")
        {
          name << "myLineSetList_" << k ;
        }
        
        unsigned int matid = getMaterialIndex(*it->second.style.color);
        std::stringstream matName;
        matName <<  "Mat_" << matid;
        outOBJ << "o  " << name.str() << "\n";
        outOBJ << "usemtl " << matName.str() << "\n";
        outOBJ << tmpStream.str();
      }
      
      k++;
    }
  }
  
  // myCubeSetList++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  {
    j  = 0 ; //id of each Cube sub list for the .OBJ identification
    
    
    //Foreach list
    for(auto it = this->myCubesMap.groups.begin(); it != this->myCubesMap.groups.end(); it++)
    {
        const auto& data = it->second.vertices;
        std::stringstream name;
        std::ostringstream tmpStream;

        name << "myCubeSetList_" << it->first ;
        outOBJ << "o  " << name.str() << "\n";
      
      
      //For each list, we force the cube color to be set in the OBJ file
      unsigned int prevMaterialIndex = std::numeric_limits<unsigned int>::max();  //index to the last voxel material
      
      //Foreach cube in the list
      for (size_t i = 0; i < data.size(); i += 8)
      {
        //Color
        unsigned int matid = getMaterialIndex(*it->second.style.color);
        if (matid != prevMaterialIndex)
        {
          std::stringstream matName;
          matName <<  "Mat_" << matid;
          outOBJ << "usemtl " << matName.str() << "\n";
          prevMaterialIndex = matid;
        }

        double x1 = data[i + 0][0];
        double x2 = data[i + 1][0];
        double y1 = data[i + 0][1];
        double y2 = data[i + 2][1];
        double z1 = data[i + 0][2];
        double z2 = data[i + 4][2];
        //test if a clipping plane do not cut it
        bool notCut =true;
        auto itClip = this->myClippingPlaneList.begin(); 
        while (itClip != this->myClippingPlaneList.end() && notCut )
        {
          double a = itClip->a;
          double b = itClip->b;
          double c = itClip->c;
          double d = itClip->d;
          double d2 = ( a * x1) + (b * y1) + ( c * z2 ) + d;
          notCut = ( d2 >= 0);
          
          d2 = ( a * x2) + (b * y1) + ( c * z2) + d;
          notCut = ( notCut  && ( d2 >= 0) );
          d2 = ( a * x1) + (b * y1) + ( c * z1) + d;
          notCut = ( notCut  && ( d2 >= 0) );
          d2 = ( a * x2) + (b * y1) + ( c * z1) + d;
          notCut = ( notCut  && ( d2 >= 0) );
          d2 = ( a * x1) + (b * y2) + ( c * z2) + d;
          notCut = ( notCut  && ( d2 >= 0) );
          d2 = ( a * x2) + (b * y2) + ( c * z2) + d;
          notCut = ( notCut  && ( d2 >= 0) );
          d2 = ( a * x1) + (b * y2) + ( c * z1) + d;
          notCut = ( notCut  && ( d2 >= 0) );
          d2 = ( a * x2) + (b * y2) + ( c * z1) + d;
          notCut = ( notCut  && ( d2 >= 0) );
          
          itClip ++;
        }
        
        //OPT cube
        
        if (notCut)
        {
          // this version is  one cube with (x,y,z) the center of it and wid its distance between it and its faces
          
          x1 = (x1-shift[0])*scale;
          y1 = (y1-shift[1])*scale;
          z1 = (z1-shift[2])*scale;
          x2 = (x2-shift[0])*scale;
          y2 = (y2-shift[1])*scale;
          z2 = (z2-shift[2])*scale;
          
          outOBJ  << "v " << x1   << " " << y1 << " " << z1 << "\n";
          outOBJ  << "v " << x1   << " " << y2 << " " << z1 << "\n";
          outOBJ  << "v " << x2   << " " << y2 << " " << z1 << "\n";
          outOBJ  << "v " << x2   << " " << y1 << " " << z1 << "\n";
          outOBJ  << "v " << x1   << " " << y1 << " " << z2 << "\n";
          outOBJ  << "v " << x1   << " " << y2 << " " << z2 << "\n";
          outOBJ  << "v " << x2   << " " << y2 << " " << z2 << "\n";
          outOBJ  << "v " << x2   << " " << y1 << " " << z2 << "\n";
       
          outOBJ << "f " << "-8" << " " << "-7" << " " <<"-6" << " " <<"-5" << "\n";//bottom
          outOBJ << "f " << "-8" << " " << "-4" << " " <<"-3" << " " <<"-7" << "\n";//back
          outOBJ << "f " << "-2" << " " << "-1" << " " <<"-5" << " " <<"-6" << "\n";//front
          outOBJ << "f " << "-7" << " " << "-3" << " " <<"-2" << " " <<"-6" << "\n";//right
          outOBJ << "f " << "-8" << " " << "-5" << " " <<"-1" << " " <<"-4" << "\n";//left
          outOBJ << "f " << "-4" << " " << "-1" << " " <<"-2" << " " <<"-3" << "\n";//top

          
       
        }
        
      
      j++;
      
      }
      k++;
    }

  }
  
  //OPT quad
  // myQuadList++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  {
    k = 0; // id of each list
    Color previousCol;
    std::stringstream matName;
    //we init the previousCol var.
    if (this->myQuadsMap.size() != 0)
      previousCol = *this->myQuadsMap.groups.begin()->second.style.color;    
    
    //Foreach lists
    for (auto it = this->myQuadsMap.groups.begin(); it != this->myQuadsMap.groups.end(); it++)
    {
      const auto& data = it->second.vertices;
      
      outOBJ << "o  myQuadSetList_" << it->first <<"\n";
      //For each list, we force the material
      unsigned int matid = getMaterialIndex(previousCol);
      outOBJ << "usemtl Mat_" << matid << "\n";
      
      //We scan the quads of the list
      for (size_t i = 0; i < data.size(); i += 4)
      {
        if (previousCol != *it->second.style.color)
        {
          previousCol = *it->second.style.color;
          
          matid = getMaterialIndex(previousCol);
          outOBJ << "usemtl Mat_" << matid << "\n";
        }
        
        apoint1 = (data[i + 1] - shift) * scale;
        apoint2 = (data[i + 2] - shift) * scale;
        apoint3 = (data[i + 3] - shift) * scale;
        apoint4 = (data[i + 4] - shift) * scale;
        
        outOBJ << "v " << apoint1[0]     << " " << apoint1[1]      << " " << apoint1[2] << "\n";
        outOBJ << "v " << apoint2[0]     << " " << apoint2[1]      << " " << apoint2[2] << "\n";
        outOBJ << "v " << apoint3[0]     << " " << apoint3[1]      << " " << apoint3[2] << "\n";
        outOBJ << "v " << apoint4[0]     << " " << apoint4[1]      << " " << apoint4[2] << "\n";
        // outOBJ << "vn " << aQuad->nx     << " " << aQuad->ny      << " " << aQuad->nz << "\n";
        outOBJ << "f " << "-4//-1" << " " << "-3//-1" << " " << "-2//-1"<< " " << "-1//-1"<< "\n";
      }
      
    }
  }
  
  //OPT triangle
  
  // myTriangleList++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  {
    //std::vector<triangleD3D>::const_iterator
    k = 0; // id of each list
    for (auto it = this->myTriangleSetList.groups.begin(); it != this->myTriangleSetList.groups.end(); it++)
    {
      const auto& data = it->second.vertices;
      std::ostringstream tmpStream;
      for (size_t i = 0; i < data.size(); i += 3)
      {
        //test if a clipping plane do not cut it
        bool notCut =true;
        auto point1 = data[i + 0];
        auto point2 = data[i + 1];
        auto point3 = data[i + 2];
       
        auto itClip = this->myClippingPlaneList.begin(); 
        while (itClip != this->myClippingPlaneList.end() && notCut )
        {
          double a = itClip->a;
          double b = itClip->b;
          double c = itClip->c;
          double d = itClip->d;
          double d2 = ( a * point1[0]) + (b * point1[1]) + ( c * point1[2] ) + d;
          notCut = ( d2 >= 0);
          d2 = ( a * point2[0]) + (b * point2[1]) + ( c * point2[2]) + d;
          notCut = ( notCut  && ( d2 >= 0) );
          d2 = ( a * point3[0]) + (b * point3[1]) + ( c * point3[2]) + d;
          notCut = ( notCut  && ( d2 >= 0) );
          
          itClip ++;
        }
        if (notCut)
        {
          apoint1 = (point1 - shift)*scale;
          apoint2 = (point2 - shift)*scale;
          apoint3 = (point3 - shift)*scale;
          
          tmpStream << "v " << apoint1[0]     << " " << apoint1[1]      << " " << apoint1[2] << "\n";
          tmpStream << "v " << apoint2[0]     << " " << apoint2[1]      << " " << apoint2[2] << "\n";
          tmpStream << "v " << apoint3[0]     << " " << apoint3[1]      << " " << apoint3[2] << "\n";
          
          // tmpStream << "vn " << s_it->nx    << " " << s_it->ny     << " " << s_it->nz << "\n";
          
          tmpStream << "f " << "-3//-1" << " " << "-2//-1"<< " " << "-1//-1"<< "\n";
        }
      }
      
      if (tmpStream.str() != "")
      {
        std::stringstream name;
        name << it->first;
        if ( name.str() == "")
        {
          name << "myTriangleSetList_" << k ;
        }
        unsigned int matid = getMaterialIndex(*it->second.style.color);
        std::stringstream matName;
        matName <<  "Mat_" << matid;
        outOBJ << "o  " << name.str() << "\n";
        outOBJ << "usemtl " << matName.str() << "\n";
        outOBJ << tmpStream.str();
      }
      k++;
    }
  }
  
  //OPT scell
  
  // Drawing all Khalimsky Space Cells --------------------------------------------------------------------
  
  // Prism (from updateList)+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  {
    j=0;
    k=0;
    std::ostringstream tmpStream;
    
    for (auto it = this->myPrismList.groups.begin(); it != this->myPrismList.groups.end(); it++)
    {
      //test if a clipping plane do not cut it
      bool notCut =true;
      const auto& data = it->second.vertices;

      for (size_t i = 0; i < data.size(); i += 4)
      {
        auto point1 = data[i + 0];
        auto point2 = data[i + 1];
        auto point3 = data[i + 2];
        auto point4 = data[i + 3];
       
        auto itClip = this->myClippingPlaneList.begin(); 
        while (itClip != this->myClippingPlaneList.end() && notCut )
        {
          double a = itClip->a;
          double b = itClip->b;
          double c = itClip->c;
          double d = itClip->d;
          double d2 = ( a * point1[0]) + (b * point1[1]) + ( c * point1[2] ) + d;
          notCut = ( d2 >= 0);
          d2 = ( a * point2[0]) + (b * point2[1]) + ( c * point2[2]) + d;
          notCut = ( notCut  && ( d2 >= 0) );
          d2 = ( a * point3[0]) + (b * point3[1]) + ( c * point3[2]) + d;
          notCut = ( notCut  && ( d2 >= 0) );
          d2 = ( a * point4[0]) + (b * point4[1]) + ( c * point4[2]) + d;
          notCut = ( notCut  && ( d2 >= 0) );
          
          itClip ++;
        }
        if (notCut)
        {
          apoint1 = (point1 -shift)*scale;
          apoint2 = (point2 -shift)*scale;
          apoint3 = (point3 -shift)*scale;
          apoint4 = (point4 -shift)*scale;
          
          tmpStream << "v " << apoint1[0]     << " " << apoint1[1]      << " " << apoint1[2] << "\n";
          tmpStream << "v " << apoint2[0]     << " " << apoint2[1]      << " " << apoint2[2] << "\n";
          tmpStream << "v " << apoint3[0]     << " " << apoint3[1]      << " " << apoint3[2] << "\n";
          tmpStream << "v " << apoint4[0]     << " " << apoint4[1]      << " " << apoint4[2] << "\n";
          
//          tmpStream << "vn " << s_it->nx    << " " << s_it->ny     << " " << s_it->nz << "\n";
          
          tmpStream << "f " << "-4//-1" << " " << "-3//-1" << " " << "-2//-1"<< " " << "-1//-1" << "\n";
          
          j++;
          
        }
      }

      if (tmpStream.str() != "")
      {
        std::stringstream name;
        name << "myPrismList" << j;
        std::stringstream matName;
        matName << "myPrismList" << j << "MAT";
        unsigned int matid = getMaterialIndex(*it->second.style.color);
        matName <<  "Mat_" << matid;
        outOBJ << "o  " << name.str() << "\n";
        outOBJ << "usemtl " << matName.str() << "\n";
        outOBJ << tmpStream.str();
      }
      j++;
      k++;
    }
    
    
  }
  
  //end Prism (from updateList)+++++++++++++++++++++++++++++++
  outMTL  << myMTLBuffer.str();
  
  outOBJ.close();
  outMTL.close();
}




template < typename Space, typename KSpace>
inline
void
DGtal::Board3D<Space, KSpace>::init()
{
  
  myMaterialIndex = 0;
  
  Board3D<Space, KSpace>::myCurrentStyle.color = DGtal::Color (220, 220, 220);
  // Board3D<Space, KSpace>::myCurrentLineColor = DGtal::Color (22, 22, 222, 50);
  // Board3D<Space, KSpace>::myDefaultColor= DGtal::Color(255, 255, 255);
  Board3D<Space, KSpace>::myModes["Board3D"]="SolidMode";
}
///////////////////////////////////////////////////////////////////////////////
template < typename Space, typename KSpace>
inline
unsigned int
DGtal::Board3D<Space, KSpace>::getMaterialIndex(const DGtal::Color &aColor)
{
  std::map<DGtal::Color, unsigned int>::iterator it;
  
  it = myMaterialMap.find(aColor);
  
  //The material exists
  if (it != myMaterialMap.end())
    return it->second;
  
  myMaterialMap.insert( std::pair<DGtal::Color,unsigned int>(aColor,myMaterialIndex) );
  std::stringstream matName ;
  matName << "Mat_" <<myMaterialIndex;
  myMTLBuffer << "newmtl " << matName.str()  <<"\n";
  myMTLBuffer << "Ka " << aColor.red()/255.0 << " " << aColor.green()/255.0 << " " << aColor.blue()/255.0 << "\n";
  myMTLBuffer << "Kd " << aColor.red()/255.0 << " " << aColor.green()/255.0 << " " << aColor.blue()/255.0 << "\n";
  myMTLBuffer << "Ks 0 0 0" << "\n";
  myMTLBuffer << "d " << aColor.alpha()/255.0 << "\n";
  myMTLBuffer << "illum 2" << std::endl << "\n";
  
  myMaterialIndex++;
  return (myMaterialIndex - 1);
}


//                                                                           //
///////////////////////////////////////////////////////////////////////////////
