/**
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as
 *  published by the Free Software Foundation, either version 3 of the
 *  License, or  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 **/

/**
 * @file   Board3DTo2D.ih
 * @author Martial Tola <http://liris.cnrs.fr/martial.tola/>
 * @date   mercredi 22 juin 2011
 * 
 * @brief
 *
 * Implementation of inline methods defined in Board3DTo2D.h
 *
 * This file is part of the DGtal library.
 */

///////////////////////////////////////////////////////////////////////////////
// IMPLEMENTATION of inline methods.
///////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
#include <cstdlib>
#include "DGtal/io/CDrawableWithDisplay3D.h"
//////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// Implementation of inline methods                                          //

/**
   * Set the default color for future drawing.
   *
   * @param aColor: a QColor (allow to set a trasnparency value).
   *
   **/ 
inline
DGtal::Board3DTo2D & 
DGtal::Board3DTo2D::operator<<(const QColor & aColor){
  myDefaultColor=aColor;
  return *this;
}

/**
   * Used to create a new list containing new Voxel objects
   * (useful to use transparency between different objects).
   * 
   **/  
inline
void
DGtal::Board3DTo2D::createNewVoxelList(bool depthTest){
  std::vector< voxel > v;
  myVoxelSetList.push_back(v);
  myListVoxelDepthTest.push_back(depthTest);
  
}

/**
   * Used to create a new list containing new Line objects
   * (useful to use transparency between different objects).
   * 
   **/ 
inline
void
DGtal::Board3DTo2D::createNewLineList(){
  std::vector< line > v;
  myLineSetList.push_back(v);
}

/**
   * Used to create a new list containing new Point objects
   * (useful to use transparency between different objects).
   * 
   **/ 
inline
void
DGtal::Board3DTo2D::createNewPointList(){
  std::vector< point > v;
  myPointSetList.push_back(v);
}

/**
   * Set fill color.
   * @param aColor: the fill color.
   *
   **/
inline
void
DGtal::Board3DTo2D::setFillColor(QColor aColor){
  myCurrentFillColor=aColor;  
}

/**
   * Set line color.
   * @param aColor: the color of the line.
   *
   **/
inline
void
DGtal::Board3DTo2D::setLineColor(QColor aColor){
  myCurrentLineColor=aColor;  
}

/**
   * Get fill color.
   * @return the fill color.
   *
   **/
inline
QColor
DGtal::Board3DTo2D::getFillColor(){
  return myCurrentFillColor;  
}

/**
   * Get line color.
   * @return the color of the line.
   *
   **/
inline
QColor
DGtal::Board3DTo2D::getLineColor(){
  return myCurrentLineColor;  
}

/**
   * Draws the drawable [object] in this board. It should satisfy
   * the concept CDrawableWithBoard3DTo2D, which requires for instance a
   * method selfDraw( Board3DTo2D & ).
   *
   * @param object any drawable object.
   * @return a reference on 'this'.
   */
template <typename TDrawableWithDisplay3D>
inline
DGtal::Board3DTo2D & 
DGtal::Board3DTo2D::operator<<( const TDrawableWithDisplay3D & object )
{
  BOOST_CONCEPT_ASSERT((CDrawableWithDisplay3D< TDrawableWithDisplay3D >));
  
  object.selfDrawDisplay3D( *this );
  return *this;
}

/**
   * @param objectName the name of the object (generally obtained
   * with a 'object.styleName()').
   *
   * @return the current mode for the given object name or "" if no
   * specific mode has been set.
   */
inline
std::string
DGtal::Board3DTo2D::getMode( const std::string & objectName ) const
{
  ModeMapping::const_iterator itm = myModes.find( objectName );
  return itm == myModes.end() ? "" : itm->second;
}

/**
   * Add a point as a 3d voxel using default color in the current list.
   * A voxel can be added in a new list by calling: @createNewList().
   * @param x x position.
   * @param y y position.
   * @param z z position.
   * @param color: the color of the voxel (default: 220, 220, 220).
   * @param width: the width of the voxel (default: 0.5).
   *
   **/
inline
void
DGtal::Board3DTo2D::addVoxel(int x, int y, int z, QColor aColor, double width, bool withWire)
{
  voxel v;
  
  v.x=x;
  v.y=y;
  v.z=z;
  v.R=aColor.red();
  v.G=aColor.green();
  v.B=aColor.blue();
  v.T=aColor.alpha();
  v.width=width;
  
  (myVoxelSetList.at(myVoxelSetList.size()-1)).push_back(v);
}

/**
   * Add a point using default color in the current list.
   * A point can be added in a new list by calling: @createNewList().
   * @param x x position.
   * @param y y position.
   * @param z z position.
   * @param color: the color of the point (default: 200,20,20).
   * @param size: the size of the point (default: 40).
   *
   **/
inline
void
DGtal::Board3DTo2D::addPoint(double x, double y, double z ,const QColor &aColor, double size)
{
  point p;
  
  p.x=x;
  p.y=y;
  p.z=z;
  p.R=aColor.red();
  p.G=aColor.green();
  p.B=aColor.blue();
  p.T=aColor.alpha();
  p.size=size;
  
  (myPointSetList.at(myPointSetList.size()-1)).push_back(p);  
   
}

/**
   * Add a line using default color in the current list.
   * A line can be added in a new list by calling: @createNewList().
   * @param x1 x position of first point.
   * @param y1 y position of first point.
   * @param z1 z position of first point.
   * @param x2 x position of second point.
   * @param y2 y position of second point.
   * @param z2 z position of second point.
   * @param color: the color of the line (default: 20,20,20,200).
   * @param width: the width of the line (default: 1.5).
   *
   **/
inline
void
DGtal::Board3DTo2D::addLine(double x1, double y1, double z1,  double x2, double y2, double z2,
			       const QColor & aColor, double width)
{
  line l;
  
  l.x1=x1;
  l.y1=y1;
  l.z1=z1;

  l.x2=x2;
  l.y2=y2;
  l.z2=z2;
  
  l.R=aColor.red();
  l.G=aColor.green();
  l.B=aColor.blue();
  l.T=aColor.alpha();
  l.width=width;
  
  (myLineSetList.at(myLineSetList.size()-1)).push_back(l);
}

/**
   * Add a quad using default color in the current list.
   * A quad can be added in a new list by calling: @createNewList().
   * @param x1 x position of first point.
   * @param y1 y position of first point.
   * @param z1 z position of first point.
   * @param x2 x position of second point.
   * @param y2 y position of second point.
   * @param z2 z position of second point.
   * @param x3 x position of third point.
   * @param y3 y position of third point.
   * @param z3 z position of third point.
   * @param x4 x position of fourth point.
   * @param y4 y position of fourth point.
   * @param z4 z position of fourth point.
   * @param color: the color of the quad.
   *
   **/
inline
void
DGtal::Board3DTo2D::addQuad(double x1, double y1, double z1,  double x2, double y2, double z2,
			       double x3, double y3, double z3,  double x4, double y4, double z4, QColor aColor)
{
  quad aQuad;
  
  aQuad.x1=x1; aQuad.y1=y1; aQuad.z1=z1;
  aQuad.x2=x2; aQuad.y2=y2; aQuad.z2=z2;
  aQuad.x3=x3; aQuad.y3=y3; aQuad.z3=z3;
  aQuad.x4=x4; aQuad.y4=y4; aQuad.z4=z4;
  aQuad.R=aColor.red();
  aQuad.G=aColor.green();
  aQuad.B=aColor.blue();
  aQuad.T=aColor.alpha();
  
  myQuadList.push_back(aQuad);  
}

/**
   * Add a KSSurfel using default color in the current list.
   * A KSSurfel can be added in a new list by calling: @createNewList().
   * @param x1 x position of first point.
   * @param y1 y position of first point.
   * @param z1 z position of first point.
   * @param x2 x position of second point.
   * @param y2 y position of second point.
   * @param z2 z position of second point.
   * @param x3 x position of third point.
   * @param y3 y position of third point.
   * @param z3 z position of third point.
   * @param x4 x position of fourth point.
   * @param y4 y position of fourth point.
   * @param z4 z position of fourth point.
   * @param color: the color of the KSSurfel (default: 180,180,250,255).
   *
   **/
inline
void
DGtal::Board3DTo2D::addKSSurfel(double x, double y, double z, 
		   bool xSurfel, bool ySurfel, bool zSurfel, double sizeShiftFactor, 
		   bool isOriented, bool isOrientedPositively, bool basicMode){
  // ### A corriger à partir de Viewer3D
//   quad aQuad;  
//   aQuad.x1=x1; aQuad.y1=y1; aQuad.z1=z1;
//   aQuad.x2=x2; aQuad.y2=y2; aQuad.z2=z2;
//   aQuad.x3=x3; aQuad.y3=y3; aQuad.z3=z3;
//   aQuad.x4=x4; aQuad.y4=y4; aQuad.z4=z4;
//   aQuad.R=aColor.red();
//   aQuad.G=aColor.green();
//   aQuad.B=aColor.blue();
//   aQuad.T=aColor.alpha();
  
//   myKSSurfelList.push_back(aQuad);  

}

/**
   * Add a KSPointel using default color in the current list.
   * A KSPointel can be added in a new list by calling: @createNewList().
   * @param x x position.
   * @param y y position.
   * @param z z position.
   * @param size: the size of the KSPointel (default: 0.1).
   * @param color: the color of the KSPointel (default: 200,20,20,255).
   *
   **/
inline
void 
DGtal::Board3DTo2D::addKSPointel(double x, double y, double z, double size,
		    bool isSigned, bool signPos)
{
// ### A corriger à partir de Viewer3D
//   point pt;
  
//   pt.x=x; pt.y=y; pt.z=z; pt.size=size; pt.R=color.red();
//   pt.G=color.green(); pt.B=color.blue(); pt.T=color.alpha();
  
//   myKSPointelList.push_back(pt);

}

/**
   * Add KSVoxel using default color in the current list.
   * A KSVoxel can be added in a new list by calling: @createNewList().
   * @param x x position.
   * @param y y position.
   * @param z z position.
   * @param color: the color of the KSVoxel (default: 255,180,250,255).
   *
   **/
inline
void 
DGtal::Board3DTo2D::addKSVoxel(int x, int y, int z)
{
//   voxel v;
// ### A corriger à partir de Viewer3D
//   v.x=x;
//   v.y=y;
//   v.z=z;
//   v.R=aColor.red();
//   v.G=aColor.green();
//   v.B=aColor.blue();
//   v.T=aColor.alpha();
//   v.width=0.47;
  
//   (myVoxelSetList.at(0)).push_back(v);

}

/**
   * Add a KSLinel using default color in the current list.
   * A KSLinel can be added in a new list by calling: @createNewList().
   * @param x1 x position of first point.
   * @param y1 y position of first point.
   * @param z1 z position of first point.
   * @param x2 x position of second point.
   * @param y2 y position of second point.
   * @param z2 z position of second point.
   * @param width: the width of the KSLinel (default: 0.02).
   * @param color: the color of the KSLinel (default: 20,20,200,255).
   *
   **/
inline
void
DGtal::Board3DTo2D::addKSLinel(double x1, double y1, double z1,
			       double x2, double y2, double z2,
			       double width, bool isSigned, bool signPos){
  //  ### A corriger à partir de Viewer3D
  // line l;
  
//   l.x1=x1; l.y1=y1; l.z1=z1; l.x2=x2; l.y2=y2; l.z2=z2; 
//   l.width=width; l.R= color.red(); l.G= color.green(); l.B=color.blue(); l.T=color.alpha();
  
//   myKSLinelList.push_back(l);

}

/**
   * Add a new 3D Clipping plane represented by ax+by+cz+d = 0 
   * A maximal of five clipping plane can be added.
   *
   * @param a, b, c, d : plane equation.
   **/
inline
void
DGtal::Board3DTo2D::addClippingPlane(double a, double b, double c, double d, bool drawPlane)
{
}

// ///////////////////////////////////////////////////////////////////////////////
// // Implementation of inline functions and external operators                 //

// /**
//  * Overloads 'operator<<' for displaying objects of class 'Board3DTo2D'.
//  * @param out the output stream where the object is written.
//  * @param object the object of class 'Board3DTo2D' to write.
//  * @return the output stream after the writing.
//  */
// inline
// std::ostream&
// DGtal::operator<< ( std::ostream & out,
//                   const Board3DTo2D & object )
// {
//     object.selfDisplay ( out );
//     return out;
// }

//                                                                           //
///////////////////////////////////////////////////////////////////////////////

