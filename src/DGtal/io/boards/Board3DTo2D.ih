/**
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as
 *  published by the Free Software Foundation, either version 3 of the
 *  License, or  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 **/

/**
 * @file   Board3DTo2D.ih
 * @author Martial Tola <http://liris.cnrs.fr/martial.tola/>
 * @date   mercredi 22 juin 2011
 * 
 * @brief
 *
 * Implementation of inline methods defined in Board3DTo2D.h
 *
 * This file is part of the DGtal library.
 */

///////////////////////////////////////////////////////////////////////////////
// IMPLEMENTATION of inline methods.
///////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
#include <cstdlib>
#include "DGtal/io/CDrawableWithDisplay3D.h"
#include "DGtal/io/Color.h"
//////////////////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////////////////
/*
// surcharge of parents methods              //
inline
void
DGtal::Board3DTo2D::addCone(double x1, double y1, double z1,
                        double x2, double y2, double z2,
                        double width, bool signPos)
{
  updateBoundingBox(x1, y1, z1);
  updateBoundingBox(x2, y2, z2);
  lineD3D l;
  l.x1=x1; l.y1=y1; l.z1=z1; l.x2=x2; l.y2=y2; l.z2=z2;
  l.width=width;
  l.R= myCurrentFillColor.red();
  l.G= myCurrentFillColor.green();
  l.B=myCurrentFillColor.blue();
  l.T=myCurrentFillColor.alpha();
  l.isSigned=true;
  l.signPos=signPos;
  myKSLinelList.push_back(l);
}


inline
void
DGtal::Board3DTo2D::addCylinder(double x1, double y1, double z1,
                        double x2, double y2, double z2,
                        double width)
{
  updateBoundingBox(x1, y1, z1);
  updateBoundingBox(x2, y2, z2);
  lineD3D l;
  l.x1=x1; l.y1=y1; l.z1=z1; l.x2=x2; l.y2=y2; l.z2=z2;
  l.width=width;
  l.R= myCurrentFillColor.red();
  l.G= myCurrentFillColor.green();
  l.B=myCurrentFillColor.blue();
  l.T=myCurrentFillColor.alpha();
  l.isSigned=false;
  l.signPos=false;
  myKSLinelList.push_back(l);
}
*/
//                                                                           //
///////////////////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////////////////
// Implementation of inline methods                                          //

/**
   * Set the default color for future drawing.
   *
   * @param aColor: a DGtal::Color (allow to set a trasnparency value).
   *
   **/ 
inline
DGtal::Board3DTo2D & 
DGtal::Board3DTo2D::operator<<(const DGtal::Color & aColor){
  myDefaultColor=aColor;
  return *this;
}


/**
   * Draws the drawable [object] in this board. It should satisfy
   * the concept CDrawableWithBoard3DTo2D, which requires for instance a
   * method setStyle( Board3DTo2D & ).
   *
   * @param object any drawable object.
   * @return a reference on 'this'.
   */
template <typename TDrawableWithDisplay3D>
inline
DGtal::Board3DTo2D & 
DGtal::Board3DTo2D::operator<<( const TDrawableWithDisplay3D & object )
{
  BOOST_CONCEPT_ASSERT((CDrawableWithDisplay3D< TDrawableWithDisplay3D >));

  DGtal::Display3DFactory::draw(*this, object);
  return *this;
}




//                                                                           //
///////////////////////////////////////////////////////////////////////////////

