/**
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as
 *  published by the Free Software Foundation, either version 3 of the
 *  License, or  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 **/

/**
 * @file Display3D.ih
 * @author Bertrand Kerautret (\c kerautre@loria.fr )
 * LORIA (CNRS, UMR 7503), University of Nancy, France
 *
 * @date 2011/08/08
 *
 * Implementation of inline methods defined in Display3D.h
 *
 * This file is part of the DGtal library.
 */

///////////////////////////////////////////////////////////////////////////////
// IMPLEMENTATION of inline methods.
///////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
#include <cstdlib>
#include "DGtal/io/CDrawableWithDisplay3D.h"
//////////////////////////////////////////////////////////////////////////////



///////////////////////////////////////////////////////////////////////////////
// Implementation of inline methods                                          //


///////////////////////////////////////////////////////////////////////////////
// Implementation of inline functions and external operators                 //


inline
void
DGtal::Display3D::setFillColor(QColor aColor){
  myCurrentFillColor=aColor;  
}


inline
void
DGtal::Display3D::setLineColor(QColor aColor){
  myCurrentLineColor=aColor;  
}


inline
QColor
DGtal::Display3D::getLineColor(){
  return myCurrentLineColor;
}

inline
QColor
DGtal::Display3D::getFillColor(){
  return myCurrentFillColor;
}


inline
std::string
DGtal::Display3D::getMode( const std::string & objectName ) const
{
  ModeMapping::const_iterator itm = myModes.find( objectName );
  return itm == myModes.end() ? "" : itm->second;
}




template <typename TDrawableWithDisplay3D>
inline
DGtal::Display3D & 
DGtal::Display3D::operator<<( const TDrawableWithDisplay3D & object )
{
  //  BOOST_CONCEPT_ASSERT((CDrawableWithDisplay3D< TDrawableWithDisplay3D >));
  
  object.selfDrawDisplay3D( *this );
  return *this;
}


/**
 * Overloads 'operator<<' for displaying objects of class 'Display3D'.
 * @param out the output stream where the object is written.
 * @param object the object of class 'Display3D' to write.
 * @return the output stream after the writing.
 */
inline
std::ostream&
DGtal::operator<< ( std::ostream & out,
                  const Display3D & object )
{
    object.selfDisplay ( out );
    return out;
}

//                                                                           //
///////////////////////////////////////////////////////////////////////////////


