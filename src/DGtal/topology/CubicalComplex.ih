/**
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as
 *  published by the Free Software Foundation, either version 3 of the
 *  License, or  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 **/

/**
 * @file CubicalComplex.ih
 * @author Jacques-Olivier Lachaud (\c jacques-olivier.lachaud@univ-savoie.fr )
 * Laboratory of Mathematics (CNRS, UMR 5127), University of Savoie, France
 *
 * @date 2015/08/28
 *
 * Implementation of inline methods defined in CubicalComplex.h
 *
 * This file is part of the DGtal library.
 */


//////////////////////////////////////////////////////////////////////////////
#include <cstdlib>
//////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// IMPLEMENTATION of inline methods.
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// ----------------------- Standard services ------------------------------

//-----------------------------------------------------------------------------
template <typename TKSpace, typename TCellContainer, typename TData>
inline
DGtal::CubicalComplex<TKSpace, TCellContainer, TData>::
~CubicalComplex()
{
}

//-----------------------------------------------------------------------------
template <typename TKSpace, typename TCellContainer, typename TData>
inline
DGtal::CubicalComplex<TKSpace, TCellContainer, TData>::
CubicalComplex( ConstAlias<KSpace> aK )
  : myKSpace( &aK ), myCells( dimension+1 )
{
}

//-----------------------------------------------------------------------------
template <typename TKSpace, typename TCellContainer, typename TData>
inline
DGtal::CubicalComplex<TKSpace, TCellContainer, TData>::
CubicalComplex( const CubicalComplex& other )
  : myKSpace( other.myKSpace ), myCells( other.myCells )
{
}

//-----------------------------------------------------------------------------
template <typename TKSpace, typename TCellContainer, typename TData>
inline
DGtal::CubicalComplex<TKSpace, TCellContainer, TData>&
DGtal::CubicalComplex<TKSpace, TCellContainer, TData>::
operator=( const CubicalComplex& other )
{
  if ( this != &other )
    {
      myKSpace = other.myKSpace;
      myCells  = other.myCells; 
    }
  return *this;
}

//-----------------------------------------------------------------------------
template <typename TKSpace, typename TCellContainer, typename TData>
inline
DGtal::Dimension
DGtal::CubicalComplex<TKSpace, TCellContainer, TData>::
dim() const
{
  Dimension d = myCells.size()-1;
  for ( typename std::vector<CellMap>::const_reverse_iterator it = myCells.rbegin(), itE = myCells.rend();
        it != itE; ++it, --d )
    if ( ! it->empty() ) return d;
  return 0;
}

///////////////////////////////////////////////////////////////////////////////
// Interface - public :

/**
 * Writes/Displays the object on an output stream.
 * @param out the output stream where the object is written.
 */
template <typename TKSpace, typename TCellContainer, typename TData>
inline
void
DGtal::CubicalComplex<TKSpace, TCellContainer, TData>::selfDisplay ( std::ostream & out ) const
{
  out << "[CubicalComplex dim=" << dim() << "]";
}

/**
 * Checks the validity/consistency of the object.
 * @return 'true' if the object is valid, 'false' otherwise.
 */
template <typename TKSpace, typename TCellContainer, typename TData>
inline
bool
DGtal::CubicalComplex<TKSpace, TCellContainer, TData>::isValid() const
{
    return true;
}



///////////////////////////////////////////////////////////////////////////////
// Implementation of inline functions                                        //

template <typename TKSpace, typename TCellContainer, typename TData>
inline
std::ostream&
DGtal::operator<< ( std::ostream & out, 
		  const CubicalComplex<TKSpace, TCellContainer, TData> & object )
{
  object.selfDisplay( out );
  return out;
}

//                                                                           //
///////////////////////////////////////////////////////////////////////////////


