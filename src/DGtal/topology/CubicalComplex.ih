/**
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as
 *  published by the Free Software Foundation, either version 3 of the
 *  License, or  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 **/

/**
 * @file CubicalComplex.ih
 * @author Jacques-Olivier Lachaud (\c jacques-olivier.lachaud@univ-savoie.fr )
 * Laboratory of Mathematics (CNRS, UMR 5127), University of Savoie, France
 *
 * @date 2015/08/28
 *
 * Implementation of inline methods defined in CubicalComplex.h
 *
 * This file is part of the DGtal library.
 */


//////////////////////////////////////////////////////////////////////////////
#include <cstdlib>
//////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// IMPLEMENTATION of inline methods.
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// ----------------------- Standard services ------------------------------

//-----------------------------------------------------------------------------
template <typename TKSpace, typename TCellContainer>
inline
DGtal::CubicalComplex<TKSpace, TCellContainer>::
~CubicalComplex()
{
}

//-----------------------------------------------------------------------------
template <typename TKSpace, typename TCellContainer>
inline
DGtal::CubicalComplex<TKSpace, TCellContainer>::
CubicalComplex( ConstAlias<KSpace> aK )
  : myKSpace( &aK ), myCells( dimension+1 )
{
}

//-----------------------------------------------------------------------------
template <typename TKSpace, typename TCellContainer>
inline
DGtal::CubicalComplex<TKSpace, TCellContainer>::
CubicalComplex( const CubicalComplex& other )
  : myKSpace( other.myKSpace ), myCells( other.myCells )
{
}

//-----------------------------------------------------------------------------
template <typename TKSpace, typename TCellContainer>
inline
DGtal::CubicalComplex<TKSpace, TCellContainer>&
DGtal::CubicalComplex<TKSpace, TCellContainer>::
operator=( const CubicalComplex& other )
{
  if ( this != &other )
    {
      myKSpace = other.myKSpace;
      myCells  = other.myCells; 
    }
  return *this;
}

//-----------------------------------------------------------------------------
template <typename TKSpace, typename TCellContainer>
inline
DGtal::Dimension
DGtal::CubicalComplex<TKSpace, TCellContainer>::
dim() const
{
  Dimension d = myCells.size()-1;
  for ( typename std::vector<CellMap>::const_reverse_iterator it = myCells.rbegin(), itE = myCells.rend();
        it != itE; ++it, --d )
    if ( ! it->empty() ) return d;
  return 0;
}

//-----------------------------------------------------------------------------
template <typename TKSpace, typename TCellContainer>
inline
void
DGtal::CubicalComplex<TKSpace, TCellContainer>::
insertCell( const Cell& aCell, const Data& data )
{
  insertCell( myKSpace->uDim( aCell ), aCell, data );
}
//-----------------------------------------------------------------------------
template <typename TKSpace, typename TCellContainer>
inline
void
DGtal::CubicalComplex<TKSpace, TCellContainer>::
insertCell( Dimension d, const Cell& aCell, const Data& data )
{
  myCells[ d ][ aCell ] = data;
}
//-----------------------------------------------------------------------------
template <typename TKSpace, typename TCellContainer>
inline
bool
DGtal::CubicalComplex<TKSpace, TCellContainer>::
belongs( const Cell& aCell ) const
{
  return belongs( myKSpace->uDim( aCell ), aCell );
}
//-----------------------------------------------------------------------------
template <typename TKSpace, typename TCellContainer>
inline
bool
DGtal::CubicalComplex<TKSpace, TCellContainer>::
belongs( Dimension d, const Cell& aCell ) const
{
  ASSERT( d <= dimension+1 );
  CellMapConstIterator it = myCells[ d ].find( aCell );
  return it != myCells[ d ].end();
}
//-----------------------------------------------------------------------------
template <typename TKSpace, typename TCellContainer>
template <typename CellOutputIterator>
inline
void
DGtal::CubicalComplex<TKSpace, TCellContainer>::
faces( CellOutputIterator& outIt, const Cell& aCell )
{
  Cells all_proper_faces = myKSpace->uFaces( aCell );
  for ( typename Cells::ConstIterator it = all_proper_faces.begin(), 
          itE = all_proper_faces.end(); it != itE; ++it )
    if ( belongs( *it ) )
      *outIt++ = *it;
}

//-----------------------------------------------------------------------------
template <typename TKSpace, typename TCellContainer>
inline
typename DGtal::CubicalComplex<TKSpace, TCellContainer>::CellMapConstIterator
DGtal::CubicalComplex<TKSpace, TCellContainer>::
begin( Dimension d ) const
{
  return myCells[ d ].begin();
}

//-----------------------------------------------------------------------------
template <typename TKSpace, typename TCellContainer>
inline
typename DGtal::CubicalComplex<TKSpace, TCellContainer>::CellMapConstIterator
DGtal::CubicalComplex<TKSpace, TCellContainer>::
end( Dimension d ) const
{
  return myCells[ d ].end();
}

//-----------------------------------------------------------------------------
template <typename TKSpace, typename TCellContainer>
inline
void
DGtal::CubicalComplex<TKSpace, TCellContainer>::
close()
{
  close( dim() );
}

//-----------------------------------------------------------------------------
template <typename TKSpace, typename TCellContainer>
inline
void
DGtal::CubicalComplex<TKSpace, TCellContainer>::
close( Dimension k )
{
  if ( k <= 0 ) return;
  Dimension l = k - 1;
  for ( CellMapConstIterator it = begin( k ), itE = end( k ); 
        it != itE; ++it )
    {
      Cells direct_faces = myKSpace->uLowerIncident( it->first );
      for ( typename Cells::const_iterator cells_it = direct_faces.begin(), 
              cells_it_end = direct_faces.end(); cells_it != cells_it_end; ++cells_it )
        insertCell( l, *cells_it );
    }
  close( l );
}

///////////////////////////////////////////////////////////////////////////////
// Interface - public :

/**
 * Writes/Displays the object on an output stream.
 * @param out the output stream where the object is written.
 */
template <typename TKSpace, typename TCellContainer>
inline
void
DGtal::CubicalComplex<TKSpace, TCellContainer>::selfDisplay ( std::ostream & out ) const
{
  out << "[CubicalComplex dim=" << dim();
  for ( Dimension i = 0; i < myCells.size(); ++i )
    out << " #" << i << "=" << myCells[ i ].size();
  out << "]";
}

/**
 * Checks the validity/consistency of the object.
 * @return 'true' if the object is valid, 'false' otherwise.
 */
template <typename TKSpace, typename TCellContainer>
inline
bool
DGtal::CubicalComplex<TKSpace, TCellContainer>::isValid() const
{
    return true;
}



///////////////////////////////////////////////////////////////////////////////
// Implementation of inline functions                                        //

template <typename TKSpace, typename TCellContainer>
inline
std::ostream&
DGtal::operator<< ( std::ostream & out, 
		  const CubicalComplex<TKSpace, TCellContainer> & object )
{
  object.selfDisplay( out );
  return out;
}

//                                                                           //
///////////////////////////////////////////////////////////////////////////////


