/**
 * @file DomainAdjacency.ih
 * @author Jacques-Olivier Lachaud (\c jacques-olivier.lachaud@univ-savoie.fr )
 * Laboratory of Mathematics (CNRS, UMR 5807), University of Savoie, France
 *
 * @date 2010/07/10
 *
 * Implementation of inline methods defined in DomainAdjacency.h
 *
 * This file is part of the DGtal library.
 */


//////////////////////////////////////////////////////////////////////////////
#include <cstdlib>
//////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// IMPLEMENTATION of inline methods.
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// ----------------------- Standard services ------------------------------

template <typename TDomain, typename TAdjacency>
inline
DGtal::DomainAdjacency<TDomain,TAdjacency>
::~DomainAdjacency()
{}
//------------------------------------------------------------------------------
template <typename TDomain, typename TAdjacency>
inline
DGtal::DomainAdjacency<TDomain,TAdjacency>
::DomainAdjacency( const Domain & aDomain, 
		   const Adjacency & adjacency )
  : myPred( aDomain ), myAdjacency( adjacency )
{
}
//------------------------------------------------------------------------------
template <typename TDomain, typename TAdjacency>
inline
DGtal::DomainAdjacency<TDomain,TAdjacency>
::DomainAdjacency( const DomainAdjacency & other )
  : myPred( other.myPred ), myAdjacency( other.myAdjacency )
{
}
//------------------------------------------------------------------------------
template <typename TDomain, typename TAdjacency>
inline
const TDomain &
DGtal::DomainAdjacency<TDomain,TAdjacency>
::domain() const
{
  return myPred.domain();
}
//------------------------------------------------------------------------------
template <typename TDomain, typename TAdjacency>
inline
const typename DGtal::DomainAdjacency<TDomain,TAdjacency>::Predicate &
DGtal::DomainAdjacency<TDomain,TAdjacency>
::predicate() const
{
  return myPred;
}
//------------------------------------------------------------------------------
template <typename TDomain, typename TAdjacency>
inline
bool
DGtal::DomainAdjacency<TDomain,TAdjacency>
::isAdjacentTo( const Point & p1, const Point & p2 ) const
{
  ASSERT( myPred( p1 ) );
  ASSERT( myPred( p2 ) );
  return isAdjacentTo( p1, p2 );
}
//------------------------------------------------------------------------------
template <typename TDomain, typename TAdjacency>
inline
bool
DGtal::DomainAdjacency<TDomain,TAdjacency>
::isProperlyAdjacentTo( const Point & p1, const Point & p2 ) const
{
  ASSERT( myPred( p1 ) );
  ASSERT( myPred( p2 ) );
  return isProperlyAdjacentTo( p1, p2 );
}
//------------------------------------------------------------------------------
template <typename TDomain, typename TAdjacency>
template <typename OutputIterator, typename PointPredicate >
inline
void
DGtal::DomainAdjacency<TDomain,TAdjacency>
::writeNeighborhood( const Point & p, 
		     OutputIterator & out_it,
		     const PointPredicate & pred ) const
{
  // typedef BinaryPointPredicate< PointPredicate, DomainPredicateType > 
  //   Predicate;
  // Predicate combinedPred( pred, myPred, andBF2 );
  // myAdjacency.writeNeighborhood( p, out_it, combinedPred );
  myAdjacency.writeNeighborhood( p, out_it, pred );
}
//------------------------------------------------------------------------------
template <typename TDomain, typename TAdjacency>
template <typename OutputIterator>
inline
void 
DGtal::DomainAdjacency<TDomain,TAdjacency>
::writeNeighborhood( const Point & p, 
		     OutputIterator & out_it ) const
{
  myAdjacency.writeNeighborhood( p, out_it, myPred );
}
//------------------------------------------------------------------------------
template <typename TDomain, typename TAdjacency>
template <typename OutputIterator, typename PointPredicate >
inline
void 
DGtal::DomainAdjacency<TDomain,TAdjacency>
::writeProperNeighborhood( const Point & p, 
			   OutputIterator & out_it,
			   const PointPredicate & pred ) const
{
  // typedef BinaryPointPredicate< PointPredicate, DomainPredicateType > 
  //   Predicate;
  // Predicate combinedPred( pred, myPred, andBF2 );
  // myAdjacency.writeProperNeighborhood( p, out_it, combinedPred );
  myAdjacency.writeProperNeighborhood( p, out_it, pred );
}
//------------------------------------------------------------------------------
template <typename TDomain, typename TAdjacency>
template <typename OutputIterator>
inline
void 
DGtal::DomainAdjacency<TDomain,TAdjacency>
::writeProperNeighborhood( const Point & p, 
			   OutputIterator & out_it ) const
{
  myAdjacency.writeProperNeighborhood( p, out_it, myPred );
}
//------------------------------------------------------------------------------
template <typename TDomain, typename TAdjacency>
inline
void
DGtal::DomainAdjacency<TDomain,TAdjacency>
::selfDisplay ( std::ostream & out ) const
{
  out << "[DomainAdjacency]";
}
//------------------------------------------------------------------------------
template <typename TDomain, typename TAdjacency>
inline
bool
DGtal::DomainAdjacency<TDomain,TAdjacency>
::isValid() const
{
    return true;
}
//------------------------------------------------------------------------------
template <typename TDomain, typename TAdjacency>
inline
std::ostream&
DGtal::operator<< ( std::ostream & out, 
		  const DomainAdjacency<TDomain,TAdjacency> & object )
{
  object.selfDisplay( out );
  return out;
}

//                                                                           //
///////////////////////////////////////////////////////////////////////////////


