/**
 * @file Object.ih
 * @author Jacques-Olivier Lachaud (\c jacques-olivier.lachaud@univ-savoie.fr )
 * Laboratory of Mathematics (CNRS, UMR 5807), University of Savoie, France
 *
 * @date 2010/07/07
 *
 * Implementation of inline methods defined in Object.h
 *
 * This file is part of the DGtal library.
 */


//////////////////////////////////////////////////////////////////////////////
#include <cstdlib>
#include "DGtal/topology/Expander.h"
//////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// IMPLEMENTATION of inline methods.
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// ----------------------- Standard services ------------------------------

/**
 * Constructor. 
 *
 * @param aTopology the digital topology chosen for this set, a copy of
 * which is stored in the object.
 *
 * @param aPointSet the set of points of the object. It is copied
 * in the object.
 */
template <typename TDigitalTopology, typename TDigitalSet>
inline
DGtal::Object<TDigitalTopology,TDigitalSet>::Object()
  : myTopo( 0 ), myPointSet( 0 ), myConnectedness( UNKNOWN )
{
}

/**
 * Constructor. 
 *
 * @param aTopology the digital topology chosen for this set, a copy of
 * which is stored in the object.
 *
 * @param aPointSet the set of points of the object. It is copied
 * in the object.
 */
template <typename TDigitalTopology, typename TDigitalSet>
inline
DGtal::Object<TDigitalTopology,TDigitalSet>::Object
( const DigitalTopology & aTopology, 
  const DigitalSet & aPointSet,
  Connectedness cxn )
  : myTopo( new DigitalTopology( aTopology ) ),
    myPointSet( new DigitalSet( aPointSet ) ),
    myConnectedness( cxn )
{
}

/**
 * Constructor. 
 *
 * @param aTopology the digital topology chosen for this set,
 * smartly copied.
 *
 * @param aPointSet the set of points of the object. It is copied
 * in the object.
 */
template <typename TDigitalTopology, typename TDigitalSet>
inline
DGtal::Object<TDigitalTopology,TDigitalSet>::Object
( const CowPtr<DigitalTopology> & aTopology, 
  const DigitalSet & aPointSet,
  Connectedness cxn )
  : myTopo( aTopology ),
    myPointSet( new DigitalSet( aPointSet ) ), 
    myConnectedness( cxn )
{
}

/**
 * Constructor. 
 *
 * @param aTopology the digital topology chosen for this set, a copy of
 * which is stored in the object.
 *
 * @param aPointSet the set of points of the object. It is smartly
 * reference in the object.
 */
template <typename TDigitalTopology, typename TDigitalSet>
inline
DGtal::Object<TDigitalTopology,TDigitalSet>::Object
( const TDigitalTopology & aTopology, 
  const CowPtr<DigitalSet> & aPointSet,
  Connectedness cxn )
  : myTopo( new DigitalTopology( aTopology ) ),
    myPointSet( aPointSet ), 
    myConnectedness( cxn )
{
}
  
/**
 * Constructor by attachment of a dynamically allocated point set. 
 *
 * @param aTopology the digital topology chosen for this set, a copy of
 * which is stored in the object.
 *
 * @param aPointSetPtr a dynamically allocated pointer on a set of
 * points which is afterwards handled by this (which will take
 * care of its deletion).
 */
template <typename TDigitalTopology, typename TDigitalSet>
inline
DGtal::Object<TDigitalTopology,TDigitalSet>::Object
( const TDigitalTopology & aTopology, 
  DigitalSet* aPointSetPtr,
  Connectedness cxn )
  : myTopo( new DigitalTopology( aTopology ) ),
    myPointSet( pointSet ),
    myConnectedness( cxn )
{
}

/**
 * Copy constructor.
 * @param other the object to clone.
 *
 * The copy is smart in the sense that the digital set is
 * referenced, and will be copied only if the set is changed.
 */
template <typename TDigitalTopology, typename TDigitalSet>
inline
DGtal::Object<TDigitalTopology,TDigitalSet>::Object
( const Object & other )
  : myTopo( other.myTopo ),
    myPointSet( other.myPointSet ),
    myConnectedness( other.myConnectedness )
{
}

/**
 * Constructor of an empty object by providing a domain.
 *
 * @param aTopology the digital topology chosen for this set, a copy of
 * which is stored in the object.
 *
 * @param aDomain any domain related to the given topology.
 */
template <typename TDigitalTopology, typename TDigitalSet>
inline
DGtal::Object<TDigitalTopology,TDigitalSet>::Object
( const TDigitalTopology & aTopology, 
  const Domain & aDomain )
  : myTopo( new DigitalTopology( aTopology ) ),
    myPointSet( new DigitalSet( aDomain ) ),
    myConnectedness( CONNECTED )
{
}

/**
 * Constructor of an empty object by providing a domain.
 *
 * @param aTopology the digital topology chosen for this set, smartly copied.
 *
 * @param aDomain any domain related to the given topology.
 */
template <typename TDigitalTopology, typename TDigitalSet>
inline
DGtal::Object<TDigitalTopology,TDigitalSet>::Object
( const CowPtr<DigitalTopology> & aTopology, 
  const Domain & aDomain )
  : myTopo( aTopology ),
    myPointSet( new DigitalSet( aDomain ) ),
    myConnectedness( CONNECTED )
{
}

/**
 * Destructor.
 */
template <typename TDigitalTopology, typename TDigitalSet>
inline
DGtal::Object<TDigitalTopology,TDigitalSet>::~Object()
{
}

/**
 * Assignment.
 * @param other the object to copy.
 * @return a reference on 'this'.
 */
template <typename TDigitalTopology, typename TDigitalSet>
inline
DGtal::Object<TDigitalTopology,TDigitalSet> &
DGtal::Object<TDigitalTopology,TDigitalSet>::operator= 
( const Object & other )
{
  if ( this != &other )
    {
      myTopo = other.myTopo;
      myPointSet = other.myPointSet;
      myConnectedness = other.myConnectedness;
    }
  return *this;
}

/**
 * @return the number of elements in the set.
 */
template <typename TDigitalTopology, typename TDigitalSet>
inline
typename DGtal::Object<TDigitalTopology,TDigitalSet>::SizeType 
DGtal::Object<TDigitalTopology,TDigitalSet>::size() const
{
  return myPointSet->size();
}

/**
 * A const reference to the embedding domain.
 */
template <typename TDigitalTopology, typename TDigitalSet>
inline
const typename DGtal::Object<TDigitalTopology,TDigitalSet>::Domain &
DGtal::Object<TDigitalTopology,TDigitalSet>::domain() const
{
  return myPointSet->domain();
}


/**
 * A const reference on the point set defining the points of the
 * digital object.
 */
template <typename TDigitalTopology, typename TDigitalSet>
inline
const TDigitalSet & 
DGtal::Object<TDigitalTopology,TDigitalSet>::pointSet() const
{
  return *myPointSet;
}

/**
 * A reference on the point set defining the points of the
 * digital object (may duplicate the set).
 */
template <typename TDigitalTopology, typename TDigitalSet>
inline
TDigitalSet & 
DGtal::Object<TDigitalTopology,TDigitalSet>::pointSet()
{
  myConnectedness = UNKNOWN;
  return *myPointSet;
}

/**
 * @return a const reference to the topology of this object.
 */
template <typename TDigitalTopology, typename TDigitalSet>
inline
const TDigitalTopology & 
DGtal::Object<TDigitalTopology,TDigitalSet>::topology() const
{
  return *myTopo;
}

/**
 * @return a const reference to the adjacency of this object.
 */
template <typename TDigitalTopology, typename TDigitalSet>
inline
const typename TDigitalTopology::ForegroundAdjacency & 
DGtal::Object<TDigitalTopology,TDigitalSet>::adjacency() const
{
  return myTopo->kappa();
}


///////////////////////////////////////////////////////////////////////////////
// ----------------------- Object services --------------------------------

/**
 * Let A be this object with foreground adjacency k and N_k(p) the
 * k-neighborhood of p. Returns the set A intersected with N_k(p).
 *
 * @param p any point (in the domain of the digital object, not
 * necessarily in the object).
 *
 * @return the kappa-neighborhood of [p] in this object.
 */
template <typename TDigitalTopology, typename TDigitalSet>
inline
typename DGtal::Object<TDigitalTopology,TDigitalSet>::SmallObject
DGtal::Object<TDigitalTopology,TDigitalSet>::neighborhood
( const Point & p ) const
{
  typedef std::vector<Point> Container;
  typedef typename Container::const_iterator ContainerConstIterator;
  typedef typename DigitalSet::ConstIterator DigitalSetConstIterator;

  // Intermediate container that is fast writable.
  Container neigh;
  std::back_insert_iterator< Container > back_ins_it( neigh );
  adjacency().writeNeighborhood( p, back_ins_it );

  // A neighborhood is small, so is defined the digital object.
  SmallObject neighA( myTopo, pointSet().domain() );
  const ContainerConstIterator it_end( neigh.end() );
  const DigitalSetConstIterator not_found( pointSet().end() );
  SmallSet & neighASet = neighA.pointSet(); 
  for ( ContainerConstIterator it = neigh.begin();
	it != it_end;
	++it )
    if ( pointSet().find( *it ) != not_found )
      neighASet.insertNew( *it ); // insertNew is guaranteed by construction.
  return neighA;
}

/**
 * @param p any point (in the domain of the digital object, not
 * necessarily in the object).
 *
 * @return the cardinal of the kappa-neighborhood of [p] in this object.
 *
 * @see neighborhood
 *
 * NB: faster than computing the neighborhood then computing its cardinal.
 */
template <typename TDigitalTopology, typename TDigitalSet>
inline
typename DGtal::Object<TDigitalTopology,TDigitalSet>::SizeType
DGtal::Object<TDigitalTopology,TDigitalSet>
::neighborhoodSize( const Point & p ) const
{
  typedef std::vector<Point> Container;
  typedef typename Container::const_iterator ContainerConstIterator;
  typedef typename DigitalSet::ConstIterator DigitalSetConstIterator;

  // Intermediate container that is fast writable.
  Container neigh;
  std::back_insert_iterator< Container > back_ins_it( neigh );
  adjacency().writeNeighborhood( p, back_ins_it );

  // A neighborhood is small, so is defined the digital object.
  const ContainerConstIterator it_end( neigh.end() );
  const DigitalSetConstIterator not_found( pointSet().end() );
  SizeType nb = 0;
  for ( ContainerConstIterator it = neigh.begin();
	it != it_end;
	++it )
    if ( pointSet().find( *it ) != not_found )
      ++nb;
  return nb;
}


/**
 * Let A be this object with foreground adjacency k and N*_k(p)
 * the proper k-neighborhood of p. Returns the set A intersected
 * with N*_k(p).
 *
 * @param p any point (in the domain of the digital object, not
 * necessarily in the object).
 *
 * @return the kappa-neighborhood of [p] in this object, without p.
 */
template <typename TDigitalTopology, typename TDigitalSet>
inline
typename DGtal::Object<TDigitalTopology,TDigitalSet>::SmallObject
DGtal::Object<TDigitalTopology,TDigitalSet>::properNeighborhood
( const Point & p ) const
{
  typedef std::vector<Point> Container;
  typedef typename Container::const_iterator ContainerConstIterator;
  typedef typename DigitalSet::ConstIterator DigitalSetConstIterator;

  // Intermediate container that is fast writable.
  Container neigh;
  std::back_insert_iterator< Container > back_ins_it( neigh );
  adjacency().writeProperNeighborhood( p, back_ins_it );

  // A neighborhood is small, so is defined the digital object.
  SmallObject neighA( myTopo, pointSet().domain() );
  const ContainerConstIterator it_end( neigh.end() );
  const DigitalSetConstIterator not_found( pointSet().end() );
  SmallSet & neighASet = neighA.pointSet(); 
  for ( ContainerConstIterator it = neigh.begin();
	it != it_end;
	++it )
    if ( pointSet().find( *it ) != not_found )
      neighASet.insertNew( *it ); // insertNew is guaranteed by construction.
  return neighA;
}

/**
 * @param p any point (in the domain of the digital object, not
 * necessarily in the object).
 *
 * @return the cardinal of the kappa-neighborhood of [p] in this object.
 *
 * @see properNeighborhood
 *
 * NB: faster than computing the proper neighborhood then
 * computing its cardinal.
 */
template <typename TDigitalTopology, typename TDigitalSet>
inline
typename DGtal::Object<TDigitalTopology,TDigitalSet>::SizeType
DGtal::Object<TDigitalTopology,TDigitalSet>
::properNeighborhoodSize( const Point & p ) const
{
  typedef std::vector<Point> Container;
  typedef typename Container::const_iterator ContainerConstIterator;
  typedef typename DigitalSet::ConstIterator DigitalSetConstIterator;

  // Intermediate container that is fast writable.
  Container neigh;
  std::back_insert_iterator< Container > back_ins_it( neigh );
  adjacency().writeProperNeighborhood( p, back_ins_it );

  // A neighborhood is small, so is defined the digital object.
  const ContainerConstIterator it_end( neigh.end() );
  const DigitalSetConstIterator not_found( pointSet().end() );
  SizeType nb = 0;
  for ( ContainerConstIterator it = neigh.begin();
	it != it_end;
	++it )
    if ( pointSet().find( *it ) != not_found )
      ++nb;
  return nb;
}



/**
 * @return the border of this object (the set of points of this
 * which is lambda()-adjacent with some point of the background).
 */
template <typename TDigitalTopology, typename TDigitalSet>
inline
DGtal::Object<TDigitalTopology,TDigitalSet>
DGtal::Object<TDigitalTopology,TDigitalSet>::border() const
{
  typedef std::vector<Point> Container;
  typedef typename Container::const_iterator ContainerConstIterator;
  typedef typename DigitalSet::ConstIterator DigitalSetConstIterator;
  typedef typename DigitalSet::ConstIterator DigitalSetConstIterator;
  //typedef typename Domain::Predicate Predicate;

  // Intermediate container that is fast writable.
  Container neigh;
  const DigitalSet & mySet = pointSet();
  Object<DigitalTopology,DigitalSet> output( topology(), 
					     domain() );
  // mySet.domain() );
  DigitalSet & outputSet = output.pointSet();

  // Loop on all points of the set.
  const DigitalSetConstIterator it_end = mySet.end();
  for ( DigitalSetConstIterator it = mySet.begin();
	it != it_end;
	++it )
    {
      std::back_insert_iterator< Container > back_ins_it( neigh );
      // Computing neighborhood within domain.
      topology().lambda().writeProperNeighborhood
	( *it, back_ins_it, domain().predicate() );
      // Checks if any point is not in the object.
      const ContainerConstIterator itc_end( neigh.end() );
      for ( ContainerConstIterator itc = neigh.begin();
	    itc != itc_end;
	    ++itc )
	if ( pointSet().find( *itc ) == it_end )
	  {
	    outputSet.insertNew( *it );
	    break;
	  }
      neigh.clear();
    }
  return output;
}

/**
 * Computes the connected components of the object and writes
 * them on the output iterator [it].
 *
 * @tparam TOutputObjectIterator the type of an output iterator in
 * a container of Object s.
 *
 * @param it the output iterator. *it is an Object.
 */
template <typename TDigitalTopology, typename TDigitalSet>
template <typename TOutputObjectIterator>
inline
typename DGtal::Object<TDigitalTopology,TDigitalSet>::SizeType
DGtal::Object<TDigitalTopology,TDigitalSet>
::writeComponents( TOutputObjectIterator & it ) const
{
  SizeType nb_components = 0;
  if ( pointSet().empty() ) 
    {
      myConnectedness = CONNECTED;
      return nb_components;
    }
  else if ( connectedness() == CONNECTED )
    {
      *it++ = *this;
      return 1;
    }
  typedef typename DigitalSet::ConstIterator DigitalSetConstIterator;
  DigitalSetConstIterator it_object = pointSet().begin();
  Point p( *it_object++ );
  Expander<Object> expander( *this, p );
  while ( expander.nextLayer() ) ;
  Object component( myTopo, expander.core(), CONNECTED );
  *it++ = component;
  ++nb_components;
  DigitalSet visited( expander.core() );
  while ( it_object != pointSet().end() )
    {
      p = *it_object++;
      if ( visited.find( p ) == visited.end() )
	{
	  Expander<Object> expander2( *this, p );
	  while ( expander2.nextLayer() ) ;
	  Object component2( myTopo, expander2.core(), CONNECTED );
	  *it++ = component2;
	  ++nb_components;
	  visited += expander2.core();
	}
    }
  myConnectedness = nb_components == 1 ? CONNECTED : DISCONNECTED;
  return nb_components;
}

/**
 * @return the connectedness of this object. Either CONNECTED,
 * DISCONNECTED, or UNKNOWN.
 *
 * @see computeConnectedness
 */
template <typename TDigitalTopology, typename TDigitalSet>
typename DGtal::Object<TDigitalTopology,TDigitalSet>::Connectedness 
DGtal::Object<TDigitalTopology,TDigitalSet>::connectedness() const
{
  return myConnectedness;
}

/**
 * If 'connectedness() == UNKNOWN', computes the connectedness of
 * this object. After that, the connectedness of 'this' is either
 * CONNECTED or DISCONNECTED.
 *
 * @return the connectedness of this object. Either CONNECTED or
 * DISCONNECTED.
 *
 * @see connectedness
 */
template <typename TDigitalTopology, typename TDigitalSet>
typename DGtal::Object<TDigitalTopology,TDigitalSet>::Connectedness 
DGtal::Object<TDigitalTopology,TDigitalSet>::computeConnectedness() const
{
  if ( myConnectedness == UNKNOWN )
    {
      if ( pointSet().empty() ) 
	myConnectedness = CONNECTED;
      else 
	{
	  // Take first point
	  Expander<Object> expander( *this, *( pointSet().begin() ) );
	  // and expand.
	  while ( expander.nextLayer() ) ;
	  myConnectedness = ( expander.core().size() == pointSet().size() )
	    ? CONNECTED : DISCONNECTED;
	}
    }
  return myConnectedness;
}
 

///////////////////////////////////////////////////////////////////////////////
// Interface - public :

/**
 * Writes/Displays the object on an output stream.
 * @param out the output stream where the object is written.
 */
template <typename TDigitalTopology, typename TDigitalSet>
inline
void
DGtal::Object<TDigitalTopology,TDigitalSet>
::selfDisplay ( std::ostream & out ) const
{
  out << "[Object"
      << " topology=" << myTopo
      << " counts=" << myPointSet.count()
      << " set=" << *myPointSet
      << " cxn=" << myConnectedness
      << "]";
}

/**
 * Checks the validity/consistency of the object.
 * @return 'true' if the object is valid, 'false' otherwise.
 */
template <typename TDigitalTopology, typename TDigitalSet>
inline
bool
DGtal::Object<TDigitalTopology, TDigitalSet>::isValid() const
{
  return ( *myPointSet != 0 ) && (*myTopo != 0 );
}

///////////////////////////////////////////////////////////////////////////////
// selfDraw functions                                                        //
template <typename TDigitalTopology, typename TDigitalSet>
template<typename Functor>
inline
void 
DGtal::Object<TDigitalTopology,TDigitalSet>::selfDraw(LibBoard::Board & aBoard) const
{
  pointSet().selfDraw<Functor>(aBoard);
}

template<typename TDigitalTopology, typename TDigitalSet>
template<typename Functor>
inline
void 
DGtal::Object<TDigitalTopology,TDigitalSet>::selfDrawWithAdjacencies(LibBoard::Board & aBoard) const
{
  Point p;
  pointSet().selfDraw<Functor>(aBoard);
  aBoard.setPenColorRGBi(0,0,0);
  for(typename TDigitalSet::ConstIterator it = pointSet().begin(); 
      it != pointSet().end();
      ++it)
    {
      //Brute-force scan of the neighborhood.
      SmallObject neig = this->properNeighborhood(*it);
      for(typename SmallObject::DigitalSet::ConstIterator it2 = neig.pointSet().begin(); 
	  it2 != neig.pointSet().end();
	  ++it2)	
	{
	  p = (*it2) - (*it);
	  p.selfDraw(aBoard,(*it));
	}
    }
}



///////////////////////////////////////////////////////////////////////////////
// Implementation of inline functions                                        //

template <typename TDigitalTopology, typename TDigitalSet>
inline
std::ostream&
DGtal::operator<< ( std::ostream & out, 
		  const Object<TDigitalTopology,TDigitalSet> & object )
{
  object.selfDisplay( out );
  return out;
}

//                                                                           //
///////////////////////////////////////////////////////////////////////////////


