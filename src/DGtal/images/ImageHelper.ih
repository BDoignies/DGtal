/**
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as
 *  published by the Free Software Foundation, either version 3 of the
 *  License, or  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 **/

/**
 * @file ImageHelper.ih
 * @author Tristan Roussillon (\c tristan.roussillon@liris.cnrs.fr )
 * Laboratoire d'InfoRmatique en Image et Syst√®mes d'information - LIRIS (CNRS, UMR 5205), CNRS, France
 *
 * @date 2012/02/15
 *
 * Implementation of inline methods defined in ImageHelper.h
 *
 * This file is part of the DGtal library.
 */


//////////////////////////////////////////////////////////////////////////////
#include <cstdlib>
//////////////////////////////////////////////////////////////////////////////



//------------------------------------------------------------------------------
template<typename I, typename O, typename P>
inline
void 
DGtal::setFromDomainAndPredicate(const I& itb, const I& ite, const O& ito, const P& aPred)
{
  BOOST_CONCEPT_ASSERT(( CPointPredicate<P> )); 
  BOOST_CONCEPT_ASSERT(( boost::InputIterator<I> ));
  BOOST_CONCEPT_ASSERT(( boost::OutputIterator<O,typename P::Point> ));

  NotPointPredicate<P> nPred( aPred ); 
  std::remove_copy_if(itb, ite, ito, nPred); 
}

//------------------------------------------------------------------------------
template<typename I, typename O, typename F>
inline
void 
DGtal::setFromDomainAndFunctor(const I& itb, const I& ite, const O& ito, 
			       const F& aFunctor, const typename F::Value& aThreshold)
{
  BOOST_CONCEPT_ASSERT(( CPointFunctor<F> )); 
  BOOST_CONCEPT_ASSERT(( boost::InputIterator<I> ));
  BOOST_CONCEPT_ASSERT(( boost::OutputIterator<O,typename F::Point> ));

  typedef Thresholder<typename F::Value,false,false> T; 
  T t( aThreshold ); 
  Composer<F, T, bool> aPred(aFunctor, aThreshold); 
  std::remove_copy_if(itb, ite, ito, aPred); 
}

//------------------------------------------------------------------------------
template<typename I, typename O>
inline
void 
DGtal::setFromImage(const I& aImg, const O& ito, const typename I::Value& aThreshold)
{
  BOOST_CONCEPT_ASSERT(( CConstImage<I> )); 

  typename I::Domain d = aImg.domain(); 
  setFromDomainAndFunctor(d.begin(), d.end(), ito, aImg, aThreshold); 
}
