/**
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as
 *  published by the Free Software Foundation, either version 3 of the
 *  License, or  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 **/

/**
 * @file ImageCache.ih
 * @author Martial Tola (\c martial.tola@liris.cnrs.fr )
 * Laboratoire d'InfoRmatique en Image et Syst√®mes d'information - LIRIS (CNRS, UMR 5205), CNRS, France
 *
 * @date 2013/01/24
 *
 * Implementation of inline methods defined in ImageCache.h
 *
 * This file is part of the DGtal library.
 */


//////////////////////////////////////////////////////////////////////////////
#include <cstdlib>

//////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// IMPLEMENTATION of inline methods.
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// ----------------------- Standard services ------------------------------


///////////////////////////////////////////////////////////////////////////////
// Interface - public :

/**
 * Writes/Displays the object on an output stream.
 * @param out the output stream where the object is written.
 */
template <typename TImageContainer, typename TImageFactory, DGtal::ReadPolicy AReadPolicy, DGtal::WritePolicy AWritePolicy>
inline
void
DGtal::ImageCache<TImageContainer, TImageFactory, AReadPolicy, AWritePolicy>::selfDisplay ( std::ostream & out ) const
{
    /*if (myCacheImagesPtr==NULL)
      out << "[ImageCache] " << "empty";
    else
      out << "[ImageCache] " << (*myCacheImagesPtr);*/
    
    out << "[ImageCache] ";
}

template <typename TImageContainer, typename TImageFactory, DGtal::ReadPolicy AReadPolicy, DGtal::WritePolicy AWritePolicy>
DGtal::ImageCache<TImageContainer, TImageFactory, AReadPolicy, AWritePolicy>::ImageCache(Alias<ImageFactory> anImageFactory):
            myImageFactoryPtr(anImageFactory)
{
    myImageCacheSpecializations = new ImageCacheSpecializations<Self, TImageContainer, TImageFactory, AReadPolicy>(this); // or *this ???
}

template <typename TImageContainer, typename TImageFactory, DGtal::ReadPolicy AReadPolicy, DGtal::WritePolicy AWritePolicy>
DGtal::ImageCache<TImageContainer, TImageFactory, AReadPolicy, AWritePolicy>::~ImageCache()
{
    delete myImageCacheSpecializations;
}

template <typename TImageContainer, typename TImageFactory, DGtal::ReadPolicy AReadPolicy, DGtal::WritePolicy AWritePolicy>
inline
bool
DGtal::ImageCache<TImageContainer, TImageFactory, AReadPolicy, AWritePolicy>::read(const Point & aPoint, Value &aValue) const
{
    return myImageCacheSpecializations->readSpecializations(aPoint, aValue);
}

template <typename TImageContainer, typename TImageFactory, DGtal::ReadPolicy AReadPolicy, DGtal::WritePolicy AWritePolicy>
inline
bool
DGtal::ImageCache<TImageContainer, TImageFactory, AReadPolicy, AWritePolicy>::write(const Point & aPoint, const Value &aValue)
{
    return myImageCacheSpecializations->writeSpecializations(aPoint, aValue);
}

template <typename TImageContainer, typename TImageFactory, DGtal::ReadPolicy AReadPolicy, DGtal::WritePolicy AWritePolicy>
inline
void
DGtal::ImageCache<TImageContainer, TImageFactory, AReadPolicy, AWritePolicy>::update(const Domain &aDomain)
{
    myImageCacheSpecializations->updateSpecializations(aDomain);
}

///////////////////////////////////////////////////////////////////////////////
// Implementation of inline functions                                        //

template <typename TImageContainer, typename TImageFactory, DGtal::ReadPolicy AReadPolicy, DGtal::WritePolicy AWritePolicy>
inline
std::ostream&
DGtal::operator<< ( std::ostream & out,
                    const ImageCache<TImageContainer, TImageFactory, AReadPolicy, AWritePolicy> & object )
{
    object.selfDisplay( out );
    return out;
}

//                                                                           //
///////////////////////////////////////////////////////////////////////////////


