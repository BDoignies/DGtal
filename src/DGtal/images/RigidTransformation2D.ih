/**
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as
 *  published by the Free Software Foundation, either version 3 of the
 *  License, or  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 **/

/**
 * @file RigidTransformation2D.ih
 * @author Kacper Pluta (\c kacper.pluta@esiee.fr )
 * Laboratoire d'Informatique Gaspard-Monge - LIGM, France
 *
 * @date 2014/06/26
 *
 * Implementation of inline methods defined in RigidTransformation2D.h
 *
 * This file is part of the DGtal library.
 */


//////////////////////////////////////////////////////////////////////////////
#include <cstdlib>
#include <cmath>
#include <vector>
//////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// IMPLEMENTATION of inline methods.
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// ----------------------- Standard services ------------------------------

/**
 * Destructor.
 */
template <typename Image>
inline
DGtal::RigidTransformation2D<Image>::~RigidTransformation2D()
{
}

///////////////////////////////////////////////////////////////////////////////
// Interface - public :

/**
 * Writes/Displays the object on an output stream.
 * @param out the output stream where the object is written.
 */
template <typename Image>
inline
void
DGtal::RigidTransformation2D<Image>::selfDisplay ( std::ostream & out ) const
{
  out << "[RigidTransformation2D]";
}

/**
 * Checks the validity/consistency of the object.
 * @return 'true' if the object is valid, 'false' otherwise.
 */
template <typename Image>
inline
bool
DGtal::RigidTransformation2D<Image>::isValid() const
{
    return true;
}

template <typename Image>
inline
typename Image::Point DGtal::RigidTransformation2D<Image>::transform ( typename Image::Point & point )
{
  typename Image::Point p;
  p[0] = std::floor ( ( ( t_cos * ( point[0] - origin[0] ) -
  t_sin * ( point[1] - origin[1] ) ) + translation[0] ) + 0.5 );
  
  p[1] = std::floor ( ( ( t_sin * ( point[0] - origin[0] ) +
  t_cos * ( point[1] - origin[1] ) ) + translation[1] ) + 0.5 );
  return p + origin;
}

template <typename Image>
inline
typename Image::Point DGtal::RigidTransformation2D<Image>::inversedTransform ( typename Image::Point & point )
{
  typename Image::Point p;
  p[0] = std::floor ( ( t_cos * (point[0] - translation[0] - origin[0] ) +
  t_sin * ( point[1] - translation[1] - origin[1] ) ) + 0.5 );
  
  p[1] = std::floor ( ( -t_sin * ( point[0] - translation[0] - origin[0] ) 
  + t_cos * ( point[1] - translation[1] - origin[1] ) ) + 0.5 );
  return p + origin;
}

template <typename Image>
Image DGtal::RigidTransformation2D<Image>::allocate ( typename Image::Domain & domain )
{
  Point start = domain.first();
  Point end = domain.last();
  std::vector < Point > points ( 4 );
  
  points[0] = transform ( start - origin ) + origin;
  points[1] = transform ( end - origin ) + origin;
  points[2] = transform ( Point ( end[0], start[1] ) - origin ) + origin;
  points[3] = transform ( Point ( start[0], end[1] ) - origin ) + origin;
  
  Point t_min ( INT_MAX, INT_MAX ), t_max ( INT_MIN, INT_MIN );
  for ( typename std::vector < Point >::const_iterator it = points.begin(); it != points.end(); ++it )
  {
    if ( (*it)[0] < t_min[0] )
      t_min[0] = (*it)[0]; 
    if ( (*it)[1] < t_min[1] )
      t_min[1] = (*it)[1];
    
     if ( (*it)[0] > t_max[0] )
      t_max[0] = (*it)[0]; 
    if ( (*it)[1] > t_max[1] )
      t_max[1] = (*it)[1]; 
  }
  return Image ( Image::Domain ( t_min, t_max ) );
}

template <typename Image>
inline
Image DGtal::RigidTransformation2D<Image>::forwardTransformation ( Image & image )
{
  Image output = allocate ( image.domain() );
  
  for ( typename Image::Domain::ConstIterator it = image.domain().begin(); it != image.domain().end(); ++it )
  {
    output.setValue ( image ( transform ( *it ) ) );
  }
  return output;
}

template <typename Image>
inline
Image DGtal::RigidTransformation2D<Image>::backwardTransformation ( Image & image )
{
  Image output = allocate ( image.domain() );
  
  for ( typename Image::Domain::ConstIterator it = output.domain().begin(); it != output.domain().end(); ++it )
  {
    output.setValue ( image ( inversedTransform ( *it ) ) );
  }
  return output;
}
///////////////////////////////////////////////////////////////////////////////
// Implementation of inline functions                                        //

template <typename Image>
inline
std::ostream&
DGtal::operator<< ( std::ostream & out, 
		  const RigidTransformation2D<Image> & object )
{
  object.selfDisplay( out );
  return out;
}

//                                                                           //
///////////////////////////////////////////////////////////////////////////////


