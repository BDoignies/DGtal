/**
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as
 *  published by the Free Software Foundation, either version 3 of the
 *  License, or  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 **/

/**
 * @file ImageCacheSpecializations.ih
 * @author Martial Tola (\c martial.tola@liris.cnrs.fr )
 * Laboratoire d'InfoRmatique en Image et Syst√®mes d'information - LIRIS (CNRS, UMR 5205), CNRS, France
 *
 * @date 2013/02/06
 *
 * Implementation of inline methods defined in ImageCacheSpecializations.h
 *
 * This file is part of the DGtal library.
 */


//////////////////////////////////////////////////////////////////////////////
#include <cstdlib>

//////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// IMPLEMENTATION of inline methods.
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// ----------------------- Standard services ------------------------------

template <typename TImageCache, typename TImageContainer, typename TImageFactory, DGtal::ReadPolicy AReadSelector, DGtal::WritePolicy AWriteSelector>
inline
bool
DGtal::ImageCacheSpecializations<TImageCache, TImageContainer, TImageFactory, AReadSelector, AWriteSelector>::readSpecializations(const Point & aPoint, Value &aValue)
{
  trace.info() << " -> readSpecializations: NOT DEFINED !" << std::endl;
}

template <typename TImageCache, typename TImageContainer, typename TImageFactory, DGtal::ReadPolicy AReadSelector, DGtal::WritePolicy AWriteSelector>
inline
bool
DGtal::ImageCacheSpecializations<TImageCache, TImageContainer, TImageFactory, AReadSelector, AWriteSelector>::writeSpecializations(const Point & aPoint, const Value &aValue)
{
  trace.info() << " ---> writeSpecializations: NOT DEFINED !" << std::endl;
}

template <typename TImageCache, typename TImageContainer, typename TImageFactory, DGtal::ReadPolicy AReadSelector, DGtal::WritePolicy AWriteSelector>
inline
void
DGtal::ImageCacheSpecializations<TImageCache, TImageContainer, TImageFactory, AReadSelector, AWriteSelector>::updateSpecializations(const Domain &aDomain)
{
  trace.info() << " -----> updateSpecializations: NOT DEFINED !" << std::endl;
}

// ----------------------- Specialization DGtal::CACHE_READ_POLICY_LAST and DGtal::CACHE_WRITE_POLICY_WT ------------------------------

template <typename TImageCache, typename TImageContainer, typename TImageFactory>
inline
bool
DGtal::ImageCacheSpecializations<TImageCache, TImageContainer, TImageFactory, DGtal::CACHE_READ_POLICY_LAST, DGtal::CACHE_WRITE_POLICY_WT>::readSpecializations(const Point & aPoint, Value &aValue)
{
  if (myCacheImagesPtr==NULL)
    return false;

  if (myCacheImagesPtr->domain().isInside(aPoint))
  {
      aValue = myCacheImagesPtr->operator()(aPoint);
      return true;
  }
  else
      return false;
  
  return false;
}

template <typename TImageCache, typename TImageContainer, typename TImageFactory>
inline
bool
DGtal::ImageCacheSpecializations<TImageCache, TImageContainer, TImageFactory, DGtal::CACHE_READ_POLICY_LAST, DGtal::CACHE_WRITE_POLICY_WT>::writeSpecializations(const Point & aPoint, const Value &aValue)
{
  if (myCacheImagesPtr==NULL)
    return false;

  if (myCacheImagesPtr->domain().isInside(aPoint))
  {
      myCacheImagesPtr->setValue(aPoint, aValue);
      myImageCache->getImageFactoryPtr()->flushImage(myCacheImagesPtr); // DGtal::CACHE_WRITE_POLICY_WT
      return true;
  }
  else
      return false;
  
  return false;
}

template <typename TImageCache, typename TImageContainer, typename TImageFactory>
inline
void
DGtal::ImageCacheSpecializations<TImageCache, TImageContainer, TImageFactory, DGtal::CACHE_READ_POLICY_LAST, DGtal::CACHE_WRITE_POLICY_WT>::updateSpecializations(const Domain &aDomain)
{
  if (myCacheImagesPtr)
    myImageCache->getImageFactoryPtr()->detachImage(myCacheImagesPtr);
  
  myCacheImagesPtr = myImageCache->getImageFactoryPtr()->request(aDomain);
}

// ----------------------- Specialization DGtal::CACHE_READ_POLICY_LAST and DGtal::CACHE_WRITE_POLICY_WB ------------------------------

template <typename TImageCache, typename TImageContainer, typename TImageFactory>
inline
bool
DGtal::ImageCacheSpecializations<TImageCache, TImageContainer, TImageFactory, DGtal::CACHE_READ_POLICY_LAST, DGtal::CACHE_WRITE_POLICY_WB>::readSpecializations(const Point & aPoint, Value &aValue)
{
  // same as DGtal::ImageCacheSpecializations<TImageCache, TImageContainer, TImageFactory, DGtal::CACHE_READ_POLICY_LAST, DGtal::CACHE_WRITE_POLICY_WT>::readSpecializations(const Point & aPoint, Value &aValue)
  if (myCacheImagesPtr==NULL)
    return false;

  if (myCacheImagesPtr->domain().isInside(aPoint))
  {
      aValue = myCacheImagesPtr->operator()(aPoint);
      return true;
  }
  else
      return false;
  
  return false;
}

template <typename TImageCache, typename TImageContainer, typename TImageFactory>
inline
bool
DGtal::ImageCacheSpecializations<TImageCache, TImageContainer, TImageFactory, DGtal::CACHE_READ_POLICY_LAST, DGtal::CACHE_WRITE_POLICY_WB>::writeSpecializations(const Point & aPoint, const Value &aValue)
{
  if (myCacheImagesPtr==NULL)
    return false;

  if (myCacheImagesPtr->domain().isInside(aPoint))
  {
      myCacheImagesPtr->setValue(aPoint, aValue);
      return true;
  }
  else
      return false;
  
  return false;
}

template <typename TImageCache, typename TImageContainer, typename TImageFactory>
inline
void
DGtal::ImageCacheSpecializations<TImageCache, TImageContainer, TImageFactory, DGtal::CACHE_READ_POLICY_LAST, DGtal::CACHE_WRITE_POLICY_WB>::updateSpecializations(const Domain &aDomain)
{
  if (myCacheImagesPtr)
  {
    myImageCache->getImageFactoryPtr()->flushImage(myCacheImagesPtr); // CACHE_WRITE_POLICY_WB
    myImageCache->getImageFactoryPtr()->detachImage(myCacheImagesPtr);
  }
  
  myCacheImagesPtr = myImageCache->getImageFactoryPtr()->request(aDomain);
}

//                                                                           //
///////////////////////////////////////////////////////////////////////////////


