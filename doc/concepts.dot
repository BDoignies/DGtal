### Dot graph of DGtal concepts
# D. Coeurjolly


 
digraph G {
  rankdir=BT;
  
  subgraph cluster_0 {
    style=filled;
    color=lightgrey;
    node [style=filled,color=white];
    CPointPredicate -> CPointFunctor ;
    CSpace;
    CUnsignedInteger-> CInteger;
    CEuclideanRing->CCommutativeRing ;
    CSignedInteger ->  CInteger;
    CDomain;
	
    CDomainArchetype;
    CDigitalSet;
    CDigitalSetArchetype;
    label = "Kernel";
  }

  subgraph cluster_1 {
    style=filled;
    color=lightgrey;
    node [style=filled,color=white];
    CSinglePassRange-> CConstSinglePassRange ;
    CBidirectionalRange -> CSinglePassRange;
    CBidirectionalRange -> CConstBidirectionalRange;
    label = "Base";
  }

  subgraph cluster_2 {
    style=filled;
    color=lightgrey;
    node [style=filled,color=white];
    "CValue" -> CImageContainer [label="use",style=dashed] ;
    CQuantity -> CValue;
    CLabel -> CQuantity;
    label="Images";
  }
	
  subgraph cluster_3 {
    style=filled;
    color=lightgrey;
    node [style=filled,color=white];
    CDigitalBoundedShape;
    CDigitalOrientedShape;
    CEuclideanBoundedShape;
    CEuclideanOrientedShape;
	  
    label="Shapes";
  }
	
  subgraph cluster_4 {
    style=filled;
    color=lightgrey;
    node [style=filled,color=white];
          
    CDigitalSurface;
    CDomainAdjacency -> CAdjacency ; 
          
    label="Topology";
  }
  subgraph cluster_5 {
    style=filled;
    color=lightgrey;
    node [style=filled,color=white];
               
    CBidirectionalSegmentComputer -> CForwardSegmentComputer -> CTrivialSegmentComputer -> CSegment; 
    CDynamicSegmentComputer-> "CForwardSegmentComputer" ;
    CDynamicBidirectionalSegmentComputer->          CDynamicSegmentComputer  ;

    CDynamicBidirectionalSegmentComputer->          CBidirectionalSegmentComputer;
    CSeparableMetric;
    label="Geometry";
  }
	
  "CDomain" -> CImageContainer  [label="use",style=dashed];
   CDomain -> CSpace [label="use",style=dashed];
  "CInteger" -> CSpace  [label="use",style=dashed];
  "CUnsignedInteger" -> CSpace [label="use",style=dashed];


  "CConstSinglePassRange" -> boost_SinglePassIteratorConcept [label="use",style=dashed];
  "CSinglePassRange"->  boost_SinglePassIteratorConcept [label="use",style=dashed] ;
 
  CDigitalSet -> boost_CopyConstructible;
  CSegment ->  boost_CopyConstructible ;

  CValue -> boost_DefaultConstructible;
  CSegment ->boost_DefaultConstructible;

  CDigitalSet -> boost_Assignable ;
  CLabel -> boost_Assignable;
  CInteger -> boost_Assignable;
  CSegment -> boost_Assignable;
  CCommutativeRing -> boost_Assignable;
  CPointFunctor -> boost_Assignable;
  
  boost_BirectionalIterator;

  CQuantity -> boost_LessThanComparable;

  CInteger-> boost_EqualityComparable;
  CLabel-> boost_EqualityComparable;
  CSegment-> boost_EqualityComparable;
  CCommutativeRing-> boost_EqualityComparable;
  CCommutativeRing-> boost_EqualityComparable;
  CInteger-> boost_EqualityComparable;
}
