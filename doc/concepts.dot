### Dot graph of DGtal concepts
# D. Coeurjolly


 
digraph G {

  
	subgraph cluster_0 {
		style=filled;
		color=lightgrey;
		node [style=filled,color=white];
		CPointFunctor -> CPointPredicate;
		CSpace;
		CInteger -> CUnsignedInteger;
		CCommutativeRing -> CEuclideanRing;
		CInteger -> CSignedInteger;
		CDomain;
	
		CDomainArchetype;
		CDigitalSet;
		CDigitalSetArchetype;
		label = "Kernel";
	}

	subgraph cluster_1 {
		style=filled;
		color=lightgrey;
		node [style=filled,color=white];
		CConstSinglePassRange -> CSinglePassRange;
		CSinglePassRange -> CBidirectionalRange;
		CConstBidirectionalRange -> CBidirectionalRange;
		label = "Base";
	}

	subgraph cluster_2 {
	style=filled;
		color=lightgrey;
		node [style=filled,color=white];
		CImageContainer->"CValue" [label="use",style=dashed];

		label="Images";
	}
	
	subgraph cluster_3 {
	  style=filled;
	  color=lightgrey;
	  node [style=filled,color=white];
	  CDigitalBoundedShape;
	  CDigitalOrientedShape;
	  CEuclideanBoundedShape;
	  CEuclideanBoundedShape;
	  
	  label="Shapes";
	}
	
	subgraph cluster_4 {
	  style=filled;
	  color=lightgrey;
	  node [style=filled,color=white];
          
          CDigitalSurface;
          CAdjacency -> CDomainAdjacency; 
          
	  label="Topology";
	}
	subgraph cluster_5 {
	  style=filled;
	  color=lightgrey;
	  node [style=filled,color=white];
               
          CSegment -> CTrivialSegmentComputer -> "CForwardSegmentComputer" ->          CBidirectionalSegmentComputer; 
          "CForwardSegmentComputer" -> CDynamicSegmentComputer;
          CDynamicSegmentComputer -> CDynamicBidirectionalSegmentComputer;
          CBidirectionalSegmentComputer -> CDynamicBidirectionalSegmentComputer;
          CSeparableMetric;
           label="Geometry";
	}
	
  CImageContainer->"CDomain" [label="use",style=dashed];
  CDomain->"CSpace" [label="use",style=dashed];
  CSpace->"CInteger"  [label="use",style=dashed];
  CSpace->"CUnsignedInteger" [label="use",style=dashed];


  "CConstSinglePassRange" -> boost_SingePassIteratorConcept [label="use",style=dashed];
  "CSinglePassRange" -> boost_SingePassIteratorConcept [label="use",style=dashed];
 
  boost_CopyConstructible -> CDigitalSet;
  boost_CopyConstructible -> CSegment;

  boost_DefaultConstructible -> CValue;
  boost_DefaultConstructible -> CSegment;

  boost_Assignable -> CDigitalSet;
  boost_Assignable -> CValue;
  boost_Assignable->CInteger;
  boost_Assignable -> CSegment;
  boost_Assignable -> CCommutativeRing;
  boost_Assignable -> CPointFunctor;
  
   boost_BirectionalIterator;

  boost_EqualityComparable->CInteger;
  boost_EqualityComparable->CValue;
  boost_EqualityComparable->CSegment;
  boost_EqualityComparable->CCommutativeRing;
  boost_LessThanComparable -> CCommutativeRing;
  boost_LessThanComparable->CInteger;
}
