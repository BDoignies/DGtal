
/* 
 * Useful to avoid writing DGtal:: in front of every class.
 */
namespace DGtal {

/*!
   
@page dgtal_convex_integer_polygon  Convex polygons with integer coordinates in the plane

@writers Jacques-Olivier Lachaud

Part of the \ref pageArithmeticPackage.

This module gathers classes and functions to represent convex integer
polygons and digital half-spaces. The main part of the module is the
class ConvexIntegerPolygon, which represents these polygons. This
module is a possible solution for solving \b integer \b linear \b
programming in the \b plane. It is thus the basis for the COBA
algorithm for \b recognizing \b digital \b planes (see
COBANaivePlane).

[TOC]

\section dgtal_convex_integer_polygon_sec1 Creating a convex integer polygon

The class ConvexIntegerPolygon represents an arbitary convex polygon
in the 2D plane whose vertices have integer coordinates. It is
parameterized by a digital space \a TSpace (a model of CSpace with
dimension 2) and by the container class \a TSequence for storing
vertices (a model of [boost::Sequence
http://www.sgi.com/tech/stl/Sequence.html] over TSpace::Point, default
is std::list<TSpace::Point>). The class ConvexIntegerPolygon then
derives from the given \a TSequence and you may use all the standard
methods of sequences. All the data of a ConvexIntegerPolygon are in
its base class \a TSequence.

The class ConvexIntegerPolygon is a model of <a
href="http://www.sgi.com/tech/stl/Sequence.html">boost::Sequence</a>,
but also of boost::DefaultConstructible, boost::CopyConstructible,
boost::Assignable. This class is also a model of
CDrawableWithBoard2D. You may therefore display it on a Board2D
object. 

Since a sequence is ordered, its order defines the order of vertices
along the polygon, i.e. any vertex in the sequence forms an edge with
the previous vertex and another edge with the next vertex. Note that
the vertices must follow the \b clockwise ordering, i.e. the inside of
the polygon is to the right-hand side when moving along the polygon. The
following example defines a triangle in the standard limited integer
planes Z2i::Z2 (integer coordinates are \c int32_t):

@code
#include "DGtal/arithmetic/ConvexIntegerPolygon.h"
using namespace Z2i;
...
typedef ConvexIntegerPolygon<Z2> CIP;
CIP triangle;
triangle.push_front( Point( 0, 0 ) );
triangle.push_front( Point( 0, 7 ) );
triangle.push_front( Point( 10, 0 ) );
@endcode

\note This class contains a mutable object IntegerComputer as well as
several other mutable members to perform computations efficiently (see
dgtal_integer_computations). However these private data members are
not copied nor assigned. They exists so as to avoid memory managements
when using big integers.

You may use any insertion/deletion methods of a sequence (insert,
erase, push_back, push_front, etc). Be careful however, in order that
the object has a correct behaviour in more elaborate methods like
ConvexIntegerPolygon::cut() or ConvexIntegerPolygon::findCut, you must
enforce that inserted or deleted vertices leave the polygon convex.

\section dgtal_convex_integer_polygon_sec2 Displaying convex integer polygon

A ConvexIntegerPolygon is a model of CDrawableWithBoard2D. Therefore
it is displayable on a Board2D with the operator \c <<. The following
example displays a square in red over its domain.

@snippet arithmetic/lower-integer-convex-hull.cpp lower-integer-convex-hull-instantiation

You may choose colors with the usual CustomStyle / CustomColors
mechanism. Furthermore, choosing Color::None for filling colors allows
to draw only the boundary of the polygon.

@image html lower-integer-convex-hull.png "Display of a ConvexIntegerPolygon object in red (a square of side 20)"
@image latex lower-integer-convex-hull.png "Display of a ConvexIntegerPolygon object in red (a square of side 20)" width=5cm

\section dgtal_convex_integer_polygon_sec3 Converting a convex integer polygon into a digital set

It is sometimes useful to enumerate all the integer points lying
within the polygon bounds. The method
ConvexIntegerPolygon::getIncludedDigitalPoints() is templated by the
type \a TDigitalSet, which must be a model of CDigitalSet. It modifies
the digital set given in parameter so as to holds these points. For
now, the complexity is not optimal. If \a D is the size of the domain
of \a TDigitalSet, \a N the number of vertices of the polygon, then
the complexity is upper bounded by O(ND).

@code
// cip is some convex integer polygon
Domain domain = cip.boundingBoxDomain();
DigitalSet aSet( domain );
cip.getIncludedDigitalPoints( aSet );
// aSet contains the digital points inside or on the boundary of the polygon.
board << aSet; // displays them.
@endcode

\section dgtal_convex_integer_polygon_sec4 Basic services: vertices, centroid, area

Since a ConvexIntegerPolygon is a sequence, you may iterate over the
vertices with the usual ConvexIntegerPolygon::begin()and
ConvexIntegerPolygon::end(), with two versions of iterators (Iterator
and ConstIterator). To know if the polygon has no vertices, it is
faster to use ConvexIntegerPolygon::empty(). Otherwise you may obtain
the following information:

- number of vertices: ConvexIntegerPolygon::size()

- the double of the area, which is an integer:
  ConvexIntegerPolygon::twiceArea()

- the exact centroid of the polygon as a triplet of integers (x,y,g),
  where the centroid rational coordinates are (x/g,y/g):
  ConvexIntegerPolygon::centroid().

A ConvexIntegerPolygon \a P may have zero area but up to two vertices
!  Thanks to Pick formula, you can also get the exact number \a b of
points on the boundary and the exact number \a i of points in the
interior of the polygon: \f$ A(P) = i + b/2 - 1 \f$.

- number of interior points: ConvexIntegerPolygon::numberInteriorPoints
- number of boundary points: ConvexIntegerPolygon::numberBoundaryPoints

@snippet arithmetic/lower-integer-convex-hull.cpp lower-integer-convex-hull-stats


\section dgtal_convex_integer_polygon_sec5 Cutting the polygon by half-planes

You may also update a ConvexIntegerPolygon by intersecting with
half-planes, i.e. linear constraints of the form ax+by <= c. The
polygon is updated so that all its vertices have integer coordinates
and the constraints are fulfilled. This means for instance that a set
of linear constraints may have a non-empty interior, but the resulting
polygon may be empty or have an empty interior. However, it is
guaranteed that all integer solution are kept.

This snippet is taken from example lower-integer-convex-hull.cpp. It
cuts the polygon by calling ConvexIntegerPolygon::cut. An Half-plane
is specified beforehands by instantiating a
ConvexIntegerPolygon::HalfSpace. Note that it is a redefinition of the
class ClosedIntegerHalfPlane.

@snippet arithmetic/lower-integer-convex-hull.cpp lower-integer-convex-hull-process

@image html lower-integer-convex-hull-cut.png "Square of side 20 cut by the half-plane 3x+13y <= 19"
@image latex lower-integer-convex-hull-cut.png "Square of side 20 cut by the half-plane 3x+13y <= 19" width=5cm

This shows the successive polygons obtained by cutting a square with constraints -5x+8y <= c.

@image html lower-animation.gif "Square cut by the half space -5x+8y <= c, for c from -130 to 130"


*/

/**
   This example shows how to create a ConvexIntegerPolygon that
   represents a square. Then given integer parameters \a a, \a b, \a
   c, it cuts the polygon by the half-plane \f$ ax+by \le c \f$. It
   also outputs some statistics.

@see \ref dgtal_convex_integer_polygon_sec5

@verbatim
$ ./examples/arithmetic/lower-integer-convex-hull -5 8 41
Number of vertices        = 8
Area                      = 299.5
Number of interior points = 273
Number of boundary points = 55
# The animation below was created by this script (needs ImageMagick)
$ let x=130; while test $x -ge -130; do echo "--- $x ---"; ./examples/arithmetic/lower-integer-convex-hull -5 8 $x; let z=x+130; y=`printf "%03d" $z`; convert -resize 300x300 -background white -layers flatten lower-integer-convex-hull-cut.eps lower-integer-convex-hull-$y.gif; let x=x-2; done
...
$ convert -delay 20 -loop 0 lower-integer-convex-hull-*.gif lower-animation.gif
$ animate lower-animation.gif 
@endverbatim

@image html lower-integer-convex-hull-cut-2.png "Square of side 20 cut by the half-plane -5x+8y <= 41"
@image latex lower-integer-convex-hull-cut-2.png "Square of side 20 cut by the half-plane -5x+8y <= 41" width=5cm

@image html lower-animation.gif "Square cut by the half space -5x+8y <= c, for c from -130 to 130"

\example arithmetic/lower-integer-convex-hull.cpp
*/

}
