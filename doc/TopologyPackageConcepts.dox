
/**
 * @file topologyPackageConcepts.dox
 * @author David Coeurjolly (\c david.coeurjolly@liris.cnrs.fr )
 * Laboratoire d'InfoRmatique en Image et SystÃ¨mes d'information - LIRIS (CNRS, UMR 5205), CNRS, France
 *
 * @date 2012/03/16
 *
 * Documentation file for feature TopologyPackageConcepts
 *
 * This file is part of the DGtal library.
 */

/* 
 * Useful to avoid writing DGtal:: in front of every class.
 * Do not forget to add an entry in src/DGtal/base/Config.h.in !
 */
namespace DGtal {
//----------------------------------------
/*!
@page TopologyPackageConcepts Topology Concepts and Models
@writers Jacques-Olivier Lachaud

 @dot   
digraph GTOPO {
    rankdir= BT

    subgraph cluster_ext {
	rank = same;
        style=invis;
        subgraph cluster_1 {
                 style=filled;
                 color="#eeeeff";
                 node [style=filled,color=white];
                 label="base";

                 CConstSinglePassRange ; 
                 CPredicate; 
        }
        subgraph cluster_2 {
                 style=filled;
                 color=white;
                 node [style=filled,color=orange];
                 label="boost";

                 boost_CopyConstructible;
        }
    }
  
    subgraph cluster_0 {
        style=filled;
        color=lightgrey;
        node [style=filled,color=white];
        label="topology (main concepts)";

        CDigitalSurfaceContainer;
        CDigitalSurfaceTracker;
	CUndirectedSimpleGraph;
        CDomainAdjacency; 
	CAdjacency;
        CUndirectedSimpleLocalGraph;
        CUndirectedSimpleGraph -> CUndirectedSimpleLocalGraph;
        CDomainAdjacency -> CAdjacency ; 
        CVertexPredicate;
        CSurfelPredicate;
    }
    CDigitalSurfaceContainer -> boost_CopyConstructible;
    CDigitalSurfaceTracker -> boost_CopyConstructible;
    CUndirectedSimpleLocalGraph -> CConstSinglePassRange;
    CVertexPredicate -> CPredicate;
    CSurfelPredicate -> CPredicate;
  
    subgraph cluster_models {
        style=filled;
        color="#ccffcc";
        node [style=filled,color=white];
        label="topology (main models)";

        MetricAdjacency;
        DigitalSurface;

        DigitalSetBoundary;
        ImplicitDigitalSurface;
        LightImplicitDigitalSurface;
        SetOfSurfels;
        ExplicitDigitalSurface;
        LightExplicitDigitalSurface;


    }

    MetricAdjacency -> CAdjacency;
    DigitalSurface -> CUndirectedSimpleGraph;
    DigitalSetBoundary -> CDigitalSurfaceContainer;
    ImplicitDigitalSurface -> CDigitalSurfaceContainer;
    LightImplicitDigitalSurface -> CDigitalSurfaceContainer;
    SetOfSurfels -> CDigitalSurfaceContainer;
    ExplicitDigitalSurface -> CDigitalSurfaceContainer;
    LightExplicitDigitalSurface -> CDigitalSurfaceContainer;

}
@enddot

*/

}
